// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: protos/shared/shared.proto

package shared

import (
	context "context"
	fmt "fmt"
	proto "github.com/bittorrent/protobuf/proto"
	github_com_bittorrent_protobuf_types "github.com/bittorrent/protobuf/types"
	_ "github.com/gogo/protobuf/types"
	golang_proto "github.com/golang/protobuf/proto"
	_ "github.com/tron-us/protobuf/gogoproto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
	time "time"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = golang_proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf
var _ = time.Kitchen

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type RuntimeInfoReport_HealthStatus int32

const (
	RuntimeInfoReport_SICK         RuntimeInfoReport_HealthStatus = 0
	RuntimeInfoReport_RUNNING      RuntimeInfoReport_HealthStatus = 1
	RuntimeInfoReport_BOOTSTRAP    RuntimeInfoReport_HealthStatus = 2
	RuntimeInfoReport_PARTIAL_STOP RuntimeInfoReport_HealthStatus = 3
)

var RuntimeInfoReport_HealthStatus_name = map[int32]string{
	0: "SICK",
	1: "RUNNING",
	2: "BOOTSTRAP",
	3: "PARTIAL_STOP",
}

var RuntimeInfoReport_HealthStatus_value = map[string]int32{
	"SICK":         0,
	"RUNNING":      1,
	"BOOTSTRAP":    2,
	"PARTIAL_STOP": 3,
}

func (x RuntimeInfoReport_HealthStatus) String() string {
	return proto.EnumName(RuntimeInfoReport_HealthStatus_name, int32(x))
}

func (RuntimeInfoReport_HealthStatus) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_40efd7a2bcef91b6, []int{2, 0}
}

type RuntimeInfoRequest struct {
	RequestAddress       []byte    `protobuf:"bytes,1,opt,name=request_address,json=requestAddress,proto3" json:"request_address,omitempty" pg:"request_address"`
	CurentTime           time.Time `protobuf:"bytes,2,opt,name=curent_time,json=curentTime,proto3,stdtime" json:"curent_time" pg:"curent_time"`
	XXX_NoUnkeyedLiteral struct{}  `json:"-" pg:"-"`
	XXX_unrecognized     []byte    `json:"-" pg:"-"`
	XXX_sizecache        int32     `json:"-" pg:"-"`
}

func (m *RuntimeInfoRequest) Reset()         { *m = RuntimeInfoRequest{} }
func (m *RuntimeInfoRequest) String() string { return proto.CompactTextString(m) }
func (*RuntimeInfoRequest) ProtoMessage()    {}
func (*RuntimeInfoRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_40efd7a2bcef91b6, []int{0}
}
func (m *RuntimeInfoRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RuntimeInfoRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RuntimeInfoRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RuntimeInfoRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RuntimeInfoRequest.Merge(m, src)
}
func (m *RuntimeInfoRequest) XXX_Size() int {
	return m.Size()
}
func (m *RuntimeInfoRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_RuntimeInfoRequest.DiscardUnknown(m)
}

var xxx_messageInfo_RuntimeInfoRequest proto.InternalMessageInfo

func (m *RuntimeInfoRequest) GetRequestAddress() []byte {
	if m != nil {
		return m.RequestAddress
	}
	return nil
}

func (m *RuntimeInfoRequest) GetCurentTime() time.Time {
	if m != nil {
		return m.CurentTime
	}
	return time.Time{}
}

func (*RuntimeInfoRequest) XXX_MessageName() string {
	return "shared.RuntimeInfoRequest"
}

type SignedRuntimeInfoRequest struct {
	Req                  *RuntimeInfoRequest `protobuf:"bytes,1,opt,name=req,proto3" json:"req,omitempty" pg:"req"`
	Signature            []byte              `protobuf:"bytes,2,opt,name=signature,proto3" json:"signature,omitempty" pg:"signature"`
	XXX_NoUnkeyedLiteral struct{}            `json:"-" pg:"-"`
	XXX_unrecognized     []byte              `json:"-" pg:"-"`
	XXX_sizecache        int32               `json:"-" pg:"-"`
}

func (m *SignedRuntimeInfoRequest) Reset()         { *m = SignedRuntimeInfoRequest{} }
func (m *SignedRuntimeInfoRequest) String() string { return proto.CompactTextString(m) }
func (*SignedRuntimeInfoRequest) ProtoMessage()    {}
func (*SignedRuntimeInfoRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_40efd7a2bcef91b6, []int{1}
}
func (m *SignedRuntimeInfoRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SignedRuntimeInfoRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SignedRuntimeInfoRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SignedRuntimeInfoRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SignedRuntimeInfoRequest.Merge(m, src)
}
func (m *SignedRuntimeInfoRequest) XXX_Size() int {
	return m.Size()
}
func (m *SignedRuntimeInfoRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_SignedRuntimeInfoRequest.DiscardUnknown(m)
}

var xxx_messageInfo_SignedRuntimeInfoRequest proto.InternalMessageInfo

func (m *SignedRuntimeInfoRequest) GetReq() *RuntimeInfoRequest {
	if m != nil {
		return m.Req
	}
	return nil
}

func (m *SignedRuntimeInfoRequest) GetSignature() []byte {
	if m != nil {
		return m.Signature
	}
	return nil
}

func (*SignedRuntimeInfoRequest) XXX_MessageName() string {
	return "shared.SignedRuntimeInfoRequest"
}

type RuntimeInfoReport struct {
	PeerId               string                         `protobuf:"bytes,1,opt,name=peer_id,json=peerId,proto3" json:"peer_id,omitempty" pg:"peer_id"`
	Address              string                         `protobuf:"bytes,2,opt,name=address,proto3" json:"address,omitempty" pg:"address"`
	ServiceName          string                         `protobuf:"bytes,3,opt,name=service_name,json=serviceName,proto3" json:"service_name,omitempty" pg:"service_name"`
	Status               RuntimeInfoReport_HealthStatus `protobuf:"varint,4,opt,name=status,proto3,enum=shared.RuntimeInfoReport_HealthStatus" json:"status,omitempty" pg:"status"`
	CurentTime           time.Time                      `protobuf:"bytes,5,opt,name=curent_time,json=curentTime,proto3,stdtime" json:"curent_time" pg:"curent_time"`
	StartTime            time.Time                      `protobuf:"bytes,6,opt,name=start_time,json=startTime,proto3,stdtime" json:"start_time" pg:"start_time"`
	GitHash              string                         `protobuf:"bytes,7,opt,name=git_hash,json=gitHash,proto3" json:"git_hash,omitempty" pg:"git_hash"`
	Version              string                         `protobuf:"bytes,8,opt,name=version,proto3" json:"version,omitempty" pg:"version"`
	DbStatusExtra        map[string]string              `protobuf:"bytes,9,rep,name=db_status_extra,json=dbStatusExtra,proto3" json:"db_status_extra,omitempty" pg:"db_status_extra" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	RdStatusExtra        string                         `protobuf:"bytes,10,opt,name=rd_status_extra,json=rdStatusExtra,proto3" json:"rd_status_extra,omitempty" pg:"rd_status_extra"`
	QueueStatusExtra     string                         `protobuf:"bytes,11,opt,name=queue_status_extra,json=queueStatusExtra,proto3" json:"queue_status_extra,omitempty" pg:"queue_status_extra"`
	ChainStatusExtra     string                         `protobuf:"bytes,12,opt,name=chain_status_extra,json=chainStatusExtra,proto3" json:"chain_status_extra,omitempty" pg:"chain_status_extra"`
	CacheStatusExtra     string                         `protobuf:"bytes,13,opt,name=cache_status_extra,json=cacheStatusExtra,proto3" json:"cache_status_extra,omitempty" pg:"cache_status_extra"`
	Extra                string                         `protobuf:"bytes,14,opt,name=extra,proto3" json:"extra,omitempty" pg:"extra"`
	XXX_NoUnkeyedLiteral struct{}                       `json:"-" pg:"-"`
	XXX_unrecognized     []byte                         `json:"-" pg:"-"`
	XXX_sizecache        int32                          `json:"-" pg:"-"`
}

func (m *RuntimeInfoReport) Reset()         { *m = RuntimeInfoReport{} }
func (m *RuntimeInfoReport) String() string { return proto.CompactTextString(m) }
func (*RuntimeInfoReport) ProtoMessage()    {}
func (*RuntimeInfoReport) Descriptor() ([]byte, []int) {
	return fileDescriptor_40efd7a2bcef91b6, []int{2}
}
func (m *RuntimeInfoReport) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RuntimeInfoReport) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RuntimeInfoReport.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RuntimeInfoReport) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RuntimeInfoReport.Merge(m, src)
}
func (m *RuntimeInfoReport) XXX_Size() int {
	return m.Size()
}
func (m *RuntimeInfoReport) XXX_DiscardUnknown() {
	xxx_messageInfo_RuntimeInfoReport.DiscardUnknown(m)
}

var xxx_messageInfo_RuntimeInfoReport proto.InternalMessageInfo

func (m *RuntimeInfoReport) GetPeerId() string {
	if m != nil {
		return m.PeerId
	}
	return ""
}

func (m *RuntimeInfoReport) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

func (m *RuntimeInfoReport) GetServiceName() string {
	if m != nil {
		return m.ServiceName
	}
	return ""
}

func (m *RuntimeInfoReport) GetStatus() RuntimeInfoReport_HealthStatus {
	if m != nil {
		return m.Status
	}
	return RuntimeInfoReport_SICK
}

func (m *RuntimeInfoReport) GetCurentTime() time.Time {
	if m != nil {
		return m.CurentTime
	}
	return time.Time{}
}

func (m *RuntimeInfoReport) GetStartTime() time.Time {
	if m != nil {
		return m.StartTime
	}
	return time.Time{}
}

func (m *RuntimeInfoReport) GetGitHash() string {
	if m != nil {
		return m.GitHash
	}
	return ""
}

func (m *RuntimeInfoReport) GetVersion() string {
	if m != nil {
		return m.Version
	}
	return ""
}

func (m *RuntimeInfoReport) GetDbStatusExtra() map[string]string {
	if m != nil {
		return m.DbStatusExtra
	}
	return nil
}

func (m *RuntimeInfoReport) GetRdStatusExtra() string {
	if m != nil {
		return m.RdStatusExtra
	}
	return ""
}

func (m *RuntimeInfoReport) GetQueueStatusExtra() string {
	if m != nil {
		return m.QueueStatusExtra
	}
	return ""
}

func (m *RuntimeInfoReport) GetChainStatusExtra() string {
	if m != nil {
		return m.ChainStatusExtra
	}
	return ""
}

func (m *RuntimeInfoReport) GetCacheStatusExtra() string {
	if m != nil {
		return m.CacheStatusExtra
	}
	return ""
}

func (m *RuntimeInfoReport) GetExtra() string {
	if m != nil {
		return m.Extra
	}
	return ""
}

func (*RuntimeInfoReport) XXX_MessageName() string {
	return "shared.RuntimeInfoReport"
}
func init() {
	proto.RegisterEnum("shared.RuntimeInfoReport_HealthStatus", RuntimeInfoReport_HealthStatus_name, RuntimeInfoReport_HealthStatus_value)
	golang_proto.RegisterEnum("shared.RuntimeInfoReport_HealthStatus", RuntimeInfoReport_HealthStatus_name, RuntimeInfoReport_HealthStatus_value)
	proto.RegisterType((*RuntimeInfoRequest)(nil), "shared.RuntimeInfoRequest")
	golang_proto.RegisterType((*RuntimeInfoRequest)(nil), "shared.RuntimeInfoRequest")
	proto.RegisterType((*SignedRuntimeInfoRequest)(nil), "shared.SignedRuntimeInfoRequest")
	golang_proto.RegisterType((*SignedRuntimeInfoRequest)(nil), "shared.SignedRuntimeInfoRequest")
	proto.RegisterType((*RuntimeInfoReport)(nil), "shared.RuntimeInfoReport")
	golang_proto.RegisterType((*RuntimeInfoReport)(nil), "shared.RuntimeInfoReport")
	proto.RegisterMapType((map[string]string)(nil), "shared.RuntimeInfoReport.DbStatusExtraEntry")
	golang_proto.RegisterMapType((map[string]string)(nil), "shared.RuntimeInfoReport.DbStatusExtraEntry")
}

func init() { proto.RegisterFile("protos/shared/shared.proto", fileDescriptor_40efd7a2bcef91b6) }
func init() { golang_proto.RegisterFile("protos/shared/shared.proto", fileDescriptor_40efd7a2bcef91b6) }

var fileDescriptor_40efd7a2bcef91b6 = []byte{
	// 661 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x94, 0xcd, 0x6e, 0xd3, 0x40,
	0x10, 0xc7, 0xbb, 0x49, 0x9b, 0x8f, 0xc9, 0x47, 0xc3, 0x0a, 0x09, 0x37, 0x42, 0x69, 0xc8, 0xa1,
	0xe4, 0x50, 0x1c, 0x14, 0x2e, 0x88, 0x03, 0x90, 0x94, 0x42, 0xa3, 0xa2, 0x34, 0xb2, 0xc3, 0x05,
	0x09, 0x59, 0x9b, 0x78, 0x63, 0x5b, 0x6d, 0xec, 0x74, 0x77, 0x5d, 0xd1, 0x3b, 0x0f, 0x80, 0x38,
	0xf1, 0x38, 0x1c, 0x7b, 0xe4, 0x09, 0x00, 0xb5, 0x2f, 0x82, 0xbc, 0xbb, 0x51, 0x93, 0xb4, 0x3d,
	0xc0, 0xc9, 0x3b, 0xff, 0xf9, 0xcd, 0xc7, 0xce, 0x4e, 0x02, 0xd5, 0x19, 0x8b, 0x44, 0xc4, 0x5b,
	0xdc, 0x27, 0x8c, 0xba, 0xfa, 0x63, 0x4a, 0x11, 0x67, 0x94, 0x55, 0x7d, 0xea, 0x05, 0xc2, 0x8f,
	0x47, 0xe6, 0x38, 0x9a, 0xb6, 0x04, 0x8b, 0xc2, 0x27, 0x31, 0x6f, 0x49, 0x62, 0x14, 0x4f, 0x5a,
	0x5e, 0xe4, 0x45, 0xd2, 0x90, 0x27, 0x15, 0x59, 0xdd, 0xf6, 0xa2, 0xc8, 0x3b, 0xa1, 0xd7, 0x94,
	0x08, 0xa6, 0x94, 0x0b, 0x32, 0x9d, 0x29, 0xa0, 0xf1, 0x05, 0x01, 0xb6, 0xe2, 0x30, 0x91, 0x7b,
	0xe1, 0x24, 0xb2, 0xe8, 0x69, 0x4c, 0xb9, 0xc0, 0x8f, 0x61, 0x93, 0xa9, 0xa3, 0x43, 0x5c, 0x97,
	0x51, 0xce, 0x0d, 0x54, 0x47, 0xcd, 0xa2, 0x55, 0xd6, 0x72, 0x47, 0xa9, 0x78, 0x1f, 0x0a, 0xe3,
	0x98, 0xd1, 0x50, 0x38, 0x49, 0x0a, 0x23, 0x55, 0x47, 0xcd, 0x42, 0xbb, 0x6a, 0xaa, 0xb2, 0xe6,
	0xbc, 0xac, 0x39, 0x9c, 0x97, 0xed, 0xe6, 0x2e, 0x7e, 0x6d, 0xaf, 0x7d, 0xfd, 0xbd, 0x8d, 0x2c,
	0x50, 0x81, 0x89, 0xab, 0x31, 0x01, 0xc3, 0x0e, 0xbc, 0x90, 0xba, 0xb7, 0xf4, 0xb2, 0x0b, 0x69,
	0x46, 0x4f, 0x65, 0xfd, 0x24, 0xb5, 0x9e, 0xcc, 0x4d, 0xd0, 0x4a, 0x30, 0xfc, 0x10, 0xf2, 0x3c,
	0xf0, 0x42, 0x22, 0x62, 0xa6, 0xda, 0x29, 0x5a, 0xd7, 0x42, 0xe3, 0x5b, 0x06, 0xee, 0x2d, 0x45,
	0xce, 0x22, 0x26, 0xf0, 0x03, 0xc8, 0xce, 0x28, 0x65, 0x4e, 0xe0, 0xca, 0x2a, 0x79, 0x2b, 0x93,
	0x98, 0x3d, 0x17, 0x1b, 0x90, 0x9d, 0x5f, 0x3f, 0x25, 0x1d, 0x73, 0x13, 0x3f, 0x82, 0x22, 0xa7,
	0xec, 0x2c, 0x18, 0x53, 0x27, 0x24, 0x53, 0x6a, 0xa4, 0xa5, 0xbb, 0xa0, 0xb5, 0x3e, 0x99, 0x52,
	0xfc, 0x12, 0x32, 0x5c, 0x10, 0x11, 0x73, 0x63, 0xbd, 0x8e, 0x9a, 0xe5, 0xf6, 0xce, 0xad, 0xad,
	0x27, 0x0d, 0x98, 0x07, 0x94, 0x9c, 0x08, 0xdf, 0x96, 0xb4, 0xa5, 0xa3, 0x56, 0x47, 0xbb, 0xf1,
	0x7f, 0xa3, 0xc5, 0x7b, 0x00, 0x5c, 0x10, 0xa6, 0xb3, 0x64, 0xfe, 0x21, 0x4b, 0x5e, 0xc6, 0xc9,
	0x24, 0x5b, 0x90, 0xf3, 0x02, 0xe1, 0xf8, 0x84, 0xfb, 0x46, 0x56, 0x4d, 0xc2, 0x0b, 0xc4, 0x01,
	0xe1, 0x7e, 0x32, 0xa3, 0x33, 0xca, 0x78, 0x10, 0x85, 0x46, 0x4e, 0x79, 0xb4, 0x89, 0x87, 0xb0,
	0xe9, 0x8e, 0x1c, 0x75, 0x1b, 0x87, 0x7e, 0x16, 0x8c, 0x18, 0xf9, 0x7a, 0xba, 0x59, 0x68, 0xef,
	0xde, 0x3d, 0x89, 0x37, 0x23, 0x35, 0x85, 0xfd, 0x04, 0xdf, 0x0f, 0x05, 0x3b, 0xb7, 0x4a, 0xee,
	0xa2, 0x86, 0x77, 0x60, 0x93, 0xb9, 0xcb, 0x59, 0x41, 0xd6, 0x2d, 0x31, 0x77, 0x91, 0xdb, 0x05,
	0x7c, 0x1a, 0xd3, 0x98, 0x2e, 0xa3, 0x05, 0x89, 0x56, 0xa4, 0x67, 0x85, 0x1e, 0xfb, 0x24, 0x08,
	0x97, 0xe9, 0xa2, 0xa2, 0xa5, 0x67, 0x95, 0x26, 0x63, 0x7f, 0x25, 0x77, 0x49, 0xd3, 0x89, 0x67,
	0x91, 0xbe, 0x0f, 0x1b, 0x0a, 0x28, 0x4b, 0x40, 0x19, 0xd5, 0xd7, 0x80, 0x6f, 0x5e, 0x16, 0x57,
	0x20, 0x7d, 0x4c, 0xcf, 0xf5, 0x1a, 0x26, 0xc7, 0x24, 0xfa, 0x8c, 0x9c, 0xc4, 0x54, 0x6f, 0xa0,
	0x32, 0x5e, 0xa4, 0x9e, 0xa3, 0xc6, 0x5b, 0x28, 0x2e, 0x2e, 0x0e, 0xce, 0xc1, 0xba, 0xdd, 0xdb,
	0x3b, 0xac, 0xac, 0xe1, 0x02, 0x64, 0xad, 0x0f, 0xfd, 0x7e, 0xaf, 0xff, 0xae, 0x82, 0x70, 0x09,
	0xf2, 0xdd, 0xa3, 0xa3, 0xa1, 0x3d, 0xb4, 0x3a, 0x83, 0x4a, 0x0a, 0x57, 0xa0, 0x38, 0xe8, 0x58,
	0xc3, 0x5e, 0xe7, 0xbd, 0x63, 0x0f, 0x8f, 0x06, 0x95, 0x74, 0xfb, 0x13, 0x94, 0xf5, 0x43, 0xd8,
	0x6a, 0x7d, 0xf1, 0x21, 0x14, 0xf7, 0x7c, 0x3a, 0x3e, 0xd6, 0x32, 0xae, 0xcf, 0x1f, 0xec, 0xae,
	0x1f, 0x69, 0x75, 0xeb, 0xce, 0x27, 0xed, 0xbe, 0xba, 0xb8, 0xac, 0xa1, 0x9f, 0x97, 0x35, 0xf4,
	0xe7, 0xb2, 0x86, 0xbe, 0x5f, 0xd5, 0xd0, 0x8f, 0xab, 0x1a, 0xba, 0xb8, 0xaa, 0x21, 0x28, 0x07,
	0x91, 0x39, 0x12, 0x13, 0xae, 0x63, 0xbb, 0x05, 0x5b, 0x7e, 0x07, 0xc9, 0x52, 0x0e, 0xd0, 0x47,
	0xfd, 0xb7, 0x37, 0xca, 0xc8, 0x2d, 0x7d, 0xf6, 0x37, 0x00, 0x00, 0xff, 0xff, 0xff, 0xcc, 0xca,
	0x04, 0x23, 0x05, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// RuntimeServiceClient is the client API for RuntimeService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type RuntimeServiceClient interface {
	CheckRuntime(ctx context.Context, in *SignedRuntimeInfoRequest, opts ...grpc.CallOption) (*RuntimeInfoReport, error)
}

type runtimeServiceClient struct {
	cc *grpc.ClientConn
}

func NewRuntimeServiceClient(cc *grpc.ClientConn) RuntimeServiceClient {
	return &runtimeServiceClient{cc}
}

func (c *runtimeServiceClient) CheckRuntime(ctx context.Context, in *SignedRuntimeInfoRequest, opts ...grpc.CallOption) (*RuntimeInfoReport, error) {
	out := new(RuntimeInfoReport)
	err := c.cc.Invoke(ctx, "/shared.RuntimeService/CheckRuntime", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RuntimeServiceServer is the server API for RuntimeService service.
type RuntimeServiceServer interface {
	CheckRuntime(context.Context, *SignedRuntimeInfoRequest) (*RuntimeInfoReport, error)
}

// UnimplementedRuntimeServiceServer can be embedded to have forward compatible implementations.
type UnimplementedRuntimeServiceServer struct {
}

func (*UnimplementedRuntimeServiceServer) CheckRuntime(ctx context.Context, req *SignedRuntimeInfoRequest) (*RuntimeInfoReport, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckRuntime not implemented")
}

func RegisterRuntimeServiceServer(s *grpc.Server, srv RuntimeServiceServer) {
	s.RegisterService(&_RuntimeService_serviceDesc, srv)
}

func _RuntimeService_CheckRuntime_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SignedRuntimeInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RuntimeServiceServer).CheckRuntime(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/shared.RuntimeService/CheckRuntime",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RuntimeServiceServer).CheckRuntime(ctx, req.(*SignedRuntimeInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _RuntimeService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "shared.RuntimeService",
	HandlerType: (*RuntimeServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CheckRuntime",
			Handler:    _RuntimeService_CheckRuntime_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "protos/shared/shared.proto",
}

func (m *RuntimeInfoRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RuntimeInfoRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RuntimeInfoRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	n1, err1 := github_com_bittorrent_protobuf_types.StdTimeMarshalTo(m.CurentTime, dAtA[i-github_com_bittorrent_protobuf_types.SizeOfStdTime(m.CurentTime):])
	if err1 != nil {
		return 0, err1
	}
	i -= n1
	i = encodeVarintShared(dAtA, i, uint64(n1))
	i--
	dAtA[i] = 0x12
	if len(m.RequestAddress) > 0 {
		i -= len(m.RequestAddress)
		copy(dAtA[i:], m.RequestAddress)
		i = encodeVarintShared(dAtA, i, uint64(len(m.RequestAddress)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *SignedRuntimeInfoRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SignedRuntimeInfoRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SignedRuntimeInfoRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Signature) > 0 {
		i -= len(m.Signature)
		copy(dAtA[i:], m.Signature)
		i = encodeVarintShared(dAtA, i, uint64(len(m.Signature)))
		i--
		dAtA[i] = 0x12
	}
	if m.Req != nil {
		{
			size, err := m.Req.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintShared(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *RuntimeInfoReport) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RuntimeInfoReport) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RuntimeInfoReport) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Extra) > 0 {
		i -= len(m.Extra)
		copy(dAtA[i:], m.Extra)
		i = encodeVarintShared(dAtA, i, uint64(len(m.Extra)))
		i--
		dAtA[i] = 0x72
	}
	if len(m.CacheStatusExtra) > 0 {
		i -= len(m.CacheStatusExtra)
		copy(dAtA[i:], m.CacheStatusExtra)
		i = encodeVarintShared(dAtA, i, uint64(len(m.CacheStatusExtra)))
		i--
		dAtA[i] = 0x6a
	}
	if len(m.ChainStatusExtra) > 0 {
		i -= len(m.ChainStatusExtra)
		copy(dAtA[i:], m.ChainStatusExtra)
		i = encodeVarintShared(dAtA, i, uint64(len(m.ChainStatusExtra)))
		i--
		dAtA[i] = 0x62
	}
	if len(m.QueueStatusExtra) > 0 {
		i -= len(m.QueueStatusExtra)
		copy(dAtA[i:], m.QueueStatusExtra)
		i = encodeVarintShared(dAtA, i, uint64(len(m.QueueStatusExtra)))
		i--
		dAtA[i] = 0x5a
	}
	if len(m.RdStatusExtra) > 0 {
		i -= len(m.RdStatusExtra)
		copy(dAtA[i:], m.RdStatusExtra)
		i = encodeVarintShared(dAtA, i, uint64(len(m.RdStatusExtra)))
		i--
		dAtA[i] = 0x52
	}
	if len(m.DbStatusExtra) > 0 {
		for k := range m.DbStatusExtra {
			v := m.DbStatusExtra[k]
			baseI := i
			i -= len(v)
			copy(dAtA[i:], v)
			i = encodeVarintShared(dAtA, i, uint64(len(v)))
			i--
			dAtA[i] = 0x12
			i -= len(k)
			copy(dAtA[i:], k)
			i = encodeVarintShared(dAtA, i, uint64(len(k)))
			i--
			dAtA[i] = 0xa
			i = encodeVarintShared(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x4a
		}
	}
	if len(m.Version) > 0 {
		i -= len(m.Version)
		copy(dAtA[i:], m.Version)
		i = encodeVarintShared(dAtA, i, uint64(len(m.Version)))
		i--
		dAtA[i] = 0x42
	}
	if len(m.GitHash) > 0 {
		i -= len(m.GitHash)
		copy(dAtA[i:], m.GitHash)
		i = encodeVarintShared(dAtA, i, uint64(len(m.GitHash)))
		i--
		dAtA[i] = 0x3a
	}
	n3, err3 := github_com_bittorrent_protobuf_types.StdTimeMarshalTo(m.StartTime, dAtA[i-github_com_bittorrent_protobuf_types.SizeOfStdTime(m.StartTime):])
	if err3 != nil {
		return 0, err3
	}
	i -= n3
	i = encodeVarintShared(dAtA, i, uint64(n3))
	i--
	dAtA[i] = 0x32
	n4, err4 := github_com_bittorrent_protobuf_types.StdTimeMarshalTo(m.CurentTime, dAtA[i-github_com_bittorrent_protobuf_types.SizeOfStdTime(m.CurentTime):])
	if err4 != nil {
		return 0, err4
	}
	i -= n4
	i = encodeVarintShared(dAtA, i, uint64(n4))
	i--
	dAtA[i] = 0x2a
	if m.Status != 0 {
		i = encodeVarintShared(dAtA, i, uint64(m.Status))
		i--
		dAtA[i] = 0x20
	}
	if len(m.ServiceName) > 0 {
		i -= len(m.ServiceName)
		copy(dAtA[i:], m.ServiceName)
		i = encodeVarintShared(dAtA, i, uint64(len(m.ServiceName)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintShared(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.PeerId) > 0 {
		i -= len(m.PeerId)
		copy(dAtA[i:], m.PeerId)
		i = encodeVarintShared(dAtA, i, uint64(len(m.PeerId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintShared(dAtA []byte, offset int, v uint64) int {
	offset -= sovShared(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *RuntimeInfoRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.RequestAddress)
	if l > 0 {
		n += 1 + l + sovShared(uint64(l))
	}
	l = github_com_bittorrent_protobuf_types.SizeOfStdTime(m.CurentTime)
	n += 1 + l + sovShared(uint64(l))
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *SignedRuntimeInfoRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Req != nil {
		l = m.Req.Size()
		n += 1 + l + sovShared(uint64(l))
	}
	l = len(m.Signature)
	if l > 0 {
		n += 1 + l + sovShared(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *RuntimeInfoReport) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.PeerId)
	if l > 0 {
		n += 1 + l + sovShared(uint64(l))
	}
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovShared(uint64(l))
	}
	l = len(m.ServiceName)
	if l > 0 {
		n += 1 + l + sovShared(uint64(l))
	}
	if m.Status != 0 {
		n += 1 + sovShared(uint64(m.Status))
	}
	l = github_com_bittorrent_protobuf_types.SizeOfStdTime(m.CurentTime)
	n += 1 + l + sovShared(uint64(l))
	l = github_com_bittorrent_protobuf_types.SizeOfStdTime(m.StartTime)
	n += 1 + l + sovShared(uint64(l))
	l = len(m.GitHash)
	if l > 0 {
		n += 1 + l + sovShared(uint64(l))
	}
	l = len(m.Version)
	if l > 0 {
		n += 1 + l + sovShared(uint64(l))
	}
	if len(m.DbStatusExtra) > 0 {
		for k, v := range m.DbStatusExtra {
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovShared(uint64(len(k))) + 1 + len(v) + sovShared(uint64(len(v)))
			n += mapEntrySize + 1 + sovShared(uint64(mapEntrySize))
		}
	}
	l = len(m.RdStatusExtra)
	if l > 0 {
		n += 1 + l + sovShared(uint64(l))
	}
	l = len(m.QueueStatusExtra)
	if l > 0 {
		n += 1 + l + sovShared(uint64(l))
	}
	l = len(m.ChainStatusExtra)
	if l > 0 {
		n += 1 + l + sovShared(uint64(l))
	}
	l = len(m.CacheStatusExtra)
	if l > 0 {
		n += 1 + l + sovShared(uint64(l))
	}
	l = len(m.Extra)
	if l > 0 {
		n += 1 + l + sovShared(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovShared(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozShared(x uint64) (n int) {
	return sovShared(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *RuntimeInfoRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowShared
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RuntimeInfoRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RuntimeInfoRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RequestAddress", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowShared
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthShared
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthShared
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RequestAddress = append(m.RequestAddress[:0], dAtA[iNdEx:postIndex]...)
			if m.RequestAddress == nil {
				m.RequestAddress = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CurentTime", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowShared
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthShared
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthShared
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_bittorrent_protobuf_types.StdTimeUnmarshal(&m.CurentTime, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipShared(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthShared
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthShared
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SignedRuntimeInfoRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowShared
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SignedRuntimeInfoRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SignedRuntimeInfoRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Req", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowShared
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthShared
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthShared
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Req == nil {
				m.Req = &RuntimeInfoRequest{}
			}
			if err := m.Req.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Signature", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowShared
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthShared
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthShared
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Signature = append(m.Signature[:0], dAtA[iNdEx:postIndex]...)
			if m.Signature == nil {
				m.Signature = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipShared(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthShared
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthShared
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RuntimeInfoReport) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowShared
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RuntimeInfoReport: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RuntimeInfoReport: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PeerId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowShared
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthShared
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthShared
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PeerId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowShared
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthShared
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthShared
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ServiceName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowShared
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthShared
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthShared
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ServiceName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowShared
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= RuntimeInfoReport_HealthStatus(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CurentTime", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowShared
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthShared
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthShared
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_bittorrent_protobuf_types.StdTimeUnmarshal(&m.CurentTime, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartTime", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowShared
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthShared
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthShared
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_bittorrent_protobuf_types.StdTimeUnmarshal(&m.StartTime, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GitHash", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowShared
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthShared
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthShared
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GitHash = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Version", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowShared
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthShared
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthShared
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Version = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DbStatusExtra", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowShared
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthShared
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthShared
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.DbStatusExtra == nil {
				m.DbStatusExtra = make(map[string]string)
			}
			var mapkey string
			var mapvalue string
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowShared
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowShared
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthShared
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthShared
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var stringLenmapvalue uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowShared
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapvalue |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapvalue := int(stringLenmapvalue)
					if intStringLenmapvalue < 0 {
						return ErrInvalidLengthShared
					}
					postStringIndexmapvalue := iNdEx + intStringLenmapvalue
					if postStringIndexmapvalue < 0 {
						return ErrInvalidLengthShared
					}
					if postStringIndexmapvalue > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = string(dAtA[iNdEx:postStringIndexmapvalue])
					iNdEx = postStringIndexmapvalue
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipShared(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthShared
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.DbStatusExtra[mapkey] = mapvalue
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RdStatusExtra", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowShared
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthShared
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthShared
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RdStatusExtra = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field QueueStatusExtra", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowShared
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthShared
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthShared
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.QueueStatusExtra = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChainStatusExtra", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowShared
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthShared
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthShared
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ChainStatusExtra = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CacheStatusExtra", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowShared
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthShared
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthShared
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CacheStatusExtra = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Extra", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowShared
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthShared
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthShared
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Extra = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipShared(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthShared
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthShared
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipShared(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowShared
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowShared
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowShared
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthShared
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupShared
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthShared
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthShared        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowShared          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupShared = fmt.Errorf("proto: unexpected end of group")
)
