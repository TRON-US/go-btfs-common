// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: protos/status/status.proto

package status

import (
	context "context"
	encoding_binary "encoding/binary"
	fmt "fmt"
	types "github.com/gogo/protobuf/types"
	golang_proto "github.com/golang/protobuf/proto"
	node "github.com/tron-us/go-btfs-common/protos/node"
	_ "github.com/tron-us/protobuf/gogoproto"
	proto "github.com/tron-us/protobuf/proto"
	github_com_tron_us_protobuf_types "github.com/tron-us/protobuf/types"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
	time "time"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = golang_proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf
var _ = time.Kitchen

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type RewardType int32

const (
	RewardType_FILESIZE RewardType = 0
	RewardType_REPAIR   RewardType = 1
)

var RewardType_name = map[int32]string{
	0: "FILESIZE",
	1: "REPAIR",
}

var RewardType_value = map[string]int32{
	"FILESIZE": 0,
	"REPAIR":   1,
}

func (x RewardType) String() string {
	return proto.EnumName(RewardType_name, int32(x))
}

func (RewardType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_e9255cc60c5ca429, []int{0}
}

type SignedMetrics struct {
	PublicKey            []byte   `protobuf:"bytes,1,opt,name=public_key,json=publicKey,proto3" json:"public_key,omitempty" pg:"public_key"`
	Signature            []byte   `protobuf:"bytes,2,opt,name=signature,proto3" json:"signature,omitempty" pg:"signature"`
	Payload              []byte   `protobuf:"bytes,3,opt,name=payload,proto3" json:"payload,omitempty" pg:"payload"`
	XXX_NoUnkeyedLiteral struct{} `json:"-" pg:"-"`
	XXX_unrecognized     []byte   `json:"-" pg:"-"`
	XXX_sizecache        int32    `json:"-" pg:"-"`
}

func (m *SignedMetrics) Reset()         { *m = SignedMetrics{} }
func (m *SignedMetrics) String() string { return proto.CompactTextString(m) }
func (*SignedMetrics) ProtoMessage()    {}
func (*SignedMetrics) Descriptor() ([]byte, []int) {
	return fileDescriptor_e9255cc60c5ca429, []int{0}
}
func (m *SignedMetrics) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SignedMetrics) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SignedMetrics.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SignedMetrics) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SignedMetrics.Merge(m, src)
}
func (m *SignedMetrics) XXX_Size() int {
	return m.Size()
}
func (m *SignedMetrics) XXX_DiscardUnknown() {
	xxx_messageInfo_SignedMetrics.DiscardUnknown(m)
}

var xxx_messageInfo_SignedMetrics proto.InternalMessageInfo

func (m *SignedMetrics) GetPublicKey() []byte {
	if m != nil {
		return m.PublicKey
	}
	return nil
}

func (m *SignedMetrics) GetSignature() []byte {
	if m != nil {
		return m.Signature
	}
	return nil
}

func (m *SignedMetrics) GetPayload() []byte {
	if m != nil {
		return m.Payload
	}
	return nil
}

func (*SignedMetrics) XXX_MessageName() string {
	return "status.SignedMetrics"
}

type NodeMetricsAggrReq struct {
	Source               string   `protobuf:"bytes,1,opt,name=source,proto3" json:"source,omitempty" pg:"source"`
	XXX_NoUnkeyedLiteral struct{} `json:"-" pg:"-"`
	XXX_unrecognized     []byte   `json:"-" pg:"-"`
	XXX_sizecache        int32    `json:"-" pg:"-"`
}

func (m *NodeMetricsAggrReq) Reset()         { *m = NodeMetricsAggrReq{} }
func (m *NodeMetricsAggrReq) String() string { return proto.CompactTextString(m) }
func (*NodeMetricsAggrReq) ProtoMessage()    {}
func (*NodeMetricsAggrReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_e9255cc60c5ca429, []int{1}
}
func (m *NodeMetricsAggrReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NodeMetricsAggrReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NodeMetricsAggrReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *NodeMetricsAggrReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NodeMetricsAggrReq.Merge(m, src)
}
func (m *NodeMetricsAggrReq) XXX_Size() int {
	return m.Size()
}
func (m *NodeMetricsAggrReq) XXX_DiscardUnknown() {
	xxx_messageInfo_NodeMetricsAggrReq.DiscardUnknown(m)
}

var xxx_messageInfo_NodeMetricsAggrReq proto.InternalMessageInfo

func (m *NodeMetricsAggrReq) GetSource() string {
	if m != nil {
		return m.Source
	}
	return ""
}

func (*NodeMetricsAggrReq) XXX_MessageName() string {
	return "status.NodeMetricsAggrReq"
}

type NodeDiscoveryAggrReq struct {
	Source               string   `protobuf:"bytes,1,opt,name=source,proto3" json:"source,omitempty" pg:"source"`
	XXX_NoUnkeyedLiteral struct{} `json:"-" pg:"-"`
	XXX_unrecognized     []byte   `json:"-" pg:"-"`
	XXX_sizecache        int32    `json:"-" pg:"-"`
}

func (m *NodeDiscoveryAggrReq) Reset()         { *m = NodeDiscoveryAggrReq{} }
func (m *NodeDiscoveryAggrReq) String() string { return proto.CompactTextString(m) }
func (*NodeDiscoveryAggrReq) ProtoMessage()    {}
func (*NodeDiscoveryAggrReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_e9255cc60c5ca429, []int{2}
}
func (m *NodeDiscoveryAggrReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NodeDiscoveryAggrReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NodeDiscoveryAggrReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *NodeDiscoveryAggrReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NodeDiscoveryAggrReq.Merge(m, src)
}
func (m *NodeDiscoveryAggrReq) XXX_Size() int {
	return m.Size()
}
func (m *NodeDiscoveryAggrReq) XXX_DiscardUnknown() {
	xxx_messageInfo_NodeDiscoveryAggrReq.DiscardUnknown(m)
}

var xxx_messageInfo_NodeDiscoveryAggrReq proto.InternalMessageInfo

func (m *NodeDiscoveryAggrReq) GetSource() string {
	if m != nil {
		return m.Source
	}
	return ""
}

func (*NodeDiscoveryAggrReq) XXX_MessageName() string {
	return "status.NodeDiscoveryAggrReq"
}

type BtfsScanAggrReq struct {
	tableName               string           `protobuf:"bytes,1,opt,name=table_name,json=tableName,proto3" json:"table_name,omitempty" pg:"table_name"`
	StorageVolumeLeft       float64          `protobuf:"fixed64,2,opt,name=storage_volume_left,json=storageVolumeLeft,proto3" json:"storage_volume_left,omitempty" pg:"storage_volume_left"`
	OnlineMinersNumber      uint32           `protobuf:"varint,3,opt,name=online_miners_number,json=onlineMinersNumber,proto3" json:"online_miners_number,omitempty" pg:"online_miners_number"`
	CountryDistribute       map[string]int32 `protobuf:"bytes,4,rep,name=country_distribute,json=countryDistribute,proto3" json:"country_distribute,omitempty" pg:"country_distribute" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	ScoreDistribute         map[string]int32 `protobuf:"bytes,5,rep,name=score_distribute,json=scoreDistribute,proto3" json:"score_distribute,omitempty" pg:"score_distribute" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	TimeCreated             time.Time        `protobuf:"bytes,6,opt,name=time_created,json=timeCreated,proto3,stdtime" json:"time_created" pg:"time_created"`
	StorageAlreadyUsed      float64          `protobuf:"fixed64,7,opt,name=storage_already_used,json=storageAlreadyUsed,proto3" json:"storage_already_used,omitempty" pg:"storage_already_used"`
	Price                   float64          `protobuf:"fixed64,8,opt,name=price,proto3" json:"price,omitempty" pg:"price"`
	DateCreated             time.Time        `protobuf:"bytes,9,opt,name=date_created,json=dateCreated,proto3,stdtime" json:"date_created" pg:"date_created"`
	NewRank                 string           `protobuf:"bytes,10,opt,name=new_rank,json=newRank,proto3" json:"new_rank,omitempty" pg:"new_rank"`
	TotalRank               string           `protobuf:"bytes,11,opt,name=total_rank,json=totalRank,proto3" json:"total_rank,omitempty" pg:"total_rank"`
	ContractAllCount        uint32           `protobuf:"varint,12,opt,name=contract_all_count,json=contractAllCount,proto3" json:"contract_all_count,omitempty" pg:"contract_all_count"`
	ContractFailCount       uint32           `protobuf:"varint,13,opt,name=contract_fail_count,json=contractFailCount,proto3" json:"contract_fail_count,omitempty" pg:"contract_fail_count"`
	ContractAllStorage      float64          `protobuf:"fixed64,14,opt,name=contract_all_storage,json=contractAllStorage,proto3" json:"contract_all_storage,omitempty" pg:"contract_all_storage"`
	ContractFailStorage     float64          `protobuf:"fixed64,15,opt,name=contract_fail_storage,json=contractFailStorage,proto3" json:"contract_fail_storage,omitempty" pg:"contract_fail_storage"`
	StorageLeftWhenContract float64          `protobuf:"fixed64,16,opt,name=storage_left_when_contract,json=storageLeftWhenContract,proto3" json:"storage_left_when_contract,omitempty" pg:"storage_left_when_contract"`
	SuperOnlineMinersCount  uint32           `protobuf:"varint,17,opt,name=super_online_miners_count,json=superOnlineMinersCount,proto3" json:"super_online_miners_count,omitempty" pg:"super_online_miners_count"`
	NewOnlineMinersCount    uint32           `protobuf:"varint,18,opt,name=new_online_miners_count,json=newOnlineMinersCount,proto3" json:"new_online_miners_count,omitempty" pg:"new_online_miners_count"`
	MinersAllAmount         int64            `protobuf:"varint,19,opt,name=miners_all_amount,json=minersAllAmount,proto3" json:"miners_all_amount,omitempty" pg:"miners_all_amount"`
	TotalMiners             int64            `protobuf:"varint,20,opt,name=total_miners,json=totalMiners,proto3" json:"total_miners,omitempty" pg:"total_miners"`
	BigMiners               int64            `protobuf:"varint,21,opt,name=big_miners,json=bigMiners,proto3" json:"big_miners,omitempty" pg:"big_miners"`
	XXX_NoUnkeyedLiteral    struct{}         `json:"-" pg:"-"`
	XXX_unrecognized        []byte           `json:"-" pg:"-"`
	XXX_sizecache           int32            `json:"-" pg:"-"`
}

func (m *BtfsScanAggrReq) Reset()         { *m = BtfsScanAggrReq{} }
func (m *BtfsScanAggrReq) String() string { return proto.CompactTextString(m) }
func (*BtfsScanAggrReq) ProtoMessage()    {}
func (*BtfsScanAggrReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_e9255cc60c5ca429, []int{3}
}
func (m *BtfsScanAggrReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BtfsScanAggrReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BtfsScanAggrReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BtfsScanAggrReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BtfsScanAggrReq.Merge(m, src)
}
func (m *BtfsScanAggrReq) XXX_Size() int {
	return m.Size()
}
func (m *BtfsScanAggrReq) XXX_DiscardUnknown() {
	xxx_messageInfo_BtfsScanAggrReq.DiscardUnknown(m)
}

var xxx_messageInfo_BtfsScanAggrReq proto.InternalMessageInfo

func (m *BtfsScanAggrReq) GettableName() string {
	if m != nil {
		return m.tableName
	}
	return ""
}

func (m *BtfsScanAggrReq) GetStorageVolumeLeft() float64 {
	if m != nil {
		return m.StorageVolumeLeft
	}
	return 0
}

func (m *BtfsScanAggrReq) GetOnlineMinersNumber() uint32 {
	if m != nil {
		return m.OnlineMinersNumber
	}
	return 0
}

func (m *BtfsScanAggrReq) GetCountryDistribute() map[string]int32 {
	if m != nil {
		return m.CountryDistribute
	}
	return nil
}

func (m *BtfsScanAggrReq) GetScoreDistribute() map[string]int32 {
	if m != nil {
		return m.ScoreDistribute
	}
	return nil
}

func (m *BtfsScanAggrReq) GetTimeCreated() time.Time {
	if m != nil {
		return m.TimeCreated
	}
	return time.Time{}
}

func (m *BtfsScanAggrReq) GetStorageAlreadyUsed() float64 {
	if m != nil {
		return m.StorageAlreadyUsed
	}
	return 0
}

func (m *BtfsScanAggrReq) GetPrice() float64 {
	if m != nil {
		return m.Price
	}
	return 0
}

func (m *BtfsScanAggrReq) GetDateCreated() time.Time {
	if m != nil {
		return m.DateCreated
	}
	return time.Time{}
}

func (m *BtfsScanAggrReq) GetNewRank() string {
	if m != nil {
		return m.NewRank
	}
	return ""
}

func (m *BtfsScanAggrReq) GetTotalRank() string {
	if m != nil {
		return m.TotalRank
	}
	return ""
}

func (m *BtfsScanAggrReq) GetContractAllCount() uint32 {
	if m != nil {
		return m.ContractAllCount
	}
	return 0
}

func (m *BtfsScanAggrReq) GetContractFailCount() uint32 {
	if m != nil {
		return m.ContractFailCount
	}
	return 0
}

func (m *BtfsScanAggrReq) GetContractAllStorage() float64 {
	if m != nil {
		return m.ContractAllStorage
	}
	return 0
}

func (m *BtfsScanAggrReq) GetContractFailStorage() float64 {
	if m != nil {
		return m.ContractFailStorage
	}
	return 0
}

func (m *BtfsScanAggrReq) GetStorageLeftWhenContract() float64 {
	if m != nil {
		return m.StorageLeftWhenContract
	}
	return 0
}

func (m *BtfsScanAggrReq) GetSuperOnlineMinersCount() uint32 {
	if m != nil {
		return m.SuperOnlineMinersCount
	}
	return 0
}

func (m *BtfsScanAggrReq) GetNewOnlineMinersCount() uint32 {
	if m != nil {
		return m.NewOnlineMinersCount
	}
	return 0
}

func (m *BtfsScanAggrReq) GetMinersAllAmount() int64 {
	if m != nil {
		return m.MinersAllAmount
	}
	return 0
}

func (m *BtfsScanAggrReq) GetTotalMiners() int64 {
	if m != nil {
		return m.TotalMiners
	}
	return 0
}

func (m *BtfsScanAggrReq) GetBigMiners() int64 {
	if m != nil {
		return m.BigMiners
	}
	return 0
}

func (*BtfsScanAggrReq) XXX_MessageName() string {
	return "status.BtfsScanAggrReq"
}

type ScoreHistoryReq struct {
	Scores               []*node.ScoreHistoryTab `protobuf:"bytes,1,rep,name=scores,proto3" json:"scores,omitempty" pg:"scores"`
	XXX_NoUnkeyedLiteral struct{}                `json:"-" pg:"-"`
	XXX_unrecognized     []byte                  `json:"-" pg:"-"`
	XXX_sizecache        int32                   `json:"-" pg:"-"`
}

func (m *ScoreHistoryReq) Reset()         { *m = ScoreHistoryReq{} }
func (m *ScoreHistoryReq) String() string { return proto.CompactTextString(m) }
func (*ScoreHistoryReq) ProtoMessage()    {}
func (*ScoreHistoryReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_e9255cc60c5ca429, []int{4}
}
func (m *ScoreHistoryReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ScoreHistoryReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ScoreHistoryReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ScoreHistoryReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ScoreHistoryReq.Merge(m, src)
}
func (m *ScoreHistoryReq) XXX_Size() int {
	return m.Size()
}
func (m *ScoreHistoryReq) XXX_DiscardUnknown() {
	xxx_messageInfo_ScoreHistoryReq.DiscardUnknown(m)
}

var xxx_messageInfo_ScoreHistoryReq proto.InternalMessageInfo

func (m *ScoreHistoryReq) GetScores() []*node.ScoreHistoryTab {
	if m != nil {
		return m.Scores
	}
	return nil
}

func (*ScoreHistoryReq) XXX_MessageName() string {
	return "status.ScoreHistoryReq"
}

type RewardInfo struct {
	Type                 RewardType `protobuf:"varint,1,opt,name=type,proto3,enum=status.RewardType" json:"type,omitempty" pg:"type"`
	NodeId               string     `protobuf:"bytes,2,opt,name=node_id,json=nodeId,proto3" json:"node_id,omitempty" pg:"node_id"`
	IsSuspect            bool       `protobuf:"varint,4,opt,name=is_suspect,json=isSuspect,proto3" json:"is_suspect,omitempty" pg:"is_suspect"`
	Weight               uint32     `protobuf:"varint,5,opt,name=weight,proto3" json:"weight,omitempty" pg:"weight"`
	Stake                uint32     `protobuf:"varint,6,opt,name=stake,proto3" json:"stake,omitempty" pg:"stake"`
	FileCount            uint32     `protobuf:"varint,7,opt,name=file_count,json=fileCount,proto3" json:"file_count,omitempty" pg:"file_count"`
	FileSize             uint64     `protobuf:"varint,8,opt,name=file_size,json=fileSize,proto3" json:"file_size,omitempty" pg:"file_size"`
	ShouldReward         uint64     `protobuf:"varint,9,opt,name=should_reward,json=shouldReward,proto3" json:"should_reward,omitempty" pg:"should_reward"`
	ActualReward         uint64     `protobuf:"varint,10,opt,name=actual_reward,json=actualReward,proto3" json:"actual_reward,omitempty" pg:"actual_reward"`
	XXX_NoUnkeyedLiteral struct{}   `json:"-" pg:"-"`
	XXX_unrecognized     []byte     `json:"-" pg:"-"`
	XXX_sizecache        int32      `json:"-" pg:"-"`
}

func (m *RewardInfo) Reset()         { *m = RewardInfo{} }
func (m *RewardInfo) String() string { return proto.CompactTextString(m) }
func (*RewardInfo) ProtoMessage()    {}
func (*RewardInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_e9255cc60c5ca429, []int{5}
}
func (m *RewardInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RewardInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RewardInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RewardInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RewardInfo.Merge(m, src)
}
func (m *RewardInfo) XXX_Size() int {
	return m.Size()
}
func (m *RewardInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_RewardInfo.DiscardUnknown(m)
}

var xxx_messageInfo_RewardInfo proto.InternalMessageInfo

func (m *RewardInfo) GetType() RewardType {
	if m != nil {
		return m.Type
	}
	return RewardType_FILESIZE
}

func (m *RewardInfo) GetNodeId() string {
	if m != nil {
		return m.NodeId
	}
	return ""
}

func (m *RewardInfo) GetIsSuspect() bool {
	if m != nil {
		return m.IsSuspect
	}
	return false
}

func (m *RewardInfo) GetWeight() uint32 {
	if m != nil {
		return m.Weight
	}
	return 0
}

func (m *RewardInfo) GetStake() uint32 {
	if m != nil {
		return m.Stake
	}
	return 0
}

func (m *RewardInfo) GetFileCount() uint32 {
	if m != nil {
		return m.FileCount
	}
	return 0
}

func (m *RewardInfo) GetFileSize() uint64 {
	if m != nil {
		return m.FileSize
	}
	return 0
}

func (m *RewardInfo) GetShouldReward() uint64 {
	if m != nil {
		return m.ShouldReward
	}
	return 0
}

func (m *RewardInfo) GetActualReward() uint64 {
	if m != nil {
		return m.ActualReward
	}
	return 0
}

func (*RewardInfo) XXX_MessageName() string {
	return "status.RewardInfo"
}

type AirdropRewardHistoryReq struct {
	RequesterPid         string        `protobuf:"bytes,1,opt,name=requester_pid,json=requesterPid,proto3" json:"requester_pid,omitempty" pg:"requester_pid"`
	Rewards              []*RewardInfo `protobuf:"bytes,2,rep,name=rewards,proto3" json:"rewards,omitempty" pg:"rewards"`
	PageIndex            uint32        `protobuf:"varint,3,opt,name=page_index,json=pageIndex,proto3" json:"page_index,omitempty" pg:"page_index"`
	PageTotal            uint32        `protobuf:"varint,4,opt,name=page_total,json=pageTotal,proto3" json:"page_total,omitempty" pg:"page_total"`
	DateAirdroped        time.Time     `protobuf:"bytes,5,opt,name=date_airdroped,json=dateAirdroped,proto3,stdtime" json:"date_airdroped" pg:"date_airdroped"`
	Signature            []byte        `protobuf:"bytes,6,opt,name=signature,proto3" json:"signature,omitempty" pg:"signature"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-" pg:"-"`
	XXX_unrecognized     []byte        `json:"-" pg:"-"`
	XXX_sizecache        int32         `json:"-" pg:"-"`
}

func (m *AirdropRewardHistoryReq) Reset()         { *m = AirdropRewardHistoryReq{} }
func (m *AirdropRewardHistoryReq) String() string { return proto.CompactTextString(m) }
func (*AirdropRewardHistoryReq) ProtoMessage()    {}
func (*AirdropRewardHistoryReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_e9255cc60c5ca429, []int{6}
}
func (m *AirdropRewardHistoryReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AirdropRewardHistoryReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AirdropRewardHistoryReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AirdropRewardHistoryReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AirdropRewardHistoryReq.Merge(m, src)
}
func (m *AirdropRewardHistoryReq) XXX_Size() int {
	return m.Size()
}
func (m *AirdropRewardHistoryReq) XXX_DiscardUnknown() {
	xxx_messageInfo_AirdropRewardHistoryReq.DiscardUnknown(m)
}

var xxx_messageInfo_AirdropRewardHistoryReq proto.InternalMessageInfo

func (m *AirdropRewardHistoryReq) GetRequesterPid() string {
	if m != nil {
		return m.RequesterPid
	}
	return ""
}

func (m *AirdropRewardHistoryReq) GetRewards() []*RewardInfo {
	if m != nil {
		return m.Rewards
	}
	return nil
}

func (m *AirdropRewardHistoryReq) GetPageIndex() uint32 {
	if m != nil {
		return m.PageIndex
	}
	return 0
}

func (m *AirdropRewardHistoryReq) GetPageTotal() uint32 {
	if m != nil {
		return m.PageTotal
	}
	return 0
}

func (m *AirdropRewardHistoryReq) GetDateAirdroped() time.Time {
	if m != nil {
		return m.DateAirdroped
	}
	return time.Time{}
}

func (m *AirdropRewardHistoryReq) GetSignature() []byte {
	if m != nil {
		return m.Signature
	}
	return nil
}

func (*AirdropRewardHistoryReq) XXX_MessageName() string {
	return "status.AirdropRewardHistoryReq"
}

type Candidate struct {
	NodeId               string    `protobuf:"bytes,1,opt,name=node_id,json=nodeId,proto3" json:"node_id,omitempty" pg:"node_id"`
	DateAirdroped        time.Time `protobuf:"bytes,2,opt,name=date_airdroped,json=dateAirdroped,proto3,stdtime" json:"date_airdroped" pg:"date_airdroped"`
	XXX_NoUnkeyedLiteral struct{}  `json:"-" pg:"-"`
	XXX_unrecognized     []byte    `json:"-" pg:"-"`
	XXX_sizecache        int32     `json:"-" pg:"-"`
}

func (m *Candidate) Reset()         { *m = Candidate{} }
func (m *Candidate) String() string { return proto.CompactTextString(m) }
func (*Candidate) ProtoMessage()    {}
func (*Candidate) Descriptor() ([]byte, []int) {
	return fileDescriptor_e9255cc60c5ca429, []int{7}
}
func (m *Candidate) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Candidate) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Candidate.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Candidate) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Candidate.Merge(m, src)
}
func (m *Candidate) XXX_Size() int {
	return m.Size()
}
func (m *Candidate) XXX_DiscardUnknown() {
	xxx_messageInfo_Candidate.DiscardUnknown(m)
}

var xxx_messageInfo_Candidate proto.InternalMessageInfo

func (m *Candidate) GetNodeId() string {
	if m != nil {
		return m.NodeId
	}
	return ""
}

func (m *Candidate) GetDateAirdroped() time.Time {
	if m != nil {
		return m.DateAirdroped
	}
	return time.Time{}
}

func (*Candidate) XXX_MessageName() string {
	return "status.Candidate"
}

type NodeContractStatReq struct {
	NodeContractStats    []*node.NodeContractStat `protobuf:"bytes,1,rep,name=node_contract_stats,json=nodeContractStats,proto3" json:"node_contract_stats,omitempty" pg:"node_contract_stats"`
	XXX_NoUnkeyedLiteral struct{}                 `json:"-" pg:"-"`
	XXX_unrecognized     []byte                   `json:"-" pg:"-"`
	XXX_sizecache        int32                    `json:"-" pg:"-"`
}

func (m *NodeContractStatReq) Reset()         { *m = NodeContractStatReq{} }
func (m *NodeContractStatReq) String() string { return proto.CompactTextString(m) }
func (*NodeContractStatReq) ProtoMessage()    {}
func (*NodeContractStatReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_e9255cc60c5ca429, []int{8}
}
func (m *NodeContractStatReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NodeContractStatReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NodeContractStatReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *NodeContractStatReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NodeContractStatReq.Merge(m, src)
}
func (m *NodeContractStatReq) XXX_Size() int {
	return m.Size()
}
func (m *NodeContractStatReq) XXX_DiscardUnknown() {
	xxx_messageInfo_NodeContractStatReq.DiscardUnknown(m)
}

var xxx_messageInfo_NodeContractStatReq proto.InternalMessageInfo

func (m *NodeContractStatReq) GetNodeContractStats() []*node.NodeContractStat {
	if m != nil {
		return m.NodeContractStats
	}
	return nil
}

func (*NodeContractStatReq) XXX_MessageName() string {
	return "status.NodeContractStatReq"
}
func init() {
	proto.RegisterEnum("status.RewardType", RewardType_name, RewardType_value)
	golang_proto.RegisterEnum("status.RewardType", RewardType_name, RewardType_value)
	proto.RegisterType((*SignedMetrics)(nil), "status.SignedMetrics")
	golang_proto.RegisterType((*SignedMetrics)(nil), "status.SignedMetrics")
	proto.RegisterType((*NodeMetricsAggrReq)(nil), "status.NodeMetricsAggrReq")
	golang_proto.RegisterType((*NodeMetricsAggrReq)(nil), "status.NodeMetricsAggrReq")
	proto.RegisterType((*NodeDiscoveryAggrReq)(nil), "status.NodeDiscoveryAggrReq")
	golang_proto.RegisterType((*NodeDiscoveryAggrReq)(nil), "status.NodeDiscoveryAggrReq")
	proto.RegisterType((*BtfsScanAggrReq)(nil), "status.BtfsScanAggrReq")
	golang_proto.RegisterType((*BtfsScanAggrReq)(nil), "status.BtfsScanAggrReq")
	proto.RegisterMapType((map[string]int32)(nil), "status.BtfsScanAggrReq.CountryDistributeEntry")
	golang_proto.RegisterMapType((map[string]int32)(nil), "status.BtfsScanAggrReq.CountryDistributeEntry")
	proto.RegisterMapType((map[string]int32)(nil), "status.BtfsScanAggrReq.ScoreDistributeEntry")
	golang_proto.RegisterMapType((map[string]int32)(nil), "status.BtfsScanAggrReq.ScoreDistributeEntry")
	proto.RegisterType((*ScoreHistoryReq)(nil), "status.ScoreHistoryReq")
	golang_proto.RegisterType((*ScoreHistoryReq)(nil), "status.ScoreHistoryReq")
	proto.RegisterType((*RewardInfo)(nil), "status.RewardInfo")
	golang_proto.RegisterType((*RewardInfo)(nil), "status.RewardInfo")
	proto.RegisterType((*AirdropRewardHistoryReq)(nil), "status.AirdropRewardHistoryReq")
	golang_proto.RegisterType((*AirdropRewardHistoryReq)(nil), "status.AirdropRewardHistoryReq")
	proto.RegisterType((*Candidate)(nil), "status.Candidate")
	golang_proto.RegisterType((*Candidate)(nil), "status.Candidate")
	proto.RegisterType((*NodeContractStatReq)(nil), "status.NodeContractStatReq")
	golang_proto.RegisterType((*NodeContractStatReq)(nil), "status.NodeContractStatReq")
}

func init() { proto.RegisterFile("protos/status/status.proto", fileDescriptor_e9255cc60c5ca429) }
func init() { golang_proto.RegisterFile("protos/status/status.proto", fileDescriptor_e9255cc60c5ca429) }

var fileDescriptor_e9255cc60c5ca429 = []byte{
	// 1355 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x57, 0xed, 0x4e, 0x1b, 0xc7,
	0x1a, 0xce, 0xf2, 0x61, 0xf0, 0x8b, 0xcd, 0xc7, 0x60, 0x60, 0xe3, 0x24, 0xc0, 0x71, 0xa4, 0x08,
	0x45, 0x60, 0x22, 0x8e, 0x8e, 0x94, 0x73, 0x8e, 0xd4, 0xd6, 0x10, 0xd2, 0xd2, 0x24, 0x14, 0xad,
	0x49, 0x23, 0x45, 0x8a, 0x56, 0xe3, 0xdd, 0xf1, 0x32, 0x62, 0xbd, 0xeb, 0xcc, 0xcc, 0x42, 0x9d,
	0xab, 0xe8, 0x9f, 0x4a, 0xfd, 0xd9, 0x4b, 0xe9, 0xcf, 0xf4, 0x5f, 0xaf, 0xa0, 0xad, 0x92, 0x4b,
	0xe8, 0x0d, 0x54, 0xf3, 0xce, 0x8e, 0x63, 0x1b, 0xac, 0x34, 0xfd, 0x93, 0x30, 0xef, 0xf3, 0xbc,
	0xcf, 0xce, 0xbc, 0x5f, 0x33, 0x86, 0x6a, 0x57, 0xa4, 0x2a, 0x95, 0xbb, 0x52, 0x51, 0x95, 0xd9,
	0xff, 0xea, 0x68, 0x24, 0x05, 0xb3, 0xaa, 0x3e, 0x8c, 0xb8, 0x3a, 0xcb, 0x5a, 0xf5, 0x20, 0xed,
	0xec, 0x2a, 0x91, 0x26, 0x3b, 0x99, 0xdc, 0x8d, 0xd2, 0x9d, 0x96, 0x6a, 0xcb, 0x9d, 0x20, 0xed,
	0x74, 0xd2, 0x64, 0x37, 0x57, 0x49, 0xd2, 0x90, 0xe1, 0x3f, 0x46, 0xa1, 0xfa, 0xe0, 0x1a, 0x4f,
	0x44, 0x5a, 0x59, 0x7b, 0x37, 0x4a, 0xa3, 0x14, 0x17, 0xf8, 0x57, 0xee, 0x71, 0x2b, 0x4a, 0xd3,
	0x28, 0x66, 0x1f, 0x58, 0xac, 0xd3, 0x55, 0xbd, 0x1c, 0xdc, 0x18, 0x05, 0x15, 0xef, 0x30, 0xa9,
	0x68, 0xa7, 0x6b, 0x08, 0xb5, 0x36, 0x94, 0x9b, 0x3c, 0x4a, 0x58, 0xf8, 0x8c, 0x29, 0xc1, 0x03,
	0x49, 0xee, 0x00, 0x74, 0xb3, 0x56, 0xcc, 0x03, 0xff, 0x9c, 0xf5, 0x5c, 0x67, 0xd3, 0xd9, 0x2a,
	0x79, 0x45, 0x63, 0x79, 0xc2, 0x7a, 0xe4, 0x36, 0x14, 0x25, 0x8f, 0x12, 0xaa, 0x32, 0xc1, 0xdc,
	0x09, 0x83, 0xf6, 0x0d, 0xc4, 0x85, 0x99, 0x2e, 0xed, 0xc5, 0x29, 0x0d, 0xdd, 0x49, 0xc4, 0xec,
	0xb2, 0xb6, 0x0d, 0xe4, 0x38, 0x0d, 0x59, 0xfe, 0x95, 0x46, 0x14, 0x09, 0x8f, 0xbd, 0x26, 0xab,
	0x50, 0x90, 0x69, 0x26, 0x02, 0x86, 0x1f, 0x2a, 0x7a, 0xf9, 0xaa, 0x56, 0x87, 0x8a, 0x66, 0x3f,
	0xe2, 0x32, 0x48, 0x2f, 0x98, 0xe8, 0x7d, 0x8c, 0xff, 0x4b, 0x11, 0x16, 0xf6, 0x55, 0x5b, 0x36,
	0x03, 0x9a, 0x58, 0xee, 0x1d, 0x00, 0x45, 0x5b, 0x31, 0xf3, 0x13, 0xda, 0xb1, 0xfc, 0x22, 0x5a,
	0x8e, 0x69, 0x87, 0x91, 0x3a, 0x2c, 0x4b, 0x95, 0x0a, 0x1a, 0x31, 0xff, 0x22, 0x8d, 0xb3, 0x0e,
	0xf3, 0x63, 0xd6, 0x56, 0x78, 0x24, 0xc7, 0x5b, 0xca, 0xa1, 0x6f, 0x11, 0x79, 0xca, 0xda, 0x8a,
	0x3c, 0x80, 0x4a, 0x9a, 0xc4, 0x3c, 0x61, 0x7e, 0x87, 0x27, 0x4c, 0x48, 0x3f, 0xc9, 0x3a, 0x2d,
	0x26, 0xf0, 0x9c, 0x65, 0x8f, 0x18, 0xec, 0x19, 0x42, 0xc7, 0x88, 0x90, 0x57, 0x40, 0x82, 0x34,
	0x4b, 0x94, 0xe8, 0xf9, 0x21, 0x97, 0x4a, 0xf0, 0x56, 0xa6, 0x98, 0x3b, 0xb5, 0x39, 0xb9, 0x35,
	0xb7, 0x57, 0xaf, 0xe7, 0x75, 0x33, 0xb2, 0xeb, 0xfa, 0x81, 0xf1, 0x78, 0xd4, 0x77, 0x38, 0xd4,
	0x4b, 0x6f, 0x29, 0x18, 0xb5, 0x93, 0x17, 0xb0, 0x28, 0x83, 0x54, 0xb0, 0x41, 0xf1, 0x69, 0x14,
	0xdf, 0x1e, 0x27, 0xde, 0xd4, 0xfc, 0x51, 0xe9, 0x05, 0x39, 0x6c, 0x25, 0x5f, 0x42, 0x49, 0x57,
	0x89, 0x1f, 0x08, 0x46, 0x15, 0x0b, 0xdd, 0xc2, 0xa6, 0xb3, 0x35, 0xb7, 0x57, 0xad, 0x9b, 0x52,
	0xaa, 0xdb, 0x52, 0xaa, 0x9f, 0xda, 0x52, 0xda, 0x9f, 0x7d, 0xfb, 0xdb, 0xc6, 0x8d, 0xef, 0x7f,
	0xdf, 0x70, 0xbc, 0x39, 0xed, 0x79, 0x60, 0x1c, 0x75, 0xc8, 0x6c, 0x88, 0x69, 0x2c, 0x18, 0x0d,
	0x7b, 0x7e, 0x26, 0x59, 0xe8, 0xce, 0x60, 0x8c, 0x49, 0x8e, 0x35, 0x0c, 0xf4, 0x5c, 0xb2, 0x90,
	0x54, 0x60, 0xba, 0x2b, 0x78, 0xc0, 0xdc, 0x59, 0xa4, 0x98, 0x85, 0xde, 0x50, 0x48, 0xd5, 0x87,
	0x0d, 0x15, 0x3f, 0x65, 0x43, 0xda, 0xd3, 0x6e, 0xe8, 0x26, 0xcc, 0x26, 0xec, 0xd2, 0x17, 0x34,
	0x39, 0x77, 0x01, 0x0b, 0x62, 0x26, 0x61, 0x97, 0x1e, 0x4d, 0xce, 0xb1, 0x5a, 0x52, 0x45, 0x63,
	0x03, 0xce, 0xe5, 0xd5, 0xa2, 0x2d, 0x08, 0x6f, 0xeb, 0x5c, 0x26, 0x4a, 0xd0, 0x40, 0xf9, 0x34,
	0x8e, 0x7d, 0x4c, 0x87, 0x5b, 0xc2, 0xdc, 0x2f, 0x5a, 0xa4, 0x11, 0xc7, 0x98, 0x3e, 0x5d, 0x5b,
	0x7d, 0x76, 0x9b, 0x72, 0x4b, 0x2f, 0x23, 0x7d, 0xc9, 0x42, 0x8f, 0x29, 0xcf, 0xf9, 0x0f, 0xa0,
	0x32, 0xa4, 0x9e, 0x47, 0xc6, 0x9d, 0x37, 0x81, 0x1a, 0xd0, 0x6f, 0x1a, 0x84, 0xec, 0xc1, 0xca,
	0xf0, 0x17, 0xac, 0xcb, 0x02, 0xba, 0x2c, 0x0f, 0x7e, 0xc3, 0xfa, 0xfc, 0x1f, 0xaa, 0x36, 0x1d,
	0xba, 0xd4, 0xfd, 0xcb, 0x33, 0x96, 0xf8, 0x96, 0xe8, 0x2e, 0xa2, 0xe3, 0x5a, 0xce, 0xd0, 0x25,
	0xff, 0xe2, 0x8c, 0x25, 0x07, 0x39, 0x4c, 0xfe, 0x0b, 0x37, 0x65, 0xd6, 0x65, 0xc2, 0x1f, 0x6e,
	0x02, 0x73, 0xb0, 0x25, 0x3c, 0xd8, 0x2a, 0x12, 0xbe, 0x19, 0x68, 0x04, 0x73, 0xba, 0xff, 0xc0,
	0x9a, 0x8e, 0xfa, 0x75, 0x8e, 0x04, 0x1d, 0x2b, 0x09, 0xbb, 0xbc, 0xea, 0x76, 0x1f, 0x96, 0x72,
	0xae, 0x0e, 0x09, 0xed, 0xa0, 0xc3, 0xf2, 0xa6, 0xb3, 0x35, 0xe9, 0x2d, 0x18, 0xa0, 0x11, 0xc7,
	0x0d, 0x34, 0x93, 0x7f, 0x41, 0xc9, 0x64, 0xcf, 0x00, 0x6e, 0x05, 0x69, 0x73, 0x68, 0x33, 0x9a,
	0x3a, 0xc1, 0x2d, 0x1e, 0x59, 0xc2, 0x0a, 0x12, 0x8a, 0x2d, 0x1e, 0x19, 0xb8, 0xfa, 0x08, 0x56,
	0xaf, 0x6f, 0x3d, 0xb2, 0x08, 0x93, 0x76, 0x12, 0x16, 0x3d, 0xfd, 0xa7, 0xae, 0xd2, 0x0b, 0x1a,
	0x67, 0x66, 0xfe, 0x4d, 0x7b, 0x66, 0xf1, 0xbf, 0x89, 0x87, 0x4e, 0x75, 0x1f, 0x2a, 0xd7, 0xf5,
	0xd8, 0xa7, 0x68, 0xd4, 0xbe, 0x80, 0x05, 0xd4, 0xf8, 0x8a, 0xeb, 0x5c, 0xf4, 0xf4, 0x28, 0xdb,
	0x81, 0x02, 0x36, 0xa9, 0x74, 0x1d, 0x6c, 0xf0, 0x95, 0x3a, 0xde, 0x18, 0x83, 0xb4, 0x53, 0xda,
	0xf2, 0x72, 0x52, 0xed, 0xa7, 0x09, 0x00, 0x8f, 0x5d, 0x52, 0x11, 0x1e, 0x25, 0xed, 0x94, 0xdc,
	0x83, 0x29, 0xd5, 0xeb, 0x9a, 0x11, 0x38, 0xbf, 0x47, 0xec, 0x70, 0x30, 0x8c, 0xd3, 0x5e, 0x97,
	0x79, 0x88, 0x93, 0x35, 0x98, 0xd1, 0xb2, 0x3e, 0x0f, 0x71, 0x53, 0x45, 0xaf, 0xa0, 0x97, 0x47,
	0xa1, 0x0e, 0x1d, 0x97, 0xbe, 0xcc, 0x64, 0x97, 0x05, 0xca, 0x9d, 0xda, 0x74, 0xb6, 0x66, 0xbd,
	0x22, 0x97, 0x4d, 0x63, 0xd0, 0x43, 0xf9, 0x92, 0xf1, 0xe8, 0x4c, 0xb9, 0xd3, 0x98, 0xce, 0x7c,
	0xa5, 0x8f, 0x28, 0x15, 0x3d, 0x67, 0x38, 0x40, 0xca, 0x9e, 0x59, 0x68, 0xb1, 0x36, 0x8f, 0x59,
	0x5e, 0x00, 0x33, 0x08, 0x15, 0xb5, 0xc5, 0x64, 0xfd, 0x16, 0xe0, 0xc2, 0x97, 0xfc, 0x8d, 0x99,
	0x02, 0x53, 0xde, 0xac, 0x36, 0x34, 0xf9, 0x1b, 0x46, 0xee, 0x42, 0x59, 0x9e, 0xa5, 0x59, 0x1c,
	0xfa, 0x02, 0x37, 0x8f, 0x93, 0x60, 0xca, 0x2b, 0x19, 0xa3, 0x39, 0x90, 0x26, 0xd1, 0x40, 0x65,
	0xba, 0x95, 0x0d, 0x09, 0x0c, 0xc9, 0x18, 0x0d, 0xa9, 0xf6, 0xc3, 0x04, 0xac, 0x35, 0xb8, 0x08,
	0x45, 0xda, 0x35, 0x96, 0x81, 0x68, 0xdf, 0x85, 0xb2, 0x60, 0xaf, 0x33, 0x26, 0x15, 0x13, 0x7e,
	0x97, 0x87, 0x79, 0xda, 0x4a, 0x7d, 0xe3, 0x09, 0x0f, 0xc9, 0x36, 0xcc, 0x18, 0x79, 0xe9, 0x4e,
	0x60, 0x4e, 0x46, 0xe2, 0xaa, 0x23, 0xef, 0x59, 0x0a, 0x5e, 0xaa, 0xba, 0xef, 0x78, 0x12, 0xb2,
	0xef, 0xf2, 0x2b, 0xa3, 0xa8, 0x2d, 0x47, 0xda, 0xd0, 0x87, 0xb1, 0x5e, 0x31, 0xc0, 0x39, 0x7c,
	0xaa, 0x0d, 0xe4, 0x09, 0xcc, 0xe3, 0xfc, 0xa3, 0x66, 0xc3, 0x2c, 0xc4, 0x40, 0xff, 0xdd, 0x09,
	0x58, 0xd6, 0xbe, 0x0d, 0xeb, 0x3a, 0x7c, 0x81, 0x17, 0x46, 0x2e, 0xf0, 0xda, 0x6b, 0x28, 0x1e,
	0xd0, 0x24, 0xe4, 0xda, 0x67, 0xb0, 0x20, 0x9c, 0xa1, 0x82, 0xb8, 0xba, 0xa1, 0x89, 0x7f, 0xbc,
	0xa1, 0xda, 0x2b, 0x58, 0xd6, 0x77, 0xbd, 0x9d, 0x34, 0x4d, 0x45, 0x95, 0xce, 0xc2, 0x63, 0x58,
	0xc6, 0x8f, 0xf7, 0xc7, 0x9c, 0x0e, 0xaf, 0x6d, 0x80, 0x55, 0xd3, 0x00, 0x57, 0xfc, 0x96, 0x92,
	0x11, 0x8b, 0xbc, 0x7f, 0xcf, 0xf6, 0x82, 0xae, 0x74, 0x52, 0x82, 0xd9, 0xc7, 0x47, 0x4f, 0x0f,
	0x9b, 0x47, 0x2f, 0x0f, 0x17, 0x6f, 0x10, 0x80, 0x82, 0x77, 0x78, 0xd2, 0x38, 0xf2, 0x16, 0x9d,
	0xbd, 0x3f, 0xa7, 0xa0, 0xdc, 0xc4, 0x0c, 0x36, 0x99, 0xb8, 0xd0, 0xd7, 0xce, 0x67, 0x50, 0x7e,
	0xde, 0xd5, 0x7b, 0xb5, 0x4f, 0xa3, 0x15, 0x9b, 0xe2, 0xa1, 0x17, 0x53, 0x75, 0xf5, 0xca, 0xa9,
	0x0f, 0xf5, 0x0b, 0x8c, 0x7c, 0x0d, 0x37, 0x87, 0xfc, 0x1b, 0x49, 0xd8, 0x7f, 0xd0, 0x7c, 0xaa,
	0xd6, 0x31, 0xb8, 0xc3, 0x5a, 0x51, 0x24, 0x58, 0x44, 0x15, 0x4f, 0x13, 0x52, 0xb5, 0x52, 0x57,
	0x1f, 0x58, 0x63, 0xf5, 0x3c, 0xa8, 0x1a, 0xbd, 0xa1, 0x27, 0x96, 0x55, 0xbc, 0x3d, 0xa8, 0x38,
	0xfa, 0x08, 0x1b, 0xab, 0x79, 0x08, 0xc4, 0x68, 0x0e, 0x3e, 0x3b, 0xc8, 0xda, 0x98, 0xc7, 0xc8,
	0xc7, 0x65, 0x06, 0xc7, 0xdb, 0x07, 0x99, 0x91, 0xd9, 0x38, 0x56, 0xe6, 0xb9, 0x3d, 0xe1, 0x75,
	0x6d, 0x4e, 0x36, 0xac, 0xdc, 0x98, 0x21, 0x30, 0x56, 0xf6, 0x19, 0xac, 0x1a, 0xd9, 0xd1, 0xda,
	0x23, 0xb7, 0x06, 0x83, 0x36, 0x52, 0xcd, 0xe3, 0xe4, 0xf6, 0x3f, 0x7f, 0xfb, 0x6e, 0xdd, 0xf9,
	0xf5, 0xdd, 0xba, 0xf3, 0xc7, 0xbb, 0x75, 0xe7, 0xc7, 0xf7, 0xeb, 0xce, 0xcf, 0xef, 0xd7, 0x9d,
	0xb7, 0xef, 0xd7, 0x1d, 0x98, 0xe7, 0x69, 0x5d, 0xff, 0x5e, 0xc8, 0x55, 0xf7, 0xe7, 0x4c, 0x71,
	0x9e, 0x68, 0xff, 0x13, 0xe7, 0x65, 0xfe, 0x4b, 0xa3, 0x55, 0x40, 0xc1, 0x7f, 0xff, 0x15, 0x00,
	0x00, 0xff, 0xff, 0x3e, 0xc8, 0x2b, 0x9f, 0x96, 0x0c, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// StatusServiceClient is the client API for StatusService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type StatusServiceClient interface {
	UpdateMetrics(ctx context.Context, in *SignedMetrics, opts ...grpc.CallOption) (*types.Empty, error)
	UpdateMetricsAndDiscovery(ctx context.Context, in *SignedMetrics, opts ...grpc.CallOption) (*types.Empty, error)
	UpdateMetricsAggregation(ctx context.Context, in *NodeMetricsAggrReq, opts ...grpc.CallOption) (*types.Empty, error)
	UpdateDiscoveryAggregation(ctx context.Context, in *NodeDiscoveryAggrReq, opts ...grpc.CallOption) (*types.Empty, error)
	UpdateBtfsScanAggr(ctx context.Context, in *BtfsScanAggrReq, opts ...grpc.CallOption) (*types.Empty, error)
	UpdateScoreHistory(ctx context.Context, in *ScoreHistoryReq, opts ...grpc.CallOption) (*types.Empty, error)
	UpdateAirdropRewardHistory(ctx context.Context, in *AirdropRewardHistoryReq, opts ...grpc.CallOption) (*types.Empty, error)
	UpdateNodeContractStat(ctx context.Context, in *NodeContractStatReq, opts ...grpc.CallOption) (*types.Empty, error)
}

type statusServiceClient struct {
	cc *grpc.ClientConn
}

func NewStatusServiceClient(cc *grpc.ClientConn) StatusServiceClient {
	return &statusServiceClient{cc}
}

func (c *statusServiceClient) UpdateMetrics(ctx context.Context, in *SignedMetrics, opts ...grpc.CallOption) (*types.Empty, error) {
	out := new(types.Empty)
	err := c.cc.Invoke(ctx, "/status.StatusService/UpdateMetrics", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *statusServiceClient) UpdateMetricsAndDiscovery(ctx context.Context, in *SignedMetrics, opts ...grpc.CallOption) (*types.Empty, error) {
	out := new(types.Empty)
	err := c.cc.Invoke(ctx, "/status.StatusService/UpdateMetricsAndDiscovery", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *statusServiceClient) UpdateMetricsAggregation(ctx context.Context, in *NodeMetricsAggrReq, opts ...grpc.CallOption) (*types.Empty, error) {
	out := new(types.Empty)
	err := c.cc.Invoke(ctx, "/status.StatusService/UpdateMetricsAggregation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *statusServiceClient) UpdateDiscoveryAggregation(ctx context.Context, in *NodeDiscoveryAggrReq, opts ...grpc.CallOption) (*types.Empty, error) {
	out := new(types.Empty)
	err := c.cc.Invoke(ctx, "/status.StatusService/UpdateDiscoveryAggregation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *statusServiceClient) UpdateBtfsScanAggr(ctx context.Context, in *BtfsScanAggrReq, opts ...grpc.CallOption) (*types.Empty, error) {
	out := new(types.Empty)
	err := c.cc.Invoke(ctx, "/status.StatusService/UpdateBtfsScanAggr", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *statusServiceClient) UpdateScoreHistory(ctx context.Context, in *ScoreHistoryReq, opts ...grpc.CallOption) (*types.Empty, error) {
	out := new(types.Empty)
	err := c.cc.Invoke(ctx, "/status.StatusService/UpdateScoreHistory", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *statusServiceClient) UpdateAirdropRewardHistory(ctx context.Context, in *AirdropRewardHistoryReq, opts ...grpc.CallOption) (*types.Empty, error) {
	out := new(types.Empty)
	err := c.cc.Invoke(ctx, "/status.StatusService/UpdateAirdropRewardHistory", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *statusServiceClient) UpdateNodeContractStat(ctx context.Context, in *NodeContractStatReq, opts ...grpc.CallOption) (*types.Empty, error) {
	out := new(types.Empty)
	err := c.cc.Invoke(ctx, "/status.StatusService/UpdateNodeContractStat", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// StatusServiceServer is the server API for StatusService service.
type StatusServiceServer interface {
	UpdateMetrics(context.Context, *SignedMetrics) (*types.Empty, error)
	UpdateMetricsAndDiscovery(context.Context, *SignedMetrics) (*types.Empty, error)
	UpdateMetricsAggregation(context.Context, *NodeMetricsAggrReq) (*types.Empty, error)
	UpdateDiscoveryAggregation(context.Context, *NodeDiscoveryAggrReq) (*types.Empty, error)
	UpdateBtfsScanAggr(context.Context, *BtfsScanAggrReq) (*types.Empty, error)
	UpdateScoreHistory(context.Context, *ScoreHistoryReq) (*types.Empty, error)
	UpdateAirdropRewardHistory(context.Context, *AirdropRewardHistoryReq) (*types.Empty, error)
	UpdateNodeContractStat(context.Context, *NodeContractStatReq) (*types.Empty, error)
}

// UnimplementedStatusServiceServer can be embedded to have forward compatible implementations.
type UnimplementedStatusServiceServer struct {
}

func (*UnimplementedStatusServiceServer) UpdateMetrics(ctx context.Context, req *SignedMetrics) (*types.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateMetrics not implemented")
}
func (*UnimplementedStatusServiceServer) UpdateMetricsAndDiscovery(ctx context.Context, req *SignedMetrics) (*types.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateMetricsAndDiscovery not implemented")
}
func (*UnimplementedStatusServiceServer) UpdateMetricsAggregation(ctx context.Context, req *NodeMetricsAggrReq) (*types.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateMetricsAggregation not implemented")
}
func (*UnimplementedStatusServiceServer) UpdateDiscoveryAggregation(ctx context.Context, req *NodeDiscoveryAggrReq) (*types.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateDiscoveryAggregation not implemented")
}
func (*UnimplementedStatusServiceServer) UpdateBtfsScanAggr(ctx context.Context, req *BtfsScanAggrReq) (*types.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateBtfsScanAggr not implemented")
}
func (*UnimplementedStatusServiceServer) UpdateScoreHistory(ctx context.Context, req *ScoreHistoryReq) (*types.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateScoreHistory not implemented")
}
func (*UnimplementedStatusServiceServer) UpdateAirdropRewardHistory(ctx context.Context, req *AirdropRewardHistoryReq) (*types.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateAirdropRewardHistory not implemented")
}
func (*UnimplementedStatusServiceServer) UpdateNodeContractStat(ctx context.Context, req *NodeContractStatReq) (*types.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateNodeContractStat not implemented")
}

func RegisterStatusServiceServer(s *grpc.Server, srv StatusServiceServer) {
	s.RegisterService(&_StatusService_serviceDesc, srv)
}

func _StatusService_UpdateMetrics_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SignedMetrics)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StatusServiceServer).UpdateMetrics(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/status.StatusService/UpdateMetrics",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StatusServiceServer).UpdateMetrics(ctx, req.(*SignedMetrics))
	}
	return interceptor(ctx, in, info, handler)
}

func _StatusService_UpdateMetricsAndDiscovery_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SignedMetrics)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StatusServiceServer).UpdateMetricsAndDiscovery(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/status.StatusService/UpdateMetricsAndDiscovery",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StatusServiceServer).UpdateMetricsAndDiscovery(ctx, req.(*SignedMetrics))
	}
	return interceptor(ctx, in, info, handler)
}

func _StatusService_UpdateMetricsAggregation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NodeMetricsAggrReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StatusServiceServer).UpdateMetricsAggregation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/status.StatusService/UpdateMetricsAggregation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StatusServiceServer).UpdateMetricsAggregation(ctx, req.(*NodeMetricsAggrReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _StatusService_UpdateDiscoveryAggregation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NodeDiscoveryAggrReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StatusServiceServer).UpdateDiscoveryAggregation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/status.StatusService/UpdateDiscoveryAggregation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StatusServiceServer).UpdateDiscoveryAggregation(ctx, req.(*NodeDiscoveryAggrReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _StatusService_UpdateBtfsScanAggr_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BtfsScanAggrReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StatusServiceServer).UpdateBtfsScanAggr(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/status.StatusService/UpdateBtfsScanAggr",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StatusServiceServer).UpdateBtfsScanAggr(ctx, req.(*BtfsScanAggrReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _StatusService_UpdateScoreHistory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ScoreHistoryReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StatusServiceServer).UpdateScoreHistory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/status.StatusService/UpdateScoreHistory",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StatusServiceServer).UpdateScoreHistory(ctx, req.(*ScoreHistoryReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _StatusService_UpdateAirdropRewardHistory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AirdropRewardHistoryReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StatusServiceServer).UpdateAirdropRewardHistory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/status.StatusService/UpdateAirdropRewardHistory",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StatusServiceServer).UpdateAirdropRewardHistory(ctx, req.(*AirdropRewardHistoryReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _StatusService_UpdateNodeContractStat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NodeContractStatReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StatusServiceServer).UpdateNodeContractStat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/status.StatusService/UpdateNodeContractStat",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StatusServiceServer).UpdateNodeContractStat(ctx, req.(*NodeContractStatReq))
	}
	return interceptor(ctx, in, info, handler)
}

var _StatusService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "status.StatusService",
	HandlerType: (*StatusServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "UpdateMetrics",
			Handler:    _StatusService_UpdateMetrics_Handler,
		},
		{
			MethodName: "UpdateMetricsAndDiscovery",
			Handler:    _StatusService_UpdateMetricsAndDiscovery_Handler,
		},
		{
			MethodName: "UpdateMetricsAggregation",
			Handler:    _StatusService_UpdateMetricsAggregation_Handler,
		},
		{
			MethodName: "UpdateDiscoveryAggregation",
			Handler:    _StatusService_UpdateDiscoveryAggregation_Handler,
		},
		{
			MethodName: "UpdateBtfsScanAggr",
			Handler:    _StatusService_UpdateBtfsScanAggr_Handler,
		},
		{
			MethodName: "UpdateScoreHistory",
			Handler:    _StatusService_UpdateScoreHistory_Handler,
		},
		{
			MethodName: "UpdateAirdropRewardHistory",
			Handler:    _StatusService_UpdateAirdropRewardHistory_Handler,
		},
		{
			MethodName: "UpdateNodeContractStat",
			Handler:    _StatusService_UpdateNodeContractStat_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "protos/status/status.proto",
}

func (m *SignedMetrics) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SignedMetrics) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SignedMetrics) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Payload) > 0 {
		i -= len(m.Payload)
		copy(dAtA[i:], m.Payload)
		i = encodeVarintStatus(dAtA, i, uint64(len(m.Payload)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Signature) > 0 {
		i -= len(m.Signature)
		copy(dAtA[i:], m.Signature)
		i = encodeVarintStatus(dAtA, i, uint64(len(m.Signature)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.PublicKey) > 0 {
		i -= len(m.PublicKey)
		copy(dAtA[i:], m.PublicKey)
		i = encodeVarintStatus(dAtA, i, uint64(len(m.PublicKey)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *NodeMetricsAggrReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NodeMetricsAggrReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NodeMetricsAggrReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Source) > 0 {
		i -= len(m.Source)
		copy(dAtA[i:], m.Source)
		i = encodeVarintStatus(dAtA, i, uint64(len(m.Source)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *NodeDiscoveryAggrReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NodeDiscoveryAggrReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NodeDiscoveryAggrReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Source) > 0 {
		i -= len(m.Source)
		copy(dAtA[i:], m.Source)
		i = encodeVarintStatus(dAtA, i, uint64(len(m.Source)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *BtfsScanAggrReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BtfsScanAggrReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BtfsScanAggrReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.BigMiners != 0 {
		i = encodeVarintStatus(dAtA, i, uint64(m.BigMiners))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xa8
	}
	if m.TotalMiners != 0 {
		i = encodeVarintStatus(dAtA, i, uint64(m.TotalMiners))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xa0
	}
	if m.MinersAllAmount != 0 {
		i = encodeVarintStatus(dAtA, i, uint64(m.MinersAllAmount))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x98
	}
	if m.NewOnlineMinersCount != 0 {
		i = encodeVarintStatus(dAtA, i, uint64(m.NewOnlineMinersCount))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x90
	}
	if m.SuperOnlineMinersCount != 0 {
		i = encodeVarintStatus(dAtA, i, uint64(m.SuperOnlineMinersCount))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x88
	}
	if m.StorageLeftWhenContract != 0 {
		i -= 8
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.StorageLeftWhenContract))))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x81
	}
	if m.ContractFailStorage != 0 {
		i -= 8
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.ContractFailStorage))))
		i--
		dAtA[i] = 0x79
	}
	if m.ContractAllStorage != 0 {
		i -= 8
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.ContractAllStorage))))
		i--
		dAtA[i] = 0x71
	}
	if m.ContractFailCount != 0 {
		i = encodeVarintStatus(dAtA, i, uint64(m.ContractFailCount))
		i--
		dAtA[i] = 0x68
	}
	if m.ContractAllCount != 0 {
		i = encodeVarintStatus(dAtA, i, uint64(m.ContractAllCount))
		i--
		dAtA[i] = 0x60
	}
	if len(m.TotalRank) > 0 {
		i -= len(m.TotalRank)
		copy(dAtA[i:], m.TotalRank)
		i = encodeVarintStatus(dAtA, i, uint64(len(m.TotalRank)))
		i--
		dAtA[i] = 0x5a
	}
	if len(m.NewRank) > 0 {
		i -= len(m.NewRank)
		copy(dAtA[i:], m.NewRank)
		i = encodeVarintStatus(dAtA, i, uint64(len(m.NewRank)))
		i--
		dAtA[i] = 0x52
	}
	n1, err1 := github_com_tron_us_protobuf_types.StdTimeMarshalTo(m.DateCreated, dAtA[i-github_com_tron_us_protobuf_types.SizeOfStdTime(m.DateCreated):])
	if err1 != nil {
		return 0, err1
	}
	i -= n1
	i = encodeVarintStatus(dAtA, i, uint64(n1))
	i--
	dAtA[i] = 0x4a
	if m.Price != 0 {
		i -= 8
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.Price))))
		i--
		dAtA[i] = 0x41
	}
	if m.StorageAlreadyUsed != 0 {
		i -= 8
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.StorageAlreadyUsed))))
		i--
		dAtA[i] = 0x39
	}
	n2, err2 := github_com_tron_us_protobuf_types.StdTimeMarshalTo(m.TimeCreated, dAtA[i-github_com_tron_us_protobuf_types.SizeOfStdTime(m.TimeCreated):])
	if err2 != nil {
		return 0, err2
	}
	i -= n2
	i = encodeVarintStatus(dAtA, i, uint64(n2))
	i--
	dAtA[i] = 0x32
	if len(m.ScoreDistribute) > 0 {
		for k := range m.ScoreDistribute {
			v := m.ScoreDistribute[k]
			baseI := i
			i = encodeVarintStatus(dAtA, i, uint64(v))
			i--
			dAtA[i] = 0x10
			i -= len(k)
			copy(dAtA[i:], k)
			i = encodeVarintStatus(dAtA, i, uint64(len(k)))
			i--
			dAtA[i] = 0xa
			i = encodeVarintStatus(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x2a
		}
	}
	if len(m.CountryDistribute) > 0 {
		for k := range m.CountryDistribute {
			v := m.CountryDistribute[k]
			baseI := i
			i = encodeVarintStatus(dAtA, i, uint64(v))
			i--
			dAtA[i] = 0x10
			i -= len(k)
			copy(dAtA[i:], k)
			i = encodeVarintStatus(dAtA, i, uint64(len(k)))
			i--
			dAtA[i] = 0xa
			i = encodeVarintStatus(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x22
		}
	}
	if m.OnlineMinersNumber != 0 {
		i = encodeVarintStatus(dAtA, i, uint64(m.OnlineMinersNumber))
		i--
		dAtA[i] = 0x18
	}
	if m.StorageVolumeLeft != 0 {
		i -= 8
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.StorageVolumeLeft))))
		i--
		dAtA[i] = 0x11
	}
	if len(m.tableName) > 0 {
		i -= len(m.tableName)
		copy(dAtA[i:], m.tableName)
		i = encodeVarintStatus(dAtA, i, uint64(len(m.tableName)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ScoreHistoryReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ScoreHistoryReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ScoreHistoryReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Scores) > 0 {
		for iNdEx := len(m.Scores) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Scores[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintStatus(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *RewardInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RewardInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RewardInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.ActualReward != 0 {
		i = encodeVarintStatus(dAtA, i, uint64(m.ActualReward))
		i--
		dAtA[i] = 0x50
	}
	if m.ShouldReward != 0 {
		i = encodeVarintStatus(dAtA, i, uint64(m.ShouldReward))
		i--
		dAtA[i] = 0x48
	}
	if m.FileSize != 0 {
		i = encodeVarintStatus(dAtA, i, uint64(m.FileSize))
		i--
		dAtA[i] = 0x40
	}
	if m.FileCount != 0 {
		i = encodeVarintStatus(dAtA, i, uint64(m.FileCount))
		i--
		dAtA[i] = 0x38
	}
	if m.Stake != 0 {
		i = encodeVarintStatus(dAtA, i, uint64(m.Stake))
		i--
		dAtA[i] = 0x30
	}
	if m.Weight != 0 {
		i = encodeVarintStatus(dAtA, i, uint64(m.Weight))
		i--
		dAtA[i] = 0x28
	}
	if m.IsSuspect {
		i--
		if m.IsSuspect {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x20
	}
	if len(m.NodeId) > 0 {
		i -= len(m.NodeId)
		copy(dAtA[i:], m.NodeId)
		i = encodeVarintStatus(dAtA, i, uint64(len(m.NodeId)))
		i--
		dAtA[i] = 0x12
	}
	if m.Type != 0 {
		i = encodeVarintStatus(dAtA, i, uint64(m.Type))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *AirdropRewardHistoryReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AirdropRewardHistoryReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AirdropRewardHistoryReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Signature) > 0 {
		i -= len(m.Signature)
		copy(dAtA[i:], m.Signature)
		i = encodeVarintStatus(dAtA, i, uint64(len(m.Signature)))
		i--
		dAtA[i] = 0x32
	}
	n3, err3 := github_com_tron_us_protobuf_types.StdTimeMarshalTo(m.DateAirdroped, dAtA[i-github_com_tron_us_protobuf_types.SizeOfStdTime(m.DateAirdroped):])
	if err3 != nil {
		return 0, err3
	}
	i -= n3
	i = encodeVarintStatus(dAtA, i, uint64(n3))
	i--
	dAtA[i] = 0x2a
	if m.PageTotal != 0 {
		i = encodeVarintStatus(dAtA, i, uint64(m.PageTotal))
		i--
		dAtA[i] = 0x20
	}
	if m.PageIndex != 0 {
		i = encodeVarintStatus(dAtA, i, uint64(m.PageIndex))
		i--
		dAtA[i] = 0x18
	}
	if len(m.Rewards) > 0 {
		for iNdEx := len(m.Rewards) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Rewards[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintStatus(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.RequesterPid) > 0 {
		i -= len(m.RequesterPid)
		copy(dAtA[i:], m.RequesterPid)
		i = encodeVarintStatus(dAtA, i, uint64(len(m.RequesterPid)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Candidate) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Candidate) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Candidate) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	n4, err4 := github_com_tron_us_protobuf_types.StdTimeMarshalTo(m.DateAirdroped, dAtA[i-github_com_tron_us_protobuf_types.SizeOfStdTime(m.DateAirdroped):])
	if err4 != nil {
		return 0, err4
	}
	i -= n4
	i = encodeVarintStatus(dAtA, i, uint64(n4))
	i--
	dAtA[i] = 0x12
	if len(m.NodeId) > 0 {
		i -= len(m.NodeId)
		copy(dAtA[i:], m.NodeId)
		i = encodeVarintStatus(dAtA, i, uint64(len(m.NodeId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *NodeContractStatReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NodeContractStatReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NodeContractStatReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.NodeContractStats) > 0 {
		for iNdEx := len(m.NodeContractStats) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.NodeContractStats[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintStatus(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func encodeVarintStatus(dAtA []byte, offset int, v uint64) int {
	offset -= sovStatus(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *SignedMetrics) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.PublicKey)
	if l > 0 {
		n += 1 + l + sovStatus(uint64(l))
	}
	l = len(m.Signature)
	if l > 0 {
		n += 1 + l + sovStatus(uint64(l))
	}
	l = len(m.Payload)
	if l > 0 {
		n += 1 + l + sovStatus(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *NodeMetricsAggrReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Source)
	if l > 0 {
		n += 1 + l + sovStatus(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *NodeDiscoveryAggrReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Source)
	if l > 0 {
		n += 1 + l + sovStatus(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *BtfsScanAggrReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.tableName)
	if l > 0 {
		n += 1 + l + sovStatus(uint64(l))
	}
	if m.StorageVolumeLeft != 0 {
		n += 9
	}
	if m.OnlineMinersNumber != 0 {
		n += 1 + sovStatus(uint64(m.OnlineMinersNumber))
	}
	if len(m.CountryDistribute) > 0 {
		for k, v := range m.CountryDistribute {
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovStatus(uint64(len(k))) + 1 + sovStatus(uint64(v))
			n += mapEntrySize + 1 + sovStatus(uint64(mapEntrySize))
		}
	}
	if len(m.ScoreDistribute) > 0 {
		for k, v := range m.ScoreDistribute {
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovStatus(uint64(len(k))) + 1 + sovStatus(uint64(v))
			n += mapEntrySize + 1 + sovStatus(uint64(mapEntrySize))
		}
	}
	l = github_com_tron_us_protobuf_types.SizeOfStdTime(m.TimeCreated)
	n += 1 + l + sovStatus(uint64(l))
	if m.StorageAlreadyUsed != 0 {
		n += 9
	}
	if m.Price != 0 {
		n += 9
	}
	l = github_com_tron_us_protobuf_types.SizeOfStdTime(m.DateCreated)
	n += 1 + l + sovStatus(uint64(l))
	l = len(m.NewRank)
	if l > 0 {
		n += 1 + l + sovStatus(uint64(l))
	}
	l = len(m.TotalRank)
	if l > 0 {
		n += 1 + l + sovStatus(uint64(l))
	}
	if m.ContractAllCount != 0 {
		n += 1 + sovStatus(uint64(m.ContractAllCount))
	}
	if m.ContractFailCount != 0 {
		n += 1 + sovStatus(uint64(m.ContractFailCount))
	}
	if m.ContractAllStorage != 0 {
		n += 9
	}
	if m.ContractFailStorage != 0 {
		n += 9
	}
	if m.StorageLeftWhenContract != 0 {
		n += 10
	}
	if m.SuperOnlineMinersCount != 0 {
		n += 2 + sovStatus(uint64(m.SuperOnlineMinersCount))
	}
	if m.NewOnlineMinersCount != 0 {
		n += 2 + sovStatus(uint64(m.NewOnlineMinersCount))
	}
	if m.MinersAllAmount != 0 {
		n += 2 + sovStatus(uint64(m.MinersAllAmount))
	}
	if m.TotalMiners != 0 {
		n += 2 + sovStatus(uint64(m.TotalMiners))
	}
	if m.BigMiners != 0 {
		n += 2 + sovStatus(uint64(m.BigMiners))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ScoreHistoryReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Scores) > 0 {
		for _, e := range m.Scores {
			l = e.Size()
			n += 1 + l + sovStatus(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *RewardInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Type != 0 {
		n += 1 + sovStatus(uint64(m.Type))
	}
	l = len(m.NodeId)
	if l > 0 {
		n += 1 + l + sovStatus(uint64(l))
	}
	if m.IsSuspect {
		n += 2
	}
	if m.Weight != 0 {
		n += 1 + sovStatus(uint64(m.Weight))
	}
	if m.Stake != 0 {
		n += 1 + sovStatus(uint64(m.Stake))
	}
	if m.FileCount != 0 {
		n += 1 + sovStatus(uint64(m.FileCount))
	}
	if m.FileSize != 0 {
		n += 1 + sovStatus(uint64(m.FileSize))
	}
	if m.ShouldReward != 0 {
		n += 1 + sovStatus(uint64(m.ShouldReward))
	}
	if m.ActualReward != 0 {
		n += 1 + sovStatus(uint64(m.ActualReward))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *AirdropRewardHistoryReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.RequesterPid)
	if l > 0 {
		n += 1 + l + sovStatus(uint64(l))
	}
	if len(m.Rewards) > 0 {
		for _, e := range m.Rewards {
			l = e.Size()
			n += 1 + l + sovStatus(uint64(l))
		}
	}
	if m.PageIndex != 0 {
		n += 1 + sovStatus(uint64(m.PageIndex))
	}
	if m.PageTotal != 0 {
		n += 1 + sovStatus(uint64(m.PageTotal))
	}
	l = github_com_tron_us_protobuf_types.SizeOfStdTime(m.DateAirdroped)
	n += 1 + l + sovStatus(uint64(l))
	l = len(m.Signature)
	if l > 0 {
		n += 1 + l + sovStatus(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Candidate) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.NodeId)
	if l > 0 {
		n += 1 + l + sovStatus(uint64(l))
	}
	l = github_com_tron_us_protobuf_types.SizeOfStdTime(m.DateAirdroped)
	n += 1 + l + sovStatus(uint64(l))
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *NodeContractStatReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.NodeContractStats) > 0 {
		for _, e := range m.NodeContractStats {
			l = e.Size()
			n += 1 + l + sovStatus(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovStatus(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozStatus(x uint64) (n int) {
	return sovStatus(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *SignedMetrics) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStatus
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SignedMetrics: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SignedMetrics: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PublicKey", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStatus
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthStatus
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthStatus
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PublicKey = append(m.PublicKey[:0], dAtA[iNdEx:postIndex]...)
			if m.PublicKey == nil {
				m.PublicKey = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Signature", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStatus
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthStatus
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthStatus
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Signature = append(m.Signature[:0], dAtA[iNdEx:postIndex]...)
			if m.Signature == nil {
				m.Signature = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Payload", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStatus
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthStatus
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthStatus
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Payload = append(m.Payload[:0], dAtA[iNdEx:postIndex]...)
			if m.Payload == nil {
				m.Payload = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipStatus(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthStatus
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthStatus
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NodeMetricsAggrReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStatus
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NodeMetricsAggrReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NodeMetricsAggrReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Source", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStatus
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthStatus
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthStatus
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Source = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipStatus(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthStatus
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthStatus
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NodeDiscoveryAggrReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStatus
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NodeDiscoveryAggrReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NodeDiscoveryAggrReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Source", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStatus
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthStatus
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthStatus
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Source = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipStatus(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthStatus
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthStatus
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BtfsScanAggrReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStatus
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BtfsScanAggrReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BtfsScanAggrReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field tableName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStatus
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthStatus
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthStatus
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.tableName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field StorageVolumeLeft", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.StorageVolumeLeft = float64(math.Float64frombits(v))
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OnlineMinersNumber", wireType)
			}
			m.OnlineMinersNumber = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStatus
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.OnlineMinersNumber |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CountryDistribute", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStatus
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthStatus
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthStatus
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.CountryDistribute == nil {
				m.CountryDistribute = make(map[string]int32)
			}
			var mapkey string
			var mapvalue int32
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowStatus
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowStatus
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthStatus
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthStatus
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowStatus
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapvalue |= int32(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipStatus(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthStatus
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.CountryDistribute[mapkey] = mapvalue
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ScoreDistribute", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStatus
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthStatus
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthStatus
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ScoreDistribute == nil {
				m.ScoreDistribute = make(map[string]int32)
			}
			var mapkey string
			var mapvalue int32
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowStatus
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowStatus
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthStatus
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthStatus
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowStatus
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapvalue |= int32(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipStatus(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthStatus
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.ScoreDistribute[mapkey] = mapvalue
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TimeCreated", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStatus
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthStatus
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthStatus
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_tron_us_protobuf_types.StdTimeUnmarshal(&m.TimeCreated, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field StorageAlreadyUsed", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.StorageAlreadyUsed = float64(math.Float64frombits(v))
		case 8:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field Price", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.Price = float64(math.Float64frombits(v))
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DateCreated", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStatus
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthStatus
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthStatus
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_tron_us_protobuf_types.StdTimeUnmarshal(&m.DateCreated, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NewRank", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStatus
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthStatus
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthStatus
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NewRank = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalRank", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStatus
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthStatus
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthStatus
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TotalRank = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ContractAllCount", wireType)
			}
			m.ContractAllCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStatus
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ContractAllCount |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 13:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ContractFailCount", wireType)
			}
			m.ContractFailCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStatus
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ContractFailCount |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 14:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field ContractAllStorage", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.ContractAllStorage = float64(math.Float64frombits(v))
		case 15:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field ContractFailStorage", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.ContractFailStorage = float64(math.Float64frombits(v))
		case 16:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field StorageLeftWhenContract", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.StorageLeftWhenContract = float64(math.Float64frombits(v))
		case 17:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SuperOnlineMinersCount", wireType)
			}
			m.SuperOnlineMinersCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStatus
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SuperOnlineMinersCount |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 18:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NewOnlineMinersCount", wireType)
			}
			m.NewOnlineMinersCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStatus
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NewOnlineMinersCount |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 19:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MinersAllAmount", wireType)
			}
			m.MinersAllAmount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStatus
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MinersAllAmount |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 20:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalMiners", wireType)
			}
			m.TotalMiners = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStatus
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TotalMiners |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 21:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BigMiners", wireType)
			}
			m.BigMiners = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStatus
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BigMiners |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipStatus(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthStatus
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthStatus
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ScoreHistoryReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStatus
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ScoreHistoryReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ScoreHistoryReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Scores", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStatus
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthStatus
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthStatus
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Scores = append(m.Scores, &node.ScoreHistoryTab{})
			if err := m.Scores[len(m.Scores)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipStatus(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthStatus
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthStatus
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RewardInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStatus
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RewardInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RewardInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStatus
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= RewardType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NodeId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStatus
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthStatus
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthStatus
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NodeId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsSuspect", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStatus
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsSuspect = bool(v != 0)
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Weight", wireType)
			}
			m.Weight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStatus
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Weight |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Stake", wireType)
			}
			m.Stake = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStatus
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Stake |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FileCount", wireType)
			}
			m.FileCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStatus
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FileCount |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FileSize", wireType)
			}
			m.FileSize = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStatus
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FileSize |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ShouldReward", wireType)
			}
			m.ShouldReward = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStatus
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ShouldReward |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ActualReward", wireType)
			}
			m.ActualReward = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStatus
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ActualReward |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipStatus(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthStatus
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthStatus
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AirdropRewardHistoryReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStatus
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AirdropRewardHistoryReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AirdropRewardHistoryReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RequesterPid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStatus
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthStatus
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthStatus
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RequesterPid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rewards", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStatus
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthStatus
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthStatus
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Rewards = append(m.Rewards, &RewardInfo{})
			if err := m.Rewards[len(m.Rewards)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PageIndex", wireType)
			}
			m.PageIndex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStatus
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PageIndex |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PageTotal", wireType)
			}
			m.PageTotal = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStatus
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PageTotal |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DateAirdroped", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStatus
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthStatus
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthStatus
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_tron_us_protobuf_types.StdTimeUnmarshal(&m.DateAirdroped, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Signature", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStatus
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthStatus
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthStatus
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Signature = append(m.Signature[:0], dAtA[iNdEx:postIndex]...)
			if m.Signature == nil {
				m.Signature = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipStatus(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthStatus
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthStatus
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Candidate) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStatus
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Candidate: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Candidate: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NodeId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStatus
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthStatus
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthStatus
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NodeId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DateAirdroped", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStatus
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthStatus
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthStatus
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_tron_us_protobuf_types.StdTimeUnmarshal(&m.DateAirdroped, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipStatus(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthStatus
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthStatus
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NodeContractStatReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStatus
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NodeContractStatReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NodeContractStatReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NodeContractStats", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStatus
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthStatus
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthStatus
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NodeContractStats = append(m.NodeContractStats, &node.NodeContractStat{})
			if err := m.NodeContractStats[len(m.NodeContractStats)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipStatus(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthStatus
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthStatus
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipStatus(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowStatus
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowStatus
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowStatus
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthStatus
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupStatus
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthStatus
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthStatus        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowStatus          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupStatus = fmt.Errorf("proto: unexpected end of group")
)
