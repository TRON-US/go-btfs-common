syntax = "proto3";

package hub;

// gogo plugin toggles
option (gogoproto.gogoproto_import) = true;
option (gogoproto.goproto_registration) = true;
option (gogoproto.marshaler_all) = true;
option (gogoproto.messagename_all) = true;
option (gogoproto.sizer_all) = true;
option (gogoproto.unmarshaler_all) = true;
// golang option
option go_package = "hub";
// java options
option java_multiple_files = true;
option java_outer_classname = "HubProto";
option java_package = "io.btfs.hub";

import "github.com/gogo/protobuf/gogoproto/gogo.proto";
import "google/protobuf/timestamp.proto";

service HubQuery {
  rpc GetSettings(SettingsReq) returns (SettingsResp);
  rpc GetHosts(HostsReq) returns (HostsResp);
}

message SettingsReq {
  string id = 1;
  int32 resp_size = 2;
}

enum ResponseCode {
  SUCCESS = 0;
  SIGNATURE_FORMAT_ERROR = 1;
  COMPUTE_ADDRESS_ERROR = 2;
  OTHER_ERROR = 20;
}

message SettingsResp {
  ResponseCode code = 1;
  string message = 2;
  google.protobuf.Timestamp response_time = 3 [
    (gogoproto.nullable) = false,
    (gogoproto.stdtime) = true
  ];
  SettingsData settings_data = 4;
}

message SettingsData {
  double storage_price_ask = 1;
  double bandwidth_price_ask = 2;
  double storage_time_min = 3;
  double bandwidth_limit = 4;
  double collateral_stake = 5;
}

message HostsReq {
  string id = 1;
  int32 resp_size = 2;
}

message HostsResp {
  ResponseCode code = 1;
  string message = 2;
  HostsData hosts = 3;
  int32 resp_size = 4;
  string mode = 5;
  google.protobuf.Timestamp response_time = 6 [
    (gogoproto.nullable) = false,
    (gogoproto.stdtime) = true
  ];
}

message HostsData {
  repeated Host hosts = 1;
}

message Host {
  string node_id = 1;
  google.protobuf.Timestamp create_timestamp = 2 [
    (gogoproto.nullable) = false,
    (gogoproto.stdtime) = true
  ];
  google.protobuf.Timestamp update_timestamp = 3 [
    (gogoproto.nullable) = false,
    (gogoproto.stdtime) = true
  ];
  string node_ip = 4;
  string region = 5;
  string btfs_version = 6;
  float score = 7;
  int64 heart_beats = 8;
  float uptime = 9;
  int64 age = 10;
  float reputation = 11;
  float upload_average = 12;
  float upload_variance = 13;
  float download_average = 14;
  float download_variance = 15;
  Location location = 16 [(gogoproto.nullable) = false];
  float storage_volume_cap = 17;
  float storage_volume_left = 18;
  uint64 storage_time_min = 19;
  float storage_price_ask = 20;
  float storage_price_est = 21;
  double bandwidth_limit = 22;
  float bandwidth_price_ask = 23;
  float bandwidth_price_est = 24;
  uint64 collateral_stake = 25;
  uint64 collateral_lost = 26;
  uint64 collateral_burn = 27;
}

message Location {
  double lat = 1;
  double lon = 2;
}
