// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: protos/nft/nft.proto

package nft

import (
	fmt "fmt"
	_ "github.com/gogo/protobuf/types"
	golang_proto "github.com/golang/protobuf/proto"
	_ "github.com/tron-us/protobuf/gogoproto"
	proto "github.com/tron-us/protobuf/proto"
	github_com_tron_us_protobuf_types "github.com/tron-us/protobuf/types"
	io "io"
	math "math"
	math_bits "math/bits"
	time "time"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = golang_proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf
var _ = time.Kitchen

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type NftTab struct {
	TableName            string    `protobuf:"bytes,1,opt,name=table_name,json=tableName,proto3" json:"table_name,omitempty" pg:"table_name" pg:"nft,alias:t,discard_unknown_columns"`
	Address              string    `protobuf:"bytes,2,opt,name=address,proto3" json:"address,omitempty" pg:"address"`
	ChainId              string    `protobuf:"bytes,3,opt,name=chain_id,json=chainId,proto3" json:"chain_id,omitempty" pg:"chain_id"`
	FileHash             string    `protobuf:"bytes,4,opt,name=file_hash,json=fileHash,proto3" json:"file_hash,omitempty" pg:"file_hash"`
	FileName             string    `protobuf:"bytes,5,opt,name=file_name,json=fileName,proto3" json:"file_name,omitempty" pg:"file_name"`
	FileSize             int32     `protobuf:"varint,6,opt,name=file_size,json=fileSize,proto3" json:"file_size,omitempty" pg:"file_size"`
	Thumbnail            string    `protobuf:"bytes,7,opt,name=thumbnail,proto3" json:"thumbnail,omitempty" pg:"thumbnail"`
	TransactionId        string    `protobuf:"bytes,8,opt,name=transaction_id,json=transactionId,proto3" json:"transaction_id,omitempty" pg:"transaction_id"`
	Signature            string    `protobuf:"bytes,9,opt,name=signature,proto3" json:"signature,omitempty" pg:"signature"`
	Description          string    `protobuf:"bytes,10,opt,name=description,proto3" json:"description,omitempty" pg:"description"`
	TimeCreated          time.Time `protobuf:"bytes,11,opt,name=time_created,json=timeCreated,proto3,stdtime" json:"time_created" pg:"time_created"`
	XXX_NoUnkeyedLiteral struct{}  `json:"-" pg:"-"`
	XXX_unrecognized     []byte    `json:"-" pg:"-"`
	XXX_sizecache        int32     `json:"-" pg:"-"`
}

func (m *NftTab) Reset()         { *m = NftTab{} }
func (m *NftTab) String() string { return proto.CompactTextString(m) }
func (*NftTab) ProtoMessage()    {}
func (*NftTab) Descriptor() ([]byte, []int) {
	return fileDescriptor_bbb523e0dae4ed64, []int{0}
}
func (m *NftTab) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NftTab) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NftTab.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *NftTab) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NftTab.Merge(m, src)
}
func (m *NftTab) XXX_Size() int {
	return m.Size()
}
func (m *NftTab) XXX_DiscardUnknown() {
	xxx_messageInfo_NftTab.DiscardUnknown(m)
}

var xxx_messageInfo_NftTab proto.InternalMessageInfo

func (m *NftTab) GetTableName() string {
	if m != nil {
		return m.TableName
	}
	return ""
}

func (m *NftTab) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

func (m *NftTab) GetChainId() string {
	if m != nil {
		return m.ChainId
	}
	return ""
}

func (m *NftTab) GetFileHash() string {
	if m != nil {
		return m.FileHash
	}
	return ""
}

func (m *NftTab) GetFileName() string {
	if m != nil {
		return m.FileName
	}
	return ""
}

func (m *NftTab) GetFileSize() int32 {
	if m != nil {
		return m.FileSize
	}
	return 0
}

func (m *NftTab) GetThumbnail() string {
	if m != nil {
		return m.Thumbnail
	}
	return ""
}

func (m *NftTab) GetTransactionId() string {
	if m != nil {
		return m.TransactionId
	}
	return ""
}

func (m *NftTab) GetSignature() string {
	if m != nil {
		return m.Signature
	}
	return ""
}

func (m *NftTab) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *NftTab) GetTimeCreated() time.Time {
	if m != nil {
		return m.TimeCreated
	}
	return time.Time{}
}

func (*NftTab) XXX_MessageName() string {
	return "node.NftTab"
}

type UserTab struct {
	TableName            string    `protobuf:"bytes,1,opt,name=table_name,json=tableName,proto3" json:"table_name,omitempty" pg:"table_name" pg:"user,alias:t,discard_unknown_columns"`
	Address              string    `protobuf:"bytes,2,opt,name=address,proto3" json:"address,omitempty" pg:"address"`
	ChainId              string    `protobuf:"bytes,3,opt,name=chain_id,json=chainId,proto3" json:"chain_id,omitempty" pg:"chain_id"`
	Email                string    `protobuf:"bytes,4,opt,name=email,proto3" json:"email,omitempty" pg:"email"`
	TimeCreated          time.Time `protobuf:"bytes,5,opt,name=time_created,json=timeCreated,proto3,stdtime" json:"time_created" pg:"time_created"`
	XXX_NoUnkeyedLiteral struct{}  `json:"-" pg:"-"`
	XXX_unrecognized     []byte    `json:"-" pg:"-"`
	XXX_sizecache        int32     `json:"-" pg:"-"`
}

func (m *UserTab) Reset()         { *m = UserTab{} }
func (m *UserTab) String() string { return proto.CompactTextString(m) }
func (*UserTab) ProtoMessage()    {}
func (*UserTab) Descriptor() ([]byte, []int) {
	return fileDescriptor_bbb523e0dae4ed64, []int{1}
}
func (m *UserTab) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UserTab) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UserTab.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UserTab) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UserTab.Merge(m, src)
}
func (m *UserTab) XXX_Size() int {
	return m.Size()
}
func (m *UserTab) XXX_DiscardUnknown() {
	xxx_messageInfo_UserTab.DiscardUnknown(m)
}

var xxx_messageInfo_UserTab proto.InternalMessageInfo

func (m *UserTab) GetTableName() string {
	if m != nil {
		return m.TableName
	}
	return ""
}

func (m *UserTab) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

func (m *UserTab) GetChainId() string {
	if m != nil {
		return m.ChainId
	}
	return ""
}

func (m *UserTab) GetEmail() string {
	if m != nil {
		return m.Email
	}
	return ""
}

func (m *UserTab) GetTimeCreated() time.Time {
	if m != nil {
		return m.TimeCreated
	}
	return time.Time{}
}

func (*UserTab) XXX_MessageName() string {
	return "node.UserTab"
}
func init() {
	proto.RegisterType((*NftTab)(nil), "node.NftTab")
	golang_proto.RegisterType((*NftTab)(nil), "node.NftTab")
	proto.RegisterType((*UserTab)(nil), "node.UserTab")
	golang_proto.RegisterType((*UserTab)(nil), "node.UserTab")
}

func init() { proto.RegisterFile("protos/nft/nft.proto", fileDescriptor_bbb523e0dae4ed64) }
func init() { golang_proto.RegisterFile("protos/nft/nft.proto", fileDescriptor_bbb523e0dae4ed64) }

var fileDescriptor_bbb523e0dae4ed64 = []byte{
	// 483 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xb4, 0x51, 0x3f, 0x8f, 0xd3, 0x30,
	0x1c, 0xc5, 0xdc, 0xf5, 0x4f, 0x1c, 0x60, 0x88, 0x6e, 0x30, 0x05, 0x25, 0x55, 0x25, 0xa4, 0x22,
	0xf5, 0x52, 0x04, 0x5b, 0xc7, 0x32, 0xc0, 0x09, 0x54, 0x9d, 0xca, 0xb1, 0xb0, 0x44, 0x4e, 0xec,
	0x24, 0x16, 0x89, 0x5d, 0xd9, 0xbf, 0x08, 0xe9, 0x3e, 0x05, 0x23, 0xdf, 0x82, 0xaf, 0xc0, 0xd8,
	0x91, 0x4f, 0x50, 0xa0, 0x1d, 0xd9, 0x6e, 0x62, 0x44, 0x76, 0xd4, 0xeb, 0x49, 0x30, 0x21, 0x31,
	0x44, 0xca, 0x7b, 0xef, 0xf7, 0x9e, 0xed, 0xdf, 0xc3, 0x27, 0x2b, 0xad, 0x40, 0x99, 0xa9, 0xcc,
	0xc1, 0x7e, 0xb1, 0x83, 0xc1, 0xb1, 0x54, 0x8c, 0x0f, 0x9e, 0x14, 0x02, 0xca, 0x26, 0x8d, 0x33,
	0x55, 0x4f, 0x41, 0x2b, 0x79, 0xda, 0x98, 0xa9, 0xd3, 0xd3, 0x26, 0x9f, 0x16, 0xaa, 0x50, 0x0e,
	0xb8, 0xbf, 0xd6, 0x37, 0x88, 0x0a, 0xa5, 0x8a, 0x8a, 0x1f, 0xa6, 0x40, 0xd4, 0xdc, 0x00, 0xad,
	0x57, 0xed, 0xc0, 0xe8, 0xf3, 0x11, 0xee, 0x2e, 0x72, 0xb8, 0xa0, 0x69, 0xf0, 0x0a, 0x63, 0xa0,
	0x69, 0xc5, 0x13, 0x49, 0x6b, 0x4e, 0xd0, 0x10, 0x8d, 0xbd, 0xf9, 0xe4, 0x6a, 0x13, 0x8d, 0x57,
	0xc5, 0x6c, 0x24, 0x73, 0x98, 0xd0, 0x4a, 0x50, 0x33, 0x83, 0x09, 0x13, 0x26, 0xa3, 0x9a, 0x25,
	0x8d, 0x7c, 0x2f, 0xd5, 0x07, 0x99, 0x64, 0xaa, 0x6a, 0x6a, 0x69, 0x46, 0x4b, 0xcf, 0xf9, 0x17,
	0xb4, 0xe6, 0x01, 0xc1, 0x3d, 0xca, 0x98, 0xe6, 0xc6, 0x90, 0xdb, 0x36, 0x69, 0xb9, 0x87, 0xc1,
	0x7d, 0xdc, 0xcf, 0x4a, 0x2a, 0x64, 0x22, 0x18, 0x39, 0x6a, 0x25, 0x87, 0xcf, 0x58, 0xf0, 0x00,
	0x7b, 0xb9, 0xa8, 0x78, 0x52, 0x52, 0x53, 0x92, 0x63, 0xa7, 0xf5, 0x2d, 0xf1, 0x92, 0x9a, 0xf2,
	0x5a, 0x74, 0xb7, 0xeb, 0x1c, 0x44, 0x77, 0xdc, 0x5e, 0x34, 0xe2, 0x92, 0x93, 0xee, 0x10, 0x8d,
	0x3b, 0xad, 0xf8, 0x46, 0x5c, 0xf2, 0xe0, 0x21, 0xf6, 0xa0, 0x6c, 0xea, 0x54, 0x52, 0x51, 0x91,
	0x9e, 0x73, 0x1e, 0x88, 0xe0, 0x11, 0xbe, 0x07, 0x9a, 0x4a, 0x43, 0x33, 0x10, 0xca, 0xdd, 0xaa,
	0xef, 0x46, 0xee, 0xde, 0x60, 0xcf, 0x98, 0x0d, 0x31, 0xa2, 0x90, 0x14, 0x1a, 0xcd, 0x89, 0xd7,
	0x86, 0x5c, 0x13, 0xc1, 0x10, 0xfb, 0x8c, 0x9b, 0x4c, 0x8b, 0x95, 0x1d, 0x27, 0xd8, 0xe9, 0x37,
	0xa9, 0xe0, 0x05, 0xbe, 0x63, 0x77, 0x9f, 0x64, 0x9a, 0x53, 0xe0, 0x8c, 0xf8, 0x43, 0x34, 0xf6,
	0x9f, 0x0e, 0xe2, 0xb6, 0xa0, 0x78, 0x5f, 0x50, 0x7c, 0xb1, 0x2f, 0x68, 0xde, 0x5f, 0x6f, 0xa2,
	0x5b, 0x1f, 0xbf, 0x45, 0x68, 0xe9, 0x5b, 0xe7, 0xf3, 0xd6, 0x38, 0xfa, 0x89, 0x70, 0xef, 0xad,
	0xe1, 0xda, 0x56, 0xf6, 0xfa, 0x2f, 0x95, 0x9d, 0x5e, 0x6d, 0xa2, 0xc7, 0xb6, 0xb2, 0xc6, 0x70,
	0xfd, 0xff, 0x3b, 0x3b, 0xc1, 0x1d, 0x5e, 0xdb, 0xc5, 0xb6, 0x7d, 0xb5, 0xe0, 0x8f, 0xd7, 0x76,
	0xfe, 0xf1, 0xb5, 0xf3, 0xd9, 0xaf, 0x1f, 0x21, 0x5a, 0x6f, 0x43, 0xf4, 0x75, 0x1b, 0xa2, 0xef,
	0xdb, 0x10, 0x7d, 0xda, 0x85, 0xe8, 0xcb, 0x2e, 0x44, 0xeb, 0x5d, 0x88, 0xb0, 0x2f, 0x54, 0x9c,
	0x42, 0x6e, 0x62, 0x99, 0xc3, 0xbc, 0xbf, 0xc8, 0xe1, 0xdc, 0x06, 0x9f, 0xa3, 0x77, 0x47, 0x32,
	0x87, 0xb4, 0xeb, 0x8e, 0x79, 0xf6, 0x3b, 0x00, 0x00, 0xff, 0xff, 0xe3, 0x24, 0xfe, 0x3e, 0x53,
	0x03, 0x00, 0x00,
}

func (m *NftTab) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NftTab) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NftTab) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	n1, err1 := github_com_tron_us_protobuf_types.StdTimeMarshalTo(m.TimeCreated, dAtA[i-github_com_tron_us_protobuf_types.SizeOfStdTime(m.TimeCreated):])
	if err1 != nil {
		return 0, err1
	}
	i -= n1
	i = encodeVarintNft(dAtA, i, uint64(n1))
	i--
	dAtA[i] = 0x5a
	if len(m.Description) > 0 {
		i -= len(m.Description)
		copy(dAtA[i:], m.Description)
		i = encodeVarintNft(dAtA, i, uint64(len(m.Description)))
		i--
		dAtA[i] = 0x52
	}
	if len(m.Signature) > 0 {
		i -= len(m.Signature)
		copy(dAtA[i:], m.Signature)
		i = encodeVarintNft(dAtA, i, uint64(len(m.Signature)))
		i--
		dAtA[i] = 0x4a
	}
	if len(m.TransactionId) > 0 {
		i -= len(m.TransactionId)
		copy(dAtA[i:], m.TransactionId)
		i = encodeVarintNft(dAtA, i, uint64(len(m.TransactionId)))
		i--
		dAtA[i] = 0x42
	}
	if len(m.Thumbnail) > 0 {
		i -= len(m.Thumbnail)
		copy(dAtA[i:], m.Thumbnail)
		i = encodeVarintNft(dAtA, i, uint64(len(m.Thumbnail)))
		i--
		dAtA[i] = 0x3a
	}
	if m.FileSize != 0 {
		i = encodeVarintNft(dAtA, i, uint64(m.FileSize))
		i--
		dAtA[i] = 0x30
	}
	if len(m.FileName) > 0 {
		i -= len(m.FileName)
		copy(dAtA[i:], m.FileName)
		i = encodeVarintNft(dAtA, i, uint64(len(m.FileName)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.FileHash) > 0 {
		i -= len(m.FileHash)
		copy(dAtA[i:], m.FileHash)
		i = encodeVarintNft(dAtA, i, uint64(len(m.FileHash)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.ChainId) > 0 {
		i -= len(m.ChainId)
		copy(dAtA[i:], m.ChainId)
		i = encodeVarintNft(dAtA, i, uint64(len(m.ChainId)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintNft(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.TableName) > 0 {
		i -= len(m.TableName)
		copy(dAtA[i:], m.TableName)
		i = encodeVarintNft(dAtA, i, uint64(len(m.TableName)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *UserTab) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UserTab) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UserTab) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	n2, err2 := github_com_tron_us_protobuf_types.StdTimeMarshalTo(m.TimeCreated, dAtA[i-github_com_tron_us_protobuf_types.SizeOfStdTime(m.TimeCreated):])
	if err2 != nil {
		return 0, err2
	}
	i -= n2
	i = encodeVarintNft(dAtA, i, uint64(n2))
	i--
	dAtA[i] = 0x2a
	if len(m.Email) > 0 {
		i -= len(m.Email)
		copy(dAtA[i:], m.Email)
		i = encodeVarintNft(dAtA, i, uint64(len(m.Email)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.ChainId) > 0 {
		i -= len(m.ChainId)
		copy(dAtA[i:], m.ChainId)
		i = encodeVarintNft(dAtA, i, uint64(len(m.ChainId)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintNft(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.TableName) > 0 {
		i -= len(m.TableName)
		copy(dAtA[i:], m.TableName)
		i = encodeVarintNft(dAtA, i, uint64(len(m.TableName)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintNft(dAtA []byte, offset int, v uint64) int {
	offset -= sovNft(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func NewPopulatedNftTab(r randyNft, easy bool) *NftTab {
	this := &NftTab{}
	this.TableName = string(randStringNft(r))
	this.Address = string(randStringNft(r))
	this.ChainId = string(randStringNft(r))
	this.FileHash = string(randStringNft(r))
	this.FileName = string(randStringNft(r))
	this.FileSize = int32(r.Int31())
	if r.Intn(2) == 0 {
		this.FileSize *= -1
	}
	this.Thumbnail = string(randStringNft(r))
	this.TransactionId = string(randStringNft(r))
	this.Signature = string(randStringNft(r))
	this.Description = string(randStringNft(r))
	v1 := github_com_tron_us_protobuf_types.NewPopulatedStdTime(r, easy)
	this.TimeCreated = *v1
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedNft(r, 12)
	}
	return this
}

func NewPopulatedUserTab(r randyNft, easy bool) *UserTab {
	this := &UserTab{}
	this.TableName = string(randStringNft(r))
	this.Address = string(randStringNft(r))
	this.ChainId = string(randStringNft(r))
	this.Email = string(randStringNft(r))
	v2 := github_com_tron_us_protobuf_types.NewPopulatedStdTime(r, easy)
	this.TimeCreated = *v2
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedNft(r, 6)
	}
	return this
}

type randyNft interface {
	Float32() float32
	Float64() float64
	Int63() int64
	Int31() int32
	Uint32() uint32
	Intn(n int) int
}

func randUTF8RuneNft(r randyNft) rune {
	ru := r.Intn(62)
	if ru < 10 {
		return rune(ru + 48)
	} else if ru < 36 {
		return rune(ru + 55)
	}
	return rune(ru + 61)
}
func randStringNft(r randyNft) string {
	v3 := r.Intn(100)
	tmps := make([]rune, v3)
	for i := 0; i < v3; i++ {
		tmps[i] = randUTF8RuneNft(r)
	}
	return string(tmps)
}
func randUnrecognizedNft(r randyNft, maxFieldNumber int) (dAtA []byte) {
	l := r.Intn(5)
	for i := 0; i < l; i++ {
		wire := r.Intn(4)
		if wire == 3 {
			wire = 5
		}
		fieldNumber := maxFieldNumber + r.Intn(100)
		dAtA = randFieldNft(dAtA, r, fieldNumber, wire)
	}
	return dAtA
}
func randFieldNft(dAtA []byte, r randyNft, fieldNumber int, wire int) []byte {
	key := uint32(fieldNumber)<<3 | uint32(wire)
	switch wire {
	case 0:
		dAtA = encodeVarintPopulateNft(dAtA, uint64(key))
		v4 := r.Int63()
		if r.Intn(2) == 0 {
			v4 *= -1
		}
		dAtA = encodeVarintPopulateNft(dAtA, uint64(v4))
	case 1:
		dAtA = encodeVarintPopulateNft(dAtA, uint64(key))
		dAtA = append(dAtA, byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)))
	case 2:
		dAtA = encodeVarintPopulateNft(dAtA, uint64(key))
		ll := r.Intn(100)
		dAtA = encodeVarintPopulateNft(dAtA, uint64(ll))
		for j := 0; j < ll; j++ {
			dAtA = append(dAtA, byte(r.Intn(256)))
		}
	default:
		dAtA = encodeVarintPopulateNft(dAtA, uint64(key))
		dAtA = append(dAtA, byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)))
	}
	return dAtA
}
func encodeVarintPopulateNft(dAtA []byte, v uint64) []byte {
	for v >= 1<<7 {
		dAtA = append(dAtA, uint8(uint64(v)&0x7f|0x80))
		v >>= 7
	}
	dAtA = append(dAtA, uint8(v))
	return dAtA
}
func (m *NftTab) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.TableName)
	if l > 0 {
		n += 1 + l + sovNft(uint64(l))
	}
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovNft(uint64(l))
	}
	l = len(m.ChainId)
	if l > 0 {
		n += 1 + l + sovNft(uint64(l))
	}
	l = len(m.FileHash)
	if l > 0 {
		n += 1 + l + sovNft(uint64(l))
	}
	l = len(m.FileName)
	if l > 0 {
		n += 1 + l + sovNft(uint64(l))
	}
	if m.FileSize != 0 {
		n += 1 + sovNft(uint64(m.FileSize))
	}
	l = len(m.Thumbnail)
	if l > 0 {
		n += 1 + l + sovNft(uint64(l))
	}
	l = len(m.TransactionId)
	if l > 0 {
		n += 1 + l + sovNft(uint64(l))
	}
	l = len(m.Signature)
	if l > 0 {
		n += 1 + l + sovNft(uint64(l))
	}
	l = len(m.Description)
	if l > 0 {
		n += 1 + l + sovNft(uint64(l))
	}
	l = github_com_tron_us_protobuf_types.SizeOfStdTime(m.TimeCreated)
	n += 1 + l + sovNft(uint64(l))
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *UserTab) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.TableName)
	if l > 0 {
		n += 1 + l + sovNft(uint64(l))
	}
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovNft(uint64(l))
	}
	l = len(m.ChainId)
	if l > 0 {
		n += 1 + l + sovNft(uint64(l))
	}
	l = len(m.Email)
	if l > 0 {
		n += 1 + l + sovNft(uint64(l))
	}
	l = github_com_tron_us_protobuf_types.SizeOfStdTime(m.TimeCreated)
	n += 1 + l + sovNft(uint64(l))
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovNft(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozNft(x uint64) (n int) {
	return sovNft(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *NftTab) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNft
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NftTab: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NftTab: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TableName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNft
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNft
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthNft
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TableName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNft
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNft
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthNft
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChainId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNft
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNft
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthNft
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ChainId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FileHash", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNft
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNft
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthNft
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FileHash = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FileName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNft
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNft
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthNft
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FileName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FileSize", wireType)
			}
			m.FileSize = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNft
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FileSize |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Thumbnail", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNft
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNft
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthNft
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Thumbnail = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TransactionId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNft
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNft
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthNft
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TransactionId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Signature", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNft
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNft
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthNft
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Signature = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Description", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNft
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNft
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthNft
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Description = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TimeCreated", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNft
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNft
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthNft
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_tron_us_protobuf_types.StdTimeUnmarshal(&m.TimeCreated, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipNft(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthNft
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthNft
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UserTab) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNft
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UserTab: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UserTab: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TableName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNft
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNft
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthNft
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TableName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNft
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNft
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthNft
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChainId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNft
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNft
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthNft
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ChainId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Email", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNft
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNft
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthNft
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Email = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TimeCreated", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNft
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNft
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthNft
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_tron_us_protobuf_types.StdTimeUnmarshal(&m.TimeCreated, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipNft(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthNft
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthNft
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipNft(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowNft
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowNft
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowNft
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthNft
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupNft
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthNft
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthNft        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowNft          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupNft = fmt.Errorf("proto: unexpected end of group")
)
