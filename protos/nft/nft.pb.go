// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: protos/nft/nft.proto

package nft

import (
	context "context"
	fmt "fmt"
	_ "github.com/gogo/protobuf/types"
	golang_proto "github.com/golang/protobuf/proto"
	_ "github.com/tron-us/protobuf/gogoproto"
	proto "github.com/tron-us/protobuf/proto"
	github_com_tron_us_protobuf_types "github.com/tron-us/protobuf/types"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
	time "time"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = golang_proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf
var _ = time.Kitchen

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type NftTab struct {
	tableName            string    `pg:"nft,alias:t,discard_unknown_columns"`
	Address              string    `protobuf:"bytes,2,opt,name=address,proto3" json:"address,omitempty" pg:"address"`
	ChainId              string    `protobuf:"bytes,3,opt,name=chain_id,json=chainId,proto3" json:"chain_id,omitempty" pg:"chain_id"`
	FileHash             string    `protobuf:"bytes,4,opt,name=file_hash,json=fileHash,proto3" json:"file_hash,omitempty" pg:"file_hash"`
	Name                 string    `protobuf:"bytes,5,opt,name=name,proto3" json:"name,omitempty" pg:"name"`
	Type                 string    `protobuf:"bytes,6,opt,name=type,proto3" json:"type,omitempty" pg:"type"`
	Size_                int32     `protobuf:"varint,7,opt,name=size,proto3" json:"size,omitempty" pg:"size"`
	Thumbnail            string    `protobuf:"bytes,8,opt,name=thumbnail,proto3" json:"thumbnail,omitempty" pg:"thumbnail"`
	TransactionId        string    `protobuf:"bytes,9,opt,name=transaction_id,json=transactionId,proto3" json:"transaction_id,omitempty" pg:"transaction_id"`
	Signature            string    `protobuf:"bytes,10,opt,name=signature,proto3" json:"signature,omitempty" pg:"signature"`
	Description          string    `protobuf:"bytes,11,opt,name=description,proto3" json:"description,omitempty" pg:"description"`
	TimeCreated          time.Time `protobuf:"bytes,12,opt,name=time_created,json=timeCreated,proto3,stdtime" json:"time_created" pg:"time_created"`
	XXX_NoUnkeyedLiteral struct{}  `json:"-" pg:"-"`
	XXX_unrecognized     []byte    `json:"-" pg:"-"`
	XXX_sizecache        int32     `json:"-" pg:"-"`
}

func (m *NftTab) Reset()         { *m = NftTab{} }
func (m *NftTab) String() string { return proto.CompactTextString(m) }
func (*NftTab) ProtoMessage()    {}
func (*NftTab) Descriptor() ([]byte, []int) {
	return fileDescriptor_bbb523e0dae4ed64, []int{0}
}
func (m *NftTab) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NftTab) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NftTab.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *NftTab) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NftTab.Merge(m, src)
}
func (m *NftTab) XXX_Size() int {
	return m.Size()
}
func (m *NftTab) XXX_DiscardUnknown() {
	xxx_messageInfo_NftTab.DiscardUnknown(m)
}

var xxx_messageInfo_NftTab proto.InternalMessageInfo

func (m *NftTab) GettableName() string {
	if m != nil {
		return m.tableName
	}
	return ""
}

func (m *NftTab) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

func (m *NftTab) GetChainId() string {
	if m != nil {
		return m.ChainId
	}
	return ""
}

func (m *NftTab) GetFileHash() string {
	if m != nil {
		return m.FileHash
	}
	return ""
}

func (m *NftTab) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *NftTab) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func (m *NftTab) GetSize_() int32 {
	if m != nil {
		return m.Size_
	}
	return 0
}

func (m *NftTab) GetThumbnail() string {
	if m != nil {
		return m.Thumbnail
	}
	return ""
}

func (m *NftTab) GetTransactionId() string {
	if m != nil {
		return m.TransactionId
	}
	return ""
}

func (m *NftTab) GetSignature() string {
	if m != nil {
		return m.Signature
	}
	return ""
}

func (m *NftTab) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *NftTab) GetTimeCreated() time.Time {
	if m != nil {
		return m.TimeCreated
	}
	return time.Time{}
}

func (*NftTab) XXX_MessageName() string {
	return "nft.NftTab"
}

type UserTab struct {
	tableName            string    `pg:"nft_user,alias:t,discard_unknown_columns"`
	Address              string    `protobuf:"bytes,2,opt,name=address,proto3" json:"address,omitempty" pg:"address"`
	ChainId              string    `protobuf:"bytes,3,opt,name=chain_id,json=chainId,proto3" json:"chain_id,omitempty" pg:"chain_id"`
	Email                string    `protobuf:"bytes,4,opt,name=email,proto3" json:"email,omitempty" pg:"email"`
	IsSubscribed         int32     `protobuf:"varint,5,opt,name=is_subscribed,json=isSubscribed,proto3" json:"is_subscribed,omitempty" pg:"is_subscribed"`
	TimeCreated          time.Time `protobuf:"bytes,6,opt,name=time_created,json=timeCreated,proto3,stdtime" json:"time_created" pg:"time_created"`
	XXX_NoUnkeyedLiteral struct{}  `json:"-" pg:"-"`
	XXX_unrecognized     []byte    `json:"-" pg:"-"`
	XXX_sizecache        int32     `json:"-" pg:"-"`
}

func (m *UserTab) Reset()         { *m = UserTab{} }
func (m *UserTab) String() string { return proto.CompactTextString(m) }
func (*UserTab) ProtoMessage()    {}
func (*UserTab) Descriptor() ([]byte, []int) {
	return fileDescriptor_bbb523e0dae4ed64, []int{1}
}
func (m *UserTab) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UserTab) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UserTab.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UserTab) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UserTab.Merge(m, src)
}
func (m *UserTab) XXX_Size() int {
	return m.Size()
}
func (m *UserTab) XXX_DiscardUnknown() {
	xxx_messageInfo_UserTab.DiscardUnknown(m)
}

var xxx_messageInfo_UserTab proto.InternalMessageInfo

func (m *UserTab) GettableName() string {
	if m != nil {
		return m.tableName
	}
	return ""
}

func (m *UserTab) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

func (m *UserTab) GetChainId() string {
	if m != nil {
		return m.ChainId
	}
	return ""
}

func (m *UserTab) GetEmail() string {
	if m != nil {
		return m.Email
	}
	return ""
}

func (m *UserTab) GetIsSubscribed() int32 {
	if m != nil {
		return m.IsSubscribed
	}
	return 0
}

func (m *UserTab) GetTimeCreated() time.Time {
	if m != nil {
		return m.TimeCreated
	}
	return time.Time{}
}

func (*UserTab) XXX_MessageName() string {
	return "nft.UserTab"
}

// upload
type ReqUpLoad struct {
	Address              string   `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty" pg:"address"`
	ChainId              string   `protobuf:"bytes,2,opt,name=chain_id,json=chainId,proto3" json:"chain_id,omitempty" pg:"chain_id"`
	FileHash             string   `protobuf:"bytes,3,opt,name=file_hash,json=fileHash,proto3" json:"file_hash,omitempty" pg:"file_hash"`
	Name                 string   `protobuf:"bytes,4,opt,name=name,proto3" json:"name,omitempty" pg:"name"`
	Type                 string   `protobuf:"bytes,5,opt,name=type,proto3" json:"type,omitempty" pg:"type"`
	Size_                int32    `protobuf:"varint,6,opt,name=size,proto3" json:"size,omitempty" pg:"size"`
	Thumbnail            string   `protobuf:"bytes,7,opt,name=thumbnail,proto3" json:"thumbnail,omitempty" pg:"thumbnail"`
	TransactionId        string   `protobuf:"bytes,8,opt,name=transaction_id,json=transactionId,proto3" json:"transaction_id,omitempty" pg:"transaction_id"`
	Signature            string   `protobuf:"bytes,9,opt,name=signature,proto3" json:"signature,omitempty" pg:"signature"`
	Description          string   `protobuf:"bytes,10,opt,name=description,proto3" json:"description,omitempty" pg:"description"`
	XXX_NoUnkeyedLiteral struct{} `json:"-" pg:"-"`
	XXX_unrecognized     []byte   `json:"-" pg:"-"`
	XXX_sizecache        int32    `json:"-" pg:"-"`
}

func (m *ReqUpLoad) Reset()         { *m = ReqUpLoad{} }
func (m *ReqUpLoad) String() string { return proto.CompactTextString(m) }
func (*ReqUpLoad) ProtoMessage()    {}
func (*ReqUpLoad) Descriptor() ([]byte, []int) {
	return fileDescriptor_bbb523e0dae4ed64, []int{2}
}
func (m *ReqUpLoad) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ReqUpLoad) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ReqUpLoad.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ReqUpLoad) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReqUpLoad.Merge(m, src)
}
func (m *ReqUpLoad) XXX_Size() int {
	return m.Size()
}
func (m *ReqUpLoad) XXX_DiscardUnknown() {
	xxx_messageInfo_ReqUpLoad.DiscardUnknown(m)
}

var xxx_messageInfo_ReqUpLoad proto.InternalMessageInfo

func (m *ReqUpLoad) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

func (m *ReqUpLoad) GetChainId() string {
	if m != nil {
		return m.ChainId
	}
	return ""
}

func (m *ReqUpLoad) GetFileHash() string {
	if m != nil {
		return m.FileHash
	}
	return ""
}

func (m *ReqUpLoad) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *ReqUpLoad) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func (m *ReqUpLoad) GetSize_() int32 {
	if m != nil {
		return m.Size_
	}
	return 0
}

func (m *ReqUpLoad) GetThumbnail() string {
	if m != nil {
		return m.Thumbnail
	}
	return ""
}

func (m *ReqUpLoad) GetTransactionId() string {
	if m != nil {
		return m.TransactionId
	}
	return ""
}

func (m *ReqUpLoad) GetSignature() string {
	if m != nil {
		return m.Signature
	}
	return ""
}

func (m *ReqUpLoad) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (*ReqUpLoad) XXX_MessageName() string {
	return "nft.ReqUpLoad"
}

type RespUpLoad struct {
	Code                 int32    `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty" pg:"code"`
	Message              string   `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty" pg:"message"`
	Address              string   `protobuf:"bytes,3,opt,name=address,proto3" json:"address,omitempty" pg:"address"`
	XXX_NoUnkeyedLiteral struct{} `json:"-" pg:"-"`
	XXX_unrecognized     []byte   `json:"-" pg:"-"`
	XXX_sizecache        int32    `json:"-" pg:"-"`
}

func (m *RespUpLoad) Reset()         { *m = RespUpLoad{} }
func (m *RespUpLoad) String() string { return proto.CompactTextString(m) }
func (*RespUpLoad) ProtoMessage()    {}
func (*RespUpLoad) Descriptor() ([]byte, []int) {
	return fileDescriptor_bbb523e0dae4ed64, []int{3}
}
func (m *RespUpLoad) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RespUpLoad) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RespUpLoad.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RespUpLoad) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RespUpLoad.Merge(m, src)
}
func (m *RespUpLoad) XXX_Size() int {
	return m.Size()
}
func (m *RespUpLoad) XXX_DiscardUnknown() {
	xxx_messageInfo_RespUpLoad.DiscardUnknown(m)
}

var xxx_messageInfo_RespUpLoad proto.InternalMessageInfo

func (m *RespUpLoad) GetCode() int32 {
	if m != nil {
		return m.Code
	}
	return 0
}

func (m *RespUpLoad) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func (m *RespUpLoad) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

func (*RespUpLoad) XXX_MessageName() string {
	return "nft.RespUpLoad"
}

// check download
type ReqCheckDownload struct {
	Address              string   `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty" pg:"address"`
	ChainId              string   `protobuf:"bytes,2,opt,name=chain_id,json=chainId,proto3" json:"chain_id,omitempty" pg:"chain_id"`
	Signature            string   `protobuf:"bytes,3,opt,name=signature,proto3" json:"signature,omitempty" pg:"signature"`
	FileHash             string   `protobuf:"bytes,4,opt,name=file_hash,json=fileHash,proto3" json:"file_hash,omitempty" pg:"file_hash"`
	XXX_NoUnkeyedLiteral struct{} `json:"-" pg:"-"`
	XXX_unrecognized     []byte   `json:"-" pg:"-"`
	XXX_sizecache        int32    `json:"-" pg:"-"`
}

func (m *ReqCheckDownload) Reset()         { *m = ReqCheckDownload{} }
func (m *ReqCheckDownload) String() string { return proto.CompactTextString(m) }
func (*ReqCheckDownload) ProtoMessage()    {}
func (*ReqCheckDownload) Descriptor() ([]byte, []int) {
	return fileDescriptor_bbb523e0dae4ed64, []int{4}
}
func (m *ReqCheckDownload) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ReqCheckDownload) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ReqCheckDownload.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ReqCheckDownload) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReqCheckDownload.Merge(m, src)
}
func (m *ReqCheckDownload) XXX_Size() int {
	return m.Size()
}
func (m *ReqCheckDownload) XXX_DiscardUnknown() {
	xxx_messageInfo_ReqCheckDownload.DiscardUnknown(m)
}

var xxx_messageInfo_ReqCheckDownload proto.InternalMessageInfo

func (m *ReqCheckDownload) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

func (m *ReqCheckDownload) GetChainId() string {
	if m != nil {
		return m.ChainId
	}
	return ""
}

func (m *ReqCheckDownload) GetSignature() string {
	if m != nil {
		return m.Signature
	}
	return ""
}

func (m *ReqCheckDownload) GetFileHash() string {
	if m != nil {
		return m.FileHash
	}
	return ""
}

func (*ReqCheckDownload) XXX_MessageName() string {
	return "nft.ReqCheckDownload"
}

type RespCheckDownload struct {
	Code                 int32    `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty" pg:"code"`
	Message              string   `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty" pg:"message"`
	Address              string   `protobuf:"bytes,3,opt,name=address,proto3" json:"address,omitempty" pg:"address"`
	Exists               bool     `protobuf:"varint,4,opt,name=exists,proto3" json:"exists,omitempty" pg:"exists"`
	FileHash             string   `protobuf:"bytes,5,opt,name=file_hash,json=fileHash,proto3" json:"file_hash,omitempty" pg:"file_hash"`
	Name                 string   `protobuf:"bytes,6,opt,name=name,proto3" json:"name,omitempty" pg:"name"`
	Type                 string   `protobuf:"bytes,7,opt,name=type,proto3" json:"type,omitempty" pg:"type"`
	Size_                int32    `protobuf:"varint,8,opt,name=size,proto3" json:"size,omitempty" pg:"size"`
	XXX_NoUnkeyedLiteral struct{} `json:"-" pg:"-"`
	XXX_unrecognized     []byte   `json:"-" pg:"-"`
	XXX_sizecache        int32    `json:"-" pg:"-"`
}

func (m *RespCheckDownload) Reset()         { *m = RespCheckDownload{} }
func (m *RespCheckDownload) String() string { return proto.CompactTextString(m) }
func (*RespCheckDownload) ProtoMessage()    {}
func (*RespCheckDownload) Descriptor() ([]byte, []int) {
	return fileDescriptor_bbb523e0dae4ed64, []int{5}
}
func (m *RespCheckDownload) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RespCheckDownload) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RespCheckDownload.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RespCheckDownload) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RespCheckDownload.Merge(m, src)
}
func (m *RespCheckDownload) XXX_Size() int {
	return m.Size()
}
func (m *RespCheckDownload) XXX_DiscardUnknown() {
	xxx_messageInfo_RespCheckDownload.DiscardUnknown(m)
}

var xxx_messageInfo_RespCheckDownload proto.InternalMessageInfo

func (m *RespCheckDownload) GetCode() int32 {
	if m != nil {
		return m.Code
	}
	return 0
}

func (m *RespCheckDownload) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func (m *RespCheckDownload) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

func (m *RespCheckDownload) GetExists() bool {
	if m != nil {
		return m.Exists
	}
	return false
}

func (m *RespCheckDownload) GetFileHash() string {
	if m != nil {
		return m.FileHash
	}
	return ""
}

func (m *RespCheckDownload) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *RespCheckDownload) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func (m *RespCheckDownload) GetSize_() int32 {
	if m != nil {
		return m.Size_
	}
	return 0
}

func (*RespCheckDownload) XXX_MessageName() string {
	return "nft.RespCheckDownload"
}

// get files
type ReqGetFiles struct {
	Address              string   `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty" pg:"address"`
	ChainId              string   `protobuf:"bytes,2,opt,name=chain_id,json=chainId,proto3" json:"chain_id,omitempty" pg:"chain_id"`
	Signature            string   `protobuf:"bytes,3,opt,name=signature,proto3" json:"signature,omitempty" pg:"signature"`
	Start                int32    `protobuf:"varint,4,opt,name=start,proto3" json:"start,omitempty" pg:"start"`
	Limit                int32    `protobuf:"varint,5,opt,name=limit,proto3" json:"limit,omitempty" pg:"limit"`
	XXX_NoUnkeyedLiteral struct{} `json:"-" pg:"-"`
	XXX_unrecognized     []byte   `json:"-" pg:"-"`
	XXX_sizecache        int32    `json:"-" pg:"-"`
}

func (m *ReqGetFiles) Reset()         { *m = ReqGetFiles{} }
func (m *ReqGetFiles) String() string { return proto.CompactTextString(m) }
func (*ReqGetFiles) ProtoMessage()    {}
func (*ReqGetFiles) Descriptor() ([]byte, []int) {
	return fileDescriptor_bbb523e0dae4ed64, []int{6}
}
func (m *ReqGetFiles) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ReqGetFiles) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ReqGetFiles.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ReqGetFiles) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReqGetFiles.Merge(m, src)
}
func (m *ReqGetFiles) XXX_Size() int {
	return m.Size()
}
func (m *ReqGetFiles) XXX_DiscardUnknown() {
	xxx_messageInfo_ReqGetFiles.DiscardUnknown(m)
}

var xxx_messageInfo_ReqGetFiles proto.InternalMessageInfo

func (m *ReqGetFiles) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

func (m *ReqGetFiles) GetChainId() string {
	if m != nil {
		return m.ChainId
	}
	return ""
}

func (m *ReqGetFiles) GetSignature() string {
	if m != nil {
		return m.Signature
	}
	return ""
}

func (m *ReqGetFiles) GetStart() int32 {
	if m != nil {
		return m.Start
	}
	return 0
}

func (m *ReqGetFiles) GetLimit() int32 {
	if m != nil {
		return m.Limit
	}
	return 0
}

func (*ReqGetFiles) XXX_MessageName() string {
	return "nft.ReqGetFiles"
}

type RespGetFiles struct {
	Code                 int32     `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty" pg:"code"`
	Message              string    `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty" pg:"message"`
	Address              string    `protobuf:"bytes,3,opt,name=address,proto3" json:"address,omitempty" pg:"address"`
	Total                int32     `protobuf:"varint,4,opt,name=total,proto3" json:"total,omitempty" pg:"total"`
	Files                []*NftTab `protobuf:"bytes,5,rep,name=files,proto3" json:"files,omitempty" pg:"files"`
	XXX_NoUnkeyedLiteral struct{}  `json:"-" pg:"-"`
	XXX_unrecognized     []byte    `json:"-" pg:"-"`
	XXX_sizecache        int32     `json:"-" pg:"-"`
}

func (m *RespGetFiles) Reset()         { *m = RespGetFiles{} }
func (m *RespGetFiles) String() string { return proto.CompactTextString(m) }
func (*RespGetFiles) ProtoMessage()    {}
func (*RespGetFiles) Descriptor() ([]byte, []int) {
	return fileDescriptor_bbb523e0dae4ed64, []int{7}
}
func (m *RespGetFiles) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RespGetFiles) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RespGetFiles.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RespGetFiles) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RespGetFiles.Merge(m, src)
}
func (m *RespGetFiles) XXX_Size() int {
	return m.Size()
}
func (m *RespGetFiles) XXX_DiscardUnknown() {
	xxx_messageInfo_RespGetFiles.DiscardUnknown(m)
}

var xxx_messageInfo_RespGetFiles proto.InternalMessageInfo

func (m *RespGetFiles) GetCode() int32 {
	if m != nil {
		return m.Code
	}
	return 0
}

func (m *RespGetFiles) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func (m *RespGetFiles) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

func (m *RespGetFiles) GetTotal() int32 {
	if m != nil {
		return m.Total
	}
	return 0
}

func (m *RespGetFiles) GetFiles() []*NftTab {
	if m != nil {
		return m.Files
	}
	return nil
}

func (*RespGetFiles) XXX_MessageName() string {
	return "nft.RespGetFiles"
}

// subscribe
type ReqSubscribe struct {
	Address              string   `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty" pg:"address"`
	ChainId              string   `protobuf:"bytes,2,opt,name=chain_id,json=chainId,proto3" json:"chain_id,omitempty" pg:"chain_id"`
	Email                string   `protobuf:"bytes,3,opt,name=email,proto3" json:"email,omitempty" pg:"email"`
	XXX_NoUnkeyedLiteral struct{} `json:"-" pg:"-"`
	XXX_unrecognized     []byte   `json:"-" pg:"-"`
	XXX_sizecache        int32    `json:"-" pg:"-"`
}

func (m *ReqSubscribe) Reset()         { *m = ReqSubscribe{} }
func (m *ReqSubscribe) String() string { return proto.CompactTextString(m) }
func (*ReqSubscribe) ProtoMessage()    {}
func (*ReqSubscribe) Descriptor() ([]byte, []int) {
	return fileDescriptor_bbb523e0dae4ed64, []int{8}
}
func (m *ReqSubscribe) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ReqSubscribe) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ReqSubscribe.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ReqSubscribe) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReqSubscribe.Merge(m, src)
}
func (m *ReqSubscribe) XXX_Size() int {
	return m.Size()
}
func (m *ReqSubscribe) XXX_DiscardUnknown() {
	xxx_messageInfo_ReqSubscribe.DiscardUnknown(m)
}

var xxx_messageInfo_ReqSubscribe proto.InternalMessageInfo

func (m *ReqSubscribe) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

func (m *ReqSubscribe) GetChainId() string {
	if m != nil {
		return m.ChainId
	}
	return ""
}

func (m *ReqSubscribe) GetEmail() string {
	if m != nil {
		return m.Email
	}
	return ""
}

func (*ReqSubscribe) XXX_MessageName() string {
	return "nft.ReqSubscribe"
}

type RespSubscribe struct {
	Code                 int32    `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty" pg:"code"`
	Message              string   `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty" pg:"message"`
	Address              string   `protobuf:"bytes,3,opt,name=address,proto3" json:"address,omitempty" pg:"address"`
	XXX_NoUnkeyedLiteral struct{} `json:"-" pg:"-"`
	XXX_unrecognized     []byte   `json:"-" pg:"-"`
	XXX_sizecache        int32    `json:"-" pg:"-"`
}

func (m *RespSubscribe) Reset()         { *m = RespSubscribe{} }
func (m *RespSubscribe) String() string { return proto.CompactTextString(m) }
func (*RespSubscribe) ProtoMessage()    {}
func (*RespSubscribe) Descriptor() ([]byte, []int) {
	return fileDescriptor_bbb523e0dae4ed64, []int{9}
}
func (m *RespSubscribe) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RespSubscribe) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RespSubscribe.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RespSubscribe) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RespSubscribe.Merge(m, src)
}
func (m *RespSubscribe) XXX_Size() int {
	return m.Size()
}
func (m *RespSubscribe) XXX_DiscardUnknown() {
	xxx_messageInfo_RespSubscribe.DiscardUnknown(m)
}

var xxx_messageInfo_RespSubscribe proto.InternalMessageInfo

func (m *RespSubscribe) GetCode() int32 {
	if m != nil {
		return m.Code
	}
	return 0
}

func (m *RespSubscribe) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func (m *RespSubscribe) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

func (*RespSubscribe) XXX_MessageName() string {
	return "nft.RespSubscribe"
}

// status
type ReqStatus struct {
	Address              string   `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty" pg:"address"`
	XXX_NoUnkeyedLiteral struct{} `json:"-" pg:"-"`
	XXX_unrecognized     []byte   `json:"-" pg:"-"`
	XXX_sizecache        int32    `json:"-" pg:"-"`
}

func (m *ReqStatus) Reset()         { *m = ReqStatus{} }
func (m *ReqStatus) String() string { return proto.CompactTextString(m) }
func (*ReqStatus) ProtoMessage()    {}
func (*ReqStatus) Descriptor() ([]byte, []int) {
	return fileDescriptor_bbb523e0dae4ed64, []int{10}
}
func (m *ReqStatus) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ReqStatus) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ReqStatus.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ReqStatus) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReqStatus.Merge(m, src)
}
func (m *ReqStatus) XXX_Size() int {
	return m.Size()
}
func (m *ReqStatus) XXX_DiscardUnknown() {
	xxx_messageInfo_ReqStatus.DiscardUnknown(m)
}

var xxx_messageInfo_ReqStatus proto.InternalMessageInfo

func (m *ReqStatus) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

func (*ReqStatus) XXX_MessageName() string {
	return "nft.ReqStatus"
}

type RespStatus struct {
	Code                 int32    `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty" pg:"code"`
	Message              string   `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty" pg:"message"`
	Address              string   `protobuf:"bytes,3,opt,name=address,proto3" json:"address,omitempty" pg:"address"`
	FileCount            int32    `protobuf:"varint,4,opt,name=file_count,json=fileCount,proto3" json:"file_count,omitempty" pg:"file_count"`
	XXX_NoUnkeyedLiteral struct{} `json:"-" pg:"-"`
	XXX_unrecognized     []byte   `json:"-" pg:"-"`
	XXX_sizecache        int32    `json:"-" pg:"-"`
}

func (m *RespStatus) Reset()         { *m = RespStatus{} }
func (m *RespStatus) String() string { return proto.CompactTextString(m) }
func (*RespStatus) ProtoMessage()    {}
func (*RespStatus) Descriptor() ([]byte, []int) {
	return fileDescriptor_bbb523e0dae4ed64, []int{11}
}
func (m *RespStatus) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RespStatus) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RespStatus.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RespStatus) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RespStatus.Merge(m, src)
}
func (m *RespStatus) XXX_Size() int {
	return m.Size()
}
func (m *RespStatus) XXX_DiscardUnknown() {
	xxx_messageInfo_RespStatus.DiscardUnknown(m)
}

var xxx_messageInfo_RespStatus proto.InternalMessageInfo

func (m *RespStatus) GetCode() int32 {
	if m != nil {
		return m.Code
	}
	return 0
}

func (m *RespStatus) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func (m *RespStatus) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

func (m *RespStatus) GetFileCount() int32 {
	if m != nil {
		return m.FileCount
	}
	return 0
}

func (*RespStatus) XXX_MessageName() string {
	return "nft.RespStatus"
}
func init() {
	proto.RegisterType((*NftTab)(nil), "nft.NftTab")
	golang_proto.RegisterType((*NftTab)(nil), "nft.NftTab")
	proto.RegisterType((*UserTab)(nil), "nft.UserTab")
	golang_proto.RegisterType((*UserTab)(nil), "nft.UserTab")
	proto.RegisterType((*ReqUpLoad)(nil), "nft.ReqUpLoad")
	golang_proto.RegisterType((*ReqUpLoad)(nil), "nft.ReqUpLoad")
	proto.RegisterType((*RespUpLoad)(nil), "nft.RespUpLoad")
	golang_proto.RegisterType((*RespUpLoad)(nil), "nft.RespUpLoad")
	proto.RegisterType((*ReqCheckDownload)(nil), "nft.ReqCheckDownload")
	golang_proto.RegisterType((*ReqCheckDownload)(nil), "nft.ReqCheckDownload")
	proto.RegisterType((*RespCheckDownload)(nil), "nft.RespCheckDownload")
	golang_proto.RegisterType((*RespCheckDownload)(nil), "nft.RespCheckDownload")
	proto.RegisterType((*ReqGetFiles)(nil), "nft.ReqGetFiles")
	golang_proto.RegisterType((*ReqGetFiles)(nil), "nft.ReqGetFiles")
	proto.RegisterType((*RespGetFiles)(nil), "nft.RespGetFiles")
	golang_proto.RegisterType((*RespGetFiles)(nil), "nft.RespGetFiles")
	proto.RegisterType((*ReqSubscribe)(nil), "nft.ReqSubscribe")
	golang_proto.RegisterType((*ReqSubscribe)(nil), "nft.ReqSubscribe")
	proto.RegisterType((*RespSubscribe)(nil), "nft.RespSubscribe")
	golang_proto.RegisterType((*RespSubscribe)(nil), "nft.RespSubscribe")
	proto.RegisterType((*ReqStatus)(nil), "nft.ReqStatus")
	golang_proto.RegisterType((*ReqStatus)(nil), "nft.ReqStatus")
	proto.RegisterType((*RespStatus)(nil), "nft.RespStatus")
	golang_proto.RegisterType((*RespStatus)(nil), "nft.RespStatus")
}

func init() { proto.RegisterFile("protos/nft/nft.proto", fileDescriptor_bbb523e0dae4ed64) }
func init() { golang_proto.RegisterFile("protos/nft/nft.proto", fileDescriptor_bbb523e0dae4ed64) }

var fileDescriptor_bbb523e0dae4ed64 = []byte{
	// 903 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xb4, 0x56, 0x41, 0x6f, 0xe3, 0x44,
	0x14, 0x66, 0x92, 0x3a, 0x71, 0x5e, 0xda, 0x65, 0x77, 0x54, 0x56, 0x26, 0x40, 0x12, 0x8c, 0x56,
	0xca, 0x4a, 0xdd, 0x04, 0xca, 0xad, 0x07, 0x0e, 0x2d, 0x62, 0x59, 0x81, 0xaa, 0xca, 0xed, 0x0a,
	0xc1, 0x25, 0x1a, 0xdb, 0xe3, 0x64, 0xb4, 0xb6, 0x27, 0xf5, 0x8c, 0x59, 0xe0, 0xc8, 0x85, 0x0b,
	0x12, 0x1c, 0x38, 0x70, 0xe2, 0x3f, 0xf0, 0x0f, 0x38, 0xf6, 0xc0, 0x81, 0x5f, 0x50, 0xa0, 0xfd,
	0x07, 0x7b, 0xe2, 0x88, 0x66, 0xc6, 0x76, 0x92, 0xdd, 0xb4, 0x95, 0xaa, 0xf6, 0x10, 0x69, 0xde,
	0x37, 0xef, 0x4d, 0xde, 0xfb, 0xde, 0x37, 0x6f, 0x0c, 0x9b, 0xb3, 0x8c, 0x4b, 0x2e, 0x46, 0x69,
	0x24, 0xd5, 0x6f, 0xa8, 0x4d, 0x5c, 0x4f, 0x23, 0xd9, 0x79, 0x7f, 0xc2, 0xe4, 0x34, 0xf7, 0x87,
	0x01, 0x4f, 0x46, 0x32, 0xe3, 0xe9, 0xa3, 0x5c, 0x8c, 0xf4, 0xb6, 0x9f, 0x47, 0xa3, 0x09, 0x9f,
	0x70, 0x6d, 0xe8, 0x95, 0x09, 0xeb, 0xf4, 0x26, 0x9c, 0x4f, 0x62, 0x3a, 0xf7, 0x92, 0x2c, 0xa1,
	0x42, 0x92, 0x64, 0x66, 0x1c, 0xdc, 0xdf, 0xeb, 0xd0, 0xd8, 0x8f, 0xe4, 0x11, 0xf1, 0xf1, 0x67,
	0x00, 0x92, 0xf8, 0x31, 0x1d, 0xa7, 0x24, 0xa1, 0x0e, 0xea, 0xa3, 0x41, 0x6b, 0x77, 0xeb, 0xc5,
	0x69, 0x6f, 0x30, 0x9b, 0xec, 0xb8, 0x69, 0x24, 0xb7, 0x48, 0xcc, 0x88, 0xd8, 0x91, 0x5b, 0x21,
	0x13, 0x01, 0xc9, 0xc2, 0x71, 0x9e, 0x3e, 0x4b, 0xf9, 0xf3, 0x74, 0x1c, 0xf0, 0x38, 0x4f, 0x52,
	0xe1, 0x7a, 0x2d, 0x1d, 0xbf, 0x4f, 0x12, 0x8a, 0x1d, 0x68, 0x92, 0x30, 0xcc, 0xa8, 0x10, 0x4e,
	0x4d, 0x9d, 0xe4, 0x95, 0x26, 0x7e, 0x13, 0xec, 0x60, 0x4a, 0x58, 0x3a, 0x66, 0xa1, 0x53, 0x37,
	0x5b, 0xda, 0x7e, 0x12, 0xe2, 0xb7, 0xa0, 0x15, 0xb1, 0x98, 0x8e, 0xa7, 0x44, 0x4c, 0x9d, 0x35,
	0xbd, 0x67, 0x2b, 0xe0, 0x53, 0x22, 0xa6, 0x18, 0xc3, 0x9a, 0x4e, 0xcc, 0xd2, 0xb8, 0x5e, 0x2b,
	0x4c, 0x7e, 0x3b, 0xa3, 0x4e, 0xc3, 0x60, 0x6a, 0xad, 0x30, 0xc1, 0xbe, 0xa3, 0x4e, 0xb3, 0x8f,
	0x06, 0x96, 0xa7, 0xd7, 0xf8, 0x6d, 0x68, 0xc9, 0x69, 0x9e, 0xf8, 0x29, 0x61, 0xb1, 0x63, 0x6b,
	0xe7, 0x39, 0x80, 0x1f, 0xc0, 0x1d, 0x99, 0x91, 0x54, 0x90, 0x40, 0x32, 0xae, 0xf3, 0x6a, 0x69,
	0x97, 0x8d, 0x05, 0xf4, 0x49, 0xa8, 0x0e, 0x11, 0x6c, 0x92, 0x12, 0x99, 0x67, 0xd4, 0x01, 0x73,
	0x48, 0x05, 0xe0, 0x3e, 0xb4, 0x43, 0x2a, 0x82, 0x8c, 0xcd, 0x94, 0xbb, 0xd3, 0xd6, 0xfb, 0x8b,
	0x10, 0x7e, 0x0c, 0xeb, 0x8a, 0xfd, 0x71, 0x90, 0x51, 0x22, 0x69, 0xe8, 0xac, 0xf7, 0xd1, 0xa0,
	0xbd, 0xdd, 0x19, 0x9a, 0x16, 0x0d, 0xcb, 0x16, 0x0d, 0x8f, 0xca, 0x16, 0xed, 0xda, 0x27, 0xa7,
	0xbd, 0xd7, 0x7e, 0xfe, 0xbb, 0x87, 0xbc, 0xb6, 0x8a, 0xdc, 0x33, 0x81, 0xee, 0x2f, 0x35, 0x68,
	0x3e, 0x15, 0x34, 0x53, 0x4d, 0x3b, 0x58, 0xd1, 0xb4, 0x0f, 0x5e, 0x9c, 0xf6, 0x1e, 0x15, 0x4d,
	0x1b, 0xe7, 0x82, 0x66, 0xb7, 0xdf, 0xb9, 0x4d, 0xb0, 0x68, 0xa2, 0xc8, 0x35, 0x5d, 0x33, 0x06,
	0x7e, 0x0f, 0x36, 0x98, 0x18, 0x8b, 0xdc, 0x57, 0x24, 0xf8, 0x34, 0xd4, 0xbd, 0xb3, 0xbc, 0x75,
	0x26, 0x0e, 0x2b, 0xec, 0x15, 0x5a, 0x1a, 0xd7, 0xa5, 0xe5, 0xb7, 0x1a, 0xb4, 0x3c, 0x7a, 0xfc,
	0x74, 0xf6, 0x39, 0x27, 0xe1, 0x62, 0x19, 0xe8, 0xe2, 0x32, 0x6a, 0x97, 0x08, 0xb0, 0x7e, 0x81,
	0x00, 0xd7, 0x56, 0x08, 0xd0, 0x5a, 0x21, 0xc0, 0xc6, 0x45, 0x02, 0x6c, 0x5e, 0x2d, 0x40, 0xfb,
	0x4a, 0x01, 0xb6, 0xae, 0x10, 0x20, 0xbc, 0x22, 0x40, 0xf7, 0x08, 0xc0, 0xa3, 0x62, 0x56, 0x10,
	0x84, 0x61, 0x2d, 0xe0, 0xa1, 0xd1, 0x8c, 0xe5, 0xe9, 0xb5, 0x22, 0x2d, 0xa1, 0x42, 0x90, 0x09,
	0x2d, 0x99, 0x29, 0xcc, 0x45, 0x3a, 0xeb, 0x4b, 0x74, 0xba, 0xdf, 0x23, 0xb8, 0xeb, 0xd1, 0xe3,
	0xbd, 0x29, 0x0d, 0x9e, 0x7d, 0xcc, 0x9f, 0xa7, 0xf1, 0xb5, 0xd9, 0x5f, 0xaa, 0xaf, 0xfe, 0x72,
	0x7d, 0x97, 0x0d, 0x07, 0xf7, 0x4f, 0x04, 0xf7, 0x54, 0x6d, 0xcb, 0x59, 0xdc, 0x50, 0x89, 0xf8,
	0x3e, 0x34, 0xe8, 0x37, 0x4c, 0x48, 0xa1, 0xff, 0xd7, 0xf6, 0x0a, 0x6b, 0x39, 0x25, 0xeb, 0x02,
	0xb9, 0x34, 0x56, 0xc8, 0xa5, 0xb9, 0x42, 0x2e, 0xf6, 0x5c, 0x2e, 0xee, 0x8f, 0x08, 0xda, 0x1e,
	0x3d, 0x7e, 0x4c, 0xe5, 0x27, 0x2c, 0xa6, 0xe2, 0x36, 0xe8, 0xdc, 0x04, 0x4b, 0x48, 0x92, 0x49,
	0x5d, 0x92, 0xe5, 0x19, 0x43, 0xa1, 0x31, 0x4b, 0x98, 0x2c, 0x6e, 0xaa, 0x31, 0xdc, 0x9f, 0x10,
	0xac, 0x2b, 0x76, 0xab, 0x7c, 0x6e, 0x8a, 0xd8, 0x4d, 0xb0, 0x24, 0x97, 0x24, 0x2e, 0x93, 0xd0,
	0x06, 0x7e, 0x17, 0x2c, 0xc5, 0xa2, 0x70, 0xac, 0x7e, 0x7d, 0xd0, 0xde, 0x6e, 0x0f, 0xd5, 0x33,
	0x68, 0x1e, 0x29, 0xcf, 0xec, 0xb8, 0x5f, 0xaa, 0x84, 0x8e, 0xab, 0x29, 0x72, 0x3d, 0x82, 0xaa,
	0xa1, 0x55, 0x5f, 0x18, 0x5a, 0xee, 0x17, 0xb0, 0xa1, 0x6a, 0x9d, 0x9f, 0x7d, 0x53, 0x17, 0xe5,
	0x81, 0x1e, 0x4f, 0x87, 0x92, 0xc8, 0xfc, 0x92, 0x8e, 0xba, 0xc2, 0xdc, 0xd2, 0xc2, 0xef, 0xa6,
	0x98, 0x7e, 0x07, 0x40, 0x4b, 0x35, 0xe0, 0x79, 0x5a, 0xf6, 0x5c, 0x8b, 0x77, 0x4f, 0x01, 0xdb,
	0x3f, 0xd4, 0x00, 0xf6, 0x23, 0x79, 0x48, 0xb3, 0xaf, 0x59, 0x40, 0xf1, 0x43, 0x68, 0x14, 0x53,
	0xe2, 0x8e, 0x26, 0xbf, 0x1a, 0xab, 0x9d, 0xd7, 0x0b, 0xbb, 0x1a, 0x23, 0x1f, 0xc1, 0xc6, 0xf2,
	0xa5, 0x7b, 0xa3, 0x8c, 0x58, 0x82, 0x3b, 0xf7, 0xab, 0xc0, 0x65, 0xf7, 0x11, 0xd8, 0x95, 0xac,
	0xee, 0x96, 0xa1, 0x25, 0xd2, 0xb9, 0x57, 0x45, 0x55, 0x4e, 0xdb, 0xd0, 0x9a, 0xf7, 0xa6, 0xdc,
	0x9f, 0x4b, 0xa1, 0x83, 0xab, 0x90, 0xb9, 0xdb, 0x43, 0x68, 0x14, 0x7c, 0x56, 0xf5, 0x18, 0x7b,
	0xa1, 0x1e, 0x03, 0xec, 0xee, 0xfc, 0xf7, 0x6f, 0x17, 0x9d, 0x9c, 0x75, 0xd1, 0x5f, 0x67, 0x5d,
	0xf4, 0xcf, 0x59, 0x17, 0xfd, 0x7a, 0xde, 0x45, 0x7f, 0x9c, 0x77, 0xd1, 0xc9, 0x79, 0x17, 0x41,
	0x9b, 0xf1, 0xa1, 0x2f, 0x23, 0xa1, 0xa2, 0x76, 0xed, 0xfd, 0x48, 0x1e, 0xa8, 0xe7, 0xe9, 0x00,
	0x7d, 0xa5, 0xbe, 0xcf, 0xfc, 0x86, 0x7e, 0xac, 0x3e, 0xfc, 0x3f, 0x00, 0x00, 0xff, 0xff, 0xd7,
	0x78, 0x9b, 0x79, 0xc3, 0x09, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// NftServiceClient is the client API for NftService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type NftServiceClient interface {
	UpLoad(ctx context.Context, in *ReqUpLoad, opts ...grpc.CallOption) (*RespUpLoad, error)
	CheckDownload(ctx context.Context, in *ReqCheckDownload, opts ...grpc.CallOption) (*RespCheckDownload, error)
	GetFiles(ctx context.Context, in *ReqGetFiles, opts ...grpc.CallOption) (*RespGetFiles, error)
	Subscribe(ctx context.Context, in *ReqSubscribe, opts ...grpc.CallOption) (*RespSubscribe, error)
	Status(ctx context.Context, in *ReqStatus, opts ...grpc.CallOption) (*RespStatus, error)
}

type nftServiceClient struct {
	cc *grpc.ClientConn
}

func NewNftServiceClient(cc *grpc.ClientConn) NftServiceClient {
	return &nftServiceClient{cc}
}

func (c *nftServiceClient) UpLoad(ctx context.Context, in *ReqUpLoad, opts ...grpc.CallOption) (*RespUpLoad, error) {
	out := new(RespUpLoad)
	err := c.cc.Invoke(ctx, "/nft.NftService/UpLoad", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nftServiceClient) CheckDownload(ctx context.Context, in *ReqCheckDownload, opts ...grpc.CallOption) (*RespCheckDownload, error) {
	out := new(RespCheckDownload)
	err := c.cc.Invoke(ctx, "/nft.NftService/CheckDownload", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nftServiceClient) GetFiles(ctx context.Context, in *ReqGetFiles, opts ...grpc.CallOption) (*RespGetFiles, error) {
	out := new(RespGetFiles)
	err := c.cc.Invoke(ctx, "/nft.NftService/GetFiles", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nftServiceClient) Subscribe(ctx context.Context, in *ReqSubscribe, opts ...grpc.CallOption) (*RespSubscribe, error) {
	out := new(RespSubscribe)
	err := c.cc.Invoke(ctx, "/nft.NftService/Subscribe", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nftServiceClient) Status(ctx context.Context, in *ReqStatus, opts ...grpc.CallOption) (*RespStatus, error) {
	out := new(RespStatus)
	err := c.cc.Invoke(ctx, "/nft.NftService/Status", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// NftServiceServer is the server API for NftService service.
type NftServiceServer interface {
	UpLoad(context.Context, *ReqUpLoad) (*RespUpLoad, error)
	CheckDownload(context.Context, *ReqCheckDownload) (*RespCheckDownload, error)
	GetFiles(context.Context, *ReqGetFiles) (*RespGetFiles, error)
	Subscribe(context.Context, *ReqSubscribe) (*RespSubscribe, error)
	Status(context.Context, *ReqStatus) (*RespStatus, error)
}

// UnimplementedNftServiceServer can be embedded to have forward compatible implementations.
type UnimplementedNftServiceServer struct {
}

func (*UnimplementedNftServiceServer) UpLoad(ctx context.Context, req *ReqUpLoad) (*RespUpLoad, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpLoad not implemented")
}
func (*UnimplementedNftServiceServer) CheckDownload(ctx context.Context, req *ReqCheckDownload) (*RespCheckDownload, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckDownload not implemented")
}
func (*UnimplementedNftServiceServer) GetFiles(ctx context.Context, req *ReqGetFiles) (*RespGetFiles, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFiles not implemented")
}
func (*UnimplementedNftServiceServer) Subscribe(ctx context.Context, req *ReqSubscribe) (*RespSubscribe, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Subscribe not implemented")
}
func (*UnimplementedNftServiceServer) Status(ctx context.Context, req *ReqStatus) (*RespStatus, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Status not implemented")
}

func RegisterNftServiceServer(s *grpc.Server, srv NftServiceServer) {
	s.RegisterService(&_NftService_serviceDesc, srv)
}

func _NftService_UpLoad_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqUpLoad)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NftServiceServer).UpLoad(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/nft.NftService/UpLoad",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NftServiceServer).UpLoad(ctx, req.(*ReqUpLoad))
	}
	return interceptor(ctx, in, info, handler)
}

func _NftService_CheckDownload_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqCheckDownload)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NftServiceServer).CheckDownload(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/nft.NftService/CheckDownload",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NftServiceServer).CheckDownload(ctx, req.(*ReqCheckDownload))
	}
	return interceptor(ctx, in, info, handler)
}

func _NftService_GetFiles_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqGetFiles)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NftServiceServer).GetFiles(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/nft.NftService/GetFiles",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NftServiceServer).GetFiles(ctx, req.(*ReqGetFiles))
	}
	return interceptor(ctx, in, info, handler)
}

func _NftService_Subscribe_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqSubscribe)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NftServiceServer).Subscribe(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/nft.NftService/Subscribe",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NftServiceServer).Subscribe(ctx, req.(*ReqSubscribe))
	}
	return interceptor(ctx, in, info, handler)
}

func _NftService_Status_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqStatus)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NftServiceServer).Status(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/nft.NftService/Status",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NftServiceServer).Status(ctx, req.(*ReqStatus))
	}
	return interceptor(ctx, in, info, handler)
}

var _NftService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "nft.NftService",
	HandlerType: (*NftServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "UpLoad",
			Handler:    _NftService_UpLoad_Handler,
		},
		{
			MethodName: "CheckDownload",
			Handler:    _NftService_CheckDownload_Handler,
		},
		{
			MethodName: "GetFiles",
			Handler:    _NftService_GetFiles_Handler,
		},
		{
			MethodName: "Subscribe",
			Handler:    _NftService_Subscribe_Handler,
		},
		{
			MethodName: "Status",
			Handler:    _NftService_Status_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "protos/nft/nft.proto",
}

func (m *NftTab) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NftTab) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NftTab) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	n1, err1 := github_com_tron_us_protobuf_types.StdTimeMarshalTo(m.TimeCreated, dAtA[i-github_com_tron_us_protobuf_types.SizeOfStdTime(m.TimeCreated):])
	if err1 != nil {
		return 0, err1
	}
	i -= n1
	i = encodeVarintNft(dAtA, i, uint64(n1))
	i--
	dAtA[i] = 0x62
	if len(m.Description) > 0 {
		i -= len(m.Description)
		copy(dAtA[i:], m.Description)
		i = encodeVarintNft(dAtA, i, uint64(len(m.Description)))
		i--
		dAtA[i] = 0x5a
	}
	if len(m.Signature) > 0 {
		i -= len(m.Signature)
		copy(dAtA[i:], m.Signature)
		i = encodeVarintNft(dAtA, i, uint64(len(m.Signature)))
		i--
		dAtA[i] = 0x52
	}
	if len(m.TransactionId) > 0 {
		i -= len(m.TransactionId)
		copy(dAtA[i:], m.TransactionId)
		i = encodeVarintNft(dAtA, i, uint64(len(m.TransactionId)))
		i--
		dAtA[i] = 0x4a
	}
	if len(m.Thumbnail) > 0 {
		i -= len(m.Thumbnail)
		copy(dAtA[i:], m.Thumbnail)
		i = encodeVarintNft(dAtA, i, uint64(len(m.Thumbnail)))
		i--
		dAtA[i] = 0x42
	}
	if m.Size_ != 0 {
		i = encodeVarintNft(dAtA, i, uint64(m.Size_))
		i--
		dAtA[i] = 0x38
	}
	if len(m.Type) > 0 {
		i -= len(m.Type)
		copy(dAtA[i:], m.Type)
		i = encodeVarintNft(dAtA, i, uint64(len(m.Type)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintNft(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.FileHash) > 0 {
		i -= len(m.FileHash)
		copy(dAtA[i:], m.FileHash)
		i = encodeVarintNft(dAtA, i, uint64(len(m.FileHash)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.ChainId) > 0 {
		i -= len(m.ChainId)
		copy(dAtA[i:], m.ChainId)
		i = encodeVarintNft(dAtA, i, uint64(len(m.ChainId)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintNft(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.tableName) > 0 {
		i -= len(m.tableName)
		copy(dAtA[i:], m.tableName)
		i = encodeVarintNft(dAtA, i, uint64(len(m.tableName)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *UserTab) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UserTab) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UserTab) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	n2, err2 := github_com_tron_us_protobuf_types.StdTimeMarshalTo(m.TimeCreated, dAtA[i-github_com_tron_us_protobuf_types.SizeOfStdTime(m.TimeCreated):])
	if err2 != nil {
		return 0, err2
	}
	i -= n2
	i = encodeVarintNft(dAtA, i, uint64(n2))
	i--
	dAtA[i] = 0x32
	if m.IsSubscribed != 0 {
		i = encodeVarintNft(dAtA, i, uint64(m.IsSubscribed))
		i--
		dAtA[i] = 0x28
	}
	if len(m.Email) > 0 {
		i -= len(m.Email)
		copy(dAtA[i:], m.Email)
		i = encodeVarintNft(dAtA, i, uint64(len(m.Email)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.ChainId) > 0 {
		i -= len(m.ChainId)
		copy(dAtA[i:], m.ChainId)
		i = encodeVarintNft(dAtA, i, uint64(len(m.ChainId)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintNft(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.tableName) > 0 {
		i -= len(m.tableName)
		copy(dAtA[i:], m.tableName)
		i = encodeVarintNft(dAtA, i, uint64(len(m.tableName)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ReqUpLoad) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReqUpLoad) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReqUpLoad) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Description) > 0 {
		i -= len(m.Description)
		copy(dAtA[i:], m.Description)
		i = encodeVarintNft(dAtA, i, uint64(len(m.Description)))
		i--
		dAtA[i] = 0x52
	}
	if len(m.Signature) > 0 {
		i -= len(m.Signature)
		copy(dAtA[i:], m.Signature)
		i = encodeVarintNft(dAtA, i, uint64(len(m.Signature)))
		i--
		dAtA[i] = 0x4a
	}
	if len(m.TransactionId) > 0 {
		i -= len(m.TransactionId)
		copy(dAtA[i:], m.TransactionId)
		i = encodeVarintNft(dAtA, i, uint64(len(m.TransactionId)))
		i--
		dAtA[i] = 0x42
	}
	if len(m.Thumbnail) > 0 {
		i -= len(m.Thumbnail)
		copy(dAtA[i:], m.Thumbnail)
		i = encodeVarintNft(dAtA, i, uint64(len(m.Thumbnail)))
		i--
		dAtA[i] = 0x3a
	}
	if m.Size_ != 0 {
		i = encodeVarintNft(dAtA, i, uint64(m.Size_))
		i--
		dAtA[i] = 0x30
	}
	if len(m.Type) > 0 {
		i -= len(m.Type)
		copy(dAtA[i:], m.Type)
		i = encodeVarintNft(dAtA, i, uint64(len(m.Type)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintNft(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.FileHash) > 0 {
		i -= len(m.FileHash)
		copy(dAtA[i:], m.FileHash)
		i = encodeVarintNft(dAtA, i, uint64(len(m.FileHash)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.ChainId) > 0 {
		i -= len(m.ChainId)
		copy(dAtA[i:], m.ChainId)
		i = encodeVarintNft(dAtA, i, uint64(len(m.ChainId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintNft(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *RespUpLoad) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RespUpLoad) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RespUpLoad) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintNft(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Message) > 0 {
		i -= len(m.Message)
		copy(dAtA[i:], m.Message)
		i = encodeVarintNft(dAtA, i, uint64(len(m.Message)))
		i--
		dAtA[i] = 0x12
	}
	if m.Code != 0 {
		i = encodeVarintNft(dAtA, i, uint64(m.Code))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ReqCheckDownload) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReqCheckDownload) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReqCheckDownload) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.FileHash) > 0 {
		i -= len(m.FileHash)
		copy(dAtA[i:], m.FileHash)
		i = encodeVarintNft(dAtA, i, uint64(len(m.FileHash)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Signature) > 0 {
		i -= len(m.Signature)
		copy(dAtA[i:], m.Signature)
		i = encodeVarintNft(dAtA, i, uint64(len(m.Signature)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.ChainId) > 0 {
		i -= len(m.ChainId)
		copy(dAtA[i:], m.ChainId)
		i = encodeVarintNft(dAtA, i, uint64(len(m.ChainId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintNft(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *RespCheckDownload) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RespCheckDownload) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RespCheckDownload) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Size_ != 0 {
		i = encodeVarintNft(dAtA, i, uint64(m.Size_))
		i--
		dAtA[i] = 0x40
	}
	if len(m.Type) > 0 {
		i -= len(m.Type)
		copy(dAtA[i:], m.Type)
		i = encodeVarintNft(dAtA, i, uint64(len(m.Type)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintNft(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.FileHash) > 0 {
		i -= len(m.FileHash)
		copy(dAtA[i:], m.FileHash)
		i = encodeVarintNft(dAtA, i, uint64(len(m.FileHash)))
		i--
		dAtA[i] = 0x2a
	}
	if m.Exists {
		i--
		if m.Exists {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x20
	}
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintNft(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Message) > 0 {
		i -= len(m.Message)
		copy(dAtA[i:], m.Message)
		i = encodeVarintNft(dAtA, i, uint64(len(m.Message)))
		i--
		dAtA[i] = 0x12
	}
	if m.Code != 0 {
		i = encodeVarintNft(dAtA, i, uint64(m.Code))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ReqGetFiles) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReqGetFiles) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReqGetFiles) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Limit != 0 {
		i = encodeVarintNft(dAtA, i, uint64(m.Limit))
		i--
		dAtA[i] = 0x28
	}
	if m.Start != 0 {
		i = encodeVarintNft(dAtA, i, uint64(m.Start))
		i--
		dAtA[i] = 0x20
	}
	if len(m.Signature) > 0 {
		i -= len(m.Signature)
		copy(dAtA[i:], m.Signature)
		i = encodeVarintNft(dAtA, i, uint64(len(m.Signature)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.ChainId) > 0 {
		i -= len(m.ChainId)
		copy(dAtA[i:], m.ChainId)
		i = encodeVarintNft(dAtA, i, uint64(len(m.ChainId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintNft(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *RespGetFiles) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RespGetFiles) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RespGetFiles) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Files) > 0 {
		for iNdEx := len(m.Files) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Files[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintNft(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x2a
		}
	}
	if m.Total != 0 {
		i = encodeVarintNft(dAtA, i, uint64(m.Total))
		i--
		dAtA[i] = 0x20
	}
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintNft(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Message) > 0 {
		i -= len(m.Message)
		copy(dAtA[i:], m.Message)
		i = encodeVarintNft(dAtA, i, uint64(len(m.Message)))
		i--
		dAtA[i] = 0x12
	}
	if m.Code != 0 {
		i = encodeVarintNft(dAtA, i, uint64(m.Code))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ReqSubscribe) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReqSubscribe) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReqSubscribe) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Email) > 0 {
		i -= len(m.Email)
		copy(dAtA[i:], m.Email)
		i = encodeVarintNft(dAtA, i, uint64(len(m.Email)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.ChainId) > 0 {
		i -= len(m.ChainId)
		copy(dAtA[i:], m.ChainId)
		i = encodeVarintNft(dAtA, i, uint64(len(m.ChainId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintNft(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *RespSubscribe) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RespSubscribe) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RespSubscribe) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintNft(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Message) > 0 {
		i -= len(m.Message)
		copy(dAtA[i:], m.Message)
		i = encodeVarintNft(dAtA, i, uint64(len(m.Message)))
		i--
		dAtA[i] = 0x12
	}
	if m.Code != 0 {
		i = encodeVarintNft(dAtA, i, uint64(m.Code))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ReqStatus) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReqStatus) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReqStatus) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintNft(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *RespStatus) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RespStatus) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RespStatus) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.FileCount != 0 {
		i = encodeVarintNft(dAtA, i, uint64(m.FileCount))
		i--
		dAtA[i] = 0x20
	}
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintNft(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Message) > 0 {
		i -= len(m.Message)
		copy(dAtA[i:], m.Message)
		i = encodeVarintNft(dAtA, i, uint64(len(m.Message)))
		i--
		dAtA[i] = 0x12
	}
	if m.Code != 0 {
		i = encodeVarintNft(dAtA, i, uint64(m.Code))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintNft(dAtA []byte, offset int, v uint64) int {
	offset -= sovNft(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func NewPopulatedNftTab(r randyNft, easy bool) *NftTab {
	this := &NftTab{}
	this.tableName = string(randStringNft(r))
	this.Address = string(randStringNft(r))
	this.ChainId = string(randStringNft(r))
	this.FileHash = string(randStringNft(r))
	this.Name = string(randStringNft(r))
	this.Type = string(randStringNft(r))
	this.Size_ = int32(r.Int31())
	if r.Intn(2) == 0 {
		this.Size_ *= -1
	}
	this.Thumbnail = string(randStringNft(r))
	this.TransactionId = string(randStringNft(r))
	this.Signature = string(randStringNft(r))
	this.Description = string(randStringNft(r))
	v1 := github_com_tron_us_protobuf_types.NewPopulatedStdTime(r, easy)
	this.TimeCreated = *v1
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedNft(r, 13)
	}
	return this
}

func NewPopulatedUserTab(r randyNft, easy bool) *UserTab {
	this := &UserTab{}
	this.tableName = string(randStringNft(r))
	this.Address = string(randStringNft(r))
	this.ChainId = string(randStringNft(r))
	this.Email = string(randStringNft(r))
	this.IsSubscribed = int32(r.Int31())
	if r.Intn(2) == 0 {
		this.IsSubscribed *= -1
	}
	v2 := github_com_tron_us_protobuf_types.NewPopulatedStdTime(r, easy)
	this.TimeCreated = *v2
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedNft(r, 7)
	}
	return this
}

func NewPopulatedReqUpLoad(r randyNft, easy bool) *ReqUpLoad {
	this := &ReqUpLoad{}
	this.Address = string(randStringNft(r))
	this.ChainId = string(randStringNft(r))
	this.FileHash = string(randStringNft(r))
	this.Name = string(randStringNft(r))
	this.Type = string(randStringNft(r))
	this.Size_ = int32(r.Int31())
	if r.Intn(2) == 0 {
		this.Size_ *= -1
	}
	this.Thumbnail = string(randStringNft(r))
	this.TransactionId = string(randStringNft(r))
	this.Signature = string(randStringNft(r))
	this.Description = string(randStringNft(r))
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedNft(r, 11)
	}
	return this
}

func NewPopulatedRespUpLoad(r randyNft, easy bool) *RespUpLoad {
	this := &RespUpLoad{}
	this.Code = int32(r.Int31())
	if r.Intn(2) == 0 {
		this.Code *= -1
	}
	this.Message = string(randStringNft(r))
	this.Address = string(randStringNft(r))
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedNft(r, 4)
	}
	return this
}

func NewPopulatedReqCheckDownload(r randyNft, easy bool) *ReqCheckDownload {
	this := &ReqCheckDownload{}
	this.Address = string(randStringNft(r))
	this.ChainId = string(randStringNft(r))
	this.Signature = string(randStringNft(r))
	this.FileHash = string(randStringNft(r))
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedNft(r, 5)
	}
	return this
}

func NewPopulatedRespCheckDownload(r randyNft, easy bool) *RespCheckDownload {
	this := &RespCheckDownload{}
	this.Code = int32(r.Int31())
	if r.Intn(2) == 0 {
		this.Code *= -1
	}
	this.Message = string(randStringNft(r))
	this.Address = string(randStringNft(r))
	this.Exists = bool(bool(r.Intn(2) == 0))
	this.FileHash = string(randStringNft(r))
	this.Name = string(randStringNft(r))
	this.Type = string(randStringNft(r))
	this.Size_ = int32(r.Int31())
	if r.Intn(2) == 0 {
		this.Size_ *= -1
	}
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedNft(r, 9)
	}
	return this
}

func NewPopulatedReqGetFiles(r randyNft, easy bool) *ReqGetFiles {
	this := &ReqGetFiles{}
	this.Address = string(randStringNft(r))
	this.ChainId = string(randStringNft(r))
	this.Signature = string(randStringNft(r))
	this.Start = int32(r.Int31())
	if r.Intn(2) == 0 {
		this.Start *= -1
	}
	this.Limit = int32(r.Int31())
	if r.Intn(2) == 0 {
		this.Limit *= -1
	}
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedNft(r, 6)
	}
	return this
}

func NewPopulatedRespGetFiles(r randyNft, easy bool) *RespGetFiles {
	this := &RespGetFiles{}
	this.Code = int32(r.Int31())
	if r.Intn(2) == 0 {
		this.Code *= -1
	}
	this.Message = string(randStringNft(r))
	this.Address = string(randStringNft(r))
	this.Total = int32(r.Int31())
	if r.Intn(2) == 0 {
		this.Total *= -1
	}
	if r.Intn(5) != 0 {
		v3 := r.Intn(5)
		this.Files = make([]*NftTab, v3)
		for i := 0; i < v3; i++ {
			this.Files[i] = NewPopulatedNftTab(r, easy)
		}
	}
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedNft(r, 6)
	}
	return this
}

func NewPopulatedReqSubscribe(r randyNft, easy bool) *ReqSubscribe {
	this := &ReqSubscribe{}
	this.Address = string(randStringNft(r))
	this.ChainId = string(randStringNft(r))
	this.Email = string(randStringNft(r))
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedNft(r, 4)
	}
	return this
}

func NewPopulatedRespSubscribe(r randyNft, easy bool) *RespSubscribe {
	this := &RespSubscribe{}
	this.Code = int32(r.Int31())
	if r.Intn(2) == 0 {
		this.Code *= -1
	}
	this.Message = string(randStringNft(r))
	this.Address = string(randStringNft(r))
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedNft(r, 4)
	}
	return this
}

func NewPopulatedReqStatus(r randyNft, easy bool) *ReqStatus {
	this := &ReqStatus{}
	this.Address = string(randStringNft(r))
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedNft(r, 2)
	}
	return this
}

func NewPopulatedRespStatus(r randyNft, easy bool) *RespStatus {
	this := &RespStatus{}
	this.Code = int32(r.Int31())
	if r.Intn(2) == 0 {
		this.Code *= -1
	}
	this.Message = string(randStringNft(r))
	this.Address = string(randStringNft(r))
	this.FileCount = int32(r.Int31())
	if r.Intn(2) == 0 {
		this.FileCount *= -1
	}
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedNft(r, 5)
	}
	return this
}

type randyNft interface {
	Float32() float32
	Float64() float64
	Int63() int64
	Int31() int32
	Uint32() uint32
	Intn(n int) int
}

func randUTF8RuneNft(r randyNft) rune {
	ru := r.Intn(62)
	if ru < 10 {
		return rune(ru + 48)
	} else if ru < 36 {
		return rune(ru + 55)
	}
	return rune(ru + 61)
}
func randStringNft(r randyNft) string {
	v4 := r.Intn(100)
	tmps := make([]rune, v4)
	for i := 0; i < v4; i++ {
		tmps[i] = randUTF8RuneNft(r)
	}
	return string(tmps)
}
func randUnrecognizedNft(r randyNft, maxFieldNumber int) (dAtA []byte) {
	l := r.Intn(5)
	for i := 0; i < l; i++ {
		wire := r.Intn(4)
		if wire == 3 {
			wire = 5
		}
		fieldNumber := maxFieldNumber + r.Intn(100)
		dAtA = randFieldNft(dAtA, r, fieldNumber, wire)
	}
	return dAtA
}
func randFieldNft(dAtA []byte, r randyNft, fieldNumber int, wire int) []byte {
	key := uint32(fieldNumber)<<3 | uint32(wire)
	switch wire {
	case 0:
		dAtA = encodeVarintPopulateNft(dAtA, uint64(key))
		v5 := r.Int63()
		if r.Intn(2) == 0 {
			v5 *= -1
		}
		dAtA = encodeVarintPopulateNft(dAtA, uint64(v5))
	case 1:
		dAtA = encodeVarintPopulateNft(dAtA, uint64(key))
		dAtA = append(dAtA, byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)))
	case 2:
		dAtA = encodeVarintPopulateNft(dAtA, uint64(key))
		ll := r.Intn(100)
		dAtA = encodeVarintPopulateNft(dAtA, uint64(ll))
		for j := 0; j < ll; j++ {
			dAtA = append(dAtA, byte(r.Intn(256)))
		}
	default:
		dAtA = encodeVarintPopulateNft(dAtA, uint64(key))
		dAtA = append(dAtA, byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)))
	}
	return dAtA
}
func encodeVarintPopulateNft(dAtA []byte, v uint64) []byte {
	for v >= 1<<7 {
		dAtA = append(dAtA, uint8(uint64(v)&0x7f|0x80))
		v >>= 7
	}
	dAtA = append(dAtA, uint8(v))
	return dAtA
}
func (m *NftTab) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.tableName)
	if l > 0 {
		n += 1 + l + sovNft(uint64(l))
	}
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovNft(uint64(l))
	}
	l = len(m.ChainId)
	if l > 0 {
		n += 1 + l + sovNft(uint64(l))
	}
	l = len(m.FileHash)
	if l > 0 {
		n += 1 + l + sovNft(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovNft(uint64(l))
	}
	l = len(m.Type)
	if l > 0 {
		n += 1 + l + sovNft(uint64(l))
	}
	if m.Size_ != 0 {
		n += 1 + sovNft(uint64(m.Size_))
	}
	l = len(m.Thumbnail)
	if l > 0 {
		n += 1 + l + sovNft(uint64(l))
	}
	l = len(m.TransactionId)
	if l > 0 {
		n += 1 + l + sovNft(uint64(l))
	}
	l = len(m.Signature)
	if l > 0 {
		n += 1 + l + sovNft(uint64(l))
	}
	l = len(m.Description)
	if l > 0 {
		n += 1 + l + sovNft(uint64(l))
	}
	l = github_com_tron_us_protobuf_types.SizeOfStdTime(m.TimeCreated)
	n += 1 + l + sovNft(uint64(l))
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *UserTab) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.tableName)
	if l > 0 {
		n += 1 + l + sovNft(uint64(l))
	}
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovNft(uint64(l))
	}
	l = len(m.ChainId)
	if l > 0 {
		n += 1 + l + sovNft(uint64(l))
	}
	l = len(m.Email)
	if l > 0 {
		n += 1 + l + sovNft(uint64(l))
	}
	if m.IsSubscribed != 0 {
		n += 1 + sovNft(uint64(m.IsSubscribed))
	}
	l = github_com_tron_us_protobuf_types.SizeOfStdTime(m.TimeCreated)
	n += 1 + l + sovNft(uint64(l))
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ReqUpLoad) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovNft(uint64(l))
	}
	l = len(m.ChainId)
	if l > 0 {
		n += 1 + l + sovNft(uint64(l))
	}
	l = len(m.FileHash)
	if l > 0 {
		n += 1 + l + sovNft(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovNft(uint64(l))
	}
	l = len(m.Type)
	if l > 0 {
		n += 1 + l + sovNft(uint64(l))
	}
	if m.Size_ != 0 {
		n += 1 + sovNft(uint64(m.Size_))
	}
	l = len(m.Thumbnail)
	if l > 0 {
		n += 1 + l + sovNft(uint64(l))
	}
	l = len(m.TransactionId)
	if l > 0 {
		n += 1 + l + sovNft(uint64(l))
	}
	l = len(m.Signature)
	if l > 0 {
		n += 1 + l + sovNft(uint64(l))
	}
	l = len(m.Description)
	if l > 0 {
		n += 1 + l + sovNft(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *RespUpLoad) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Code != 0 {
		n += 1 + sovNft(uint64(m.Code))
	}
	l = len(m.Message)
	if l > 0 {
		n += 1 + l + sovNft(uint64(l))
	}
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovNft(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ReqCheckDownload) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovNft(uint64(l))
	}
	l = len(m.ChainId)
	if l > 0 {
		n += 1 + l + sovNft(uint64(l))
	}
	l = len(m.Signature)
	if l > 0 {
		n += 1 + l + sovNft(uint64(l))
	}
	l = len(m.FileHash)
	if l > 0 {
		n += 1 + l + sovNft(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *RespCheckDownload) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Code != 0 {
		n += 1 + sovNft(uint64(m.Code))
	}
	l = len(m.Message)
	if l > 0 {
		n += 1 + l + sovNft(uint64(l))
	}
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovNft(uint64(l))
	}
	if m.Exists {
		n += 2
	}
	l = len(m.FileHash)
	if l > 0 {
		n += 1 + l + sovNft(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovNft(uint64(l))
	}
	l = len(m.Type)
	if l > 0 {
		n += 1 + l + sovNft(uint64(l))
	}
	if m.Size_ != 0 {
		n += 1 + sovNft(uint64(m.Size_))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ReqGetFiles) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovNft(uint64(l))
	}
	l = len(m.ChainId)
	if l > 0 {
		n += 1 + l + sovNft(uint64(l))
	}
	l = len(m.Signature)
	if l > 0 {
		n += 1 + l + sovNft(uint64(l))
	}
	if m.Start != 0 {
		n += 1 + sovNft(uint64(m.Start))
	}
	if m.Limit != 0 {
		n += 1 + sovNft(uint64(m.Limit))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *RespGetFiles) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Code != 0 {
		n += 1 + sovNft(uint64(m.Code))
	}
	l = len(m.Message)
	if l > 0 {
		n += 1 + l + sovNft(uint64(l))
	}
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovNft(uint64(l))
	}
	if m.Total != 0 {
		n += 1 + sovNft(uint64(m.Total))
	}
	if len(m.Files) > 0 {
		for _, e := range m.Files {
			l = e.Size()
			n += 1 + l + sovNft(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ReqSubscribe) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovNft(uint64(l))
	}
	l = len(m.ChainId)
	if l > 0 {
		n += 1 + l + sovNft(uint64(l))
	}
	l = len(m.Email)
	if l > 0 {
		n += 1 + l + sovNft(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *RespSubscribe) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Code != 0 {
		n += 1 + sovNft(uint64(m.Code))
	}
	l = len(m.Message)
	if l > 0 {
		n += 1 + l + sovNft(uint64(l))
	}
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovNft(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ReqStatus) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovNft(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *RespStatus) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Code != 0 {
		n += 1 + sovNft(uint64(m.Code))
	}
	l = len(m.Message)
	if l > 0 {
		n += 1 + l + sovNft(uint64(l))
	}
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovNft(uint64(l))
	}
	if m.FileCount != 0 {
		n += 1 + sovNft(uint64(m.FileCount))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovNft(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozNft(x uint64) (n int) {
	return sovNft(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *NftTab) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNft
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NftTab: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NftTab: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field tableName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNft
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNft
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthNft
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.tableName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNft
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNft
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthNft
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChainId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNft
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNft
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthNft
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ChainId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FileHash", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNft
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNft
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthNft
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FileHash = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNft
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNft
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthNft
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNft
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNft
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthNft
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Type = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Size_", wireType)
			}
			m.Size_ = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNft
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Size_ |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Thumbnail", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNft
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNft
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthNft
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Thumbnail = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TransactionId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNft
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNft
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthNft
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TransactionId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Signature", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNft
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNft
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthNft
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Signature = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Description", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNft
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNft
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthNft
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Description = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TimeCreated", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNft
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNft
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthNft
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_tron_us_protobuf_types.StdTimeUnmarshal(&m.TimeCreated, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipNft(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthNft
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthNft
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UserTab) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNft
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UserTab: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UserTab: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field tableName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNft
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNft
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthNft
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.tableName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNft
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNft
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthNft
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChainId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNft
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNft
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthNft
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ChainId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Email", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNft
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNft
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthNft
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Email = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsSubscribed", wireType)
			}
			m.IsSubscribed = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNft
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.IsSubscribed |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TimeCreated", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNft
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNft
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthNft
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_tron_us_protobuf_types.StdTimeUnmarshal(&m.TimeCreated, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipNft(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthNft
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthNft
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReqUpLoad) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNft
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReqUpLoad: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReqUpLoad: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNft
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNft
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthNft
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChainId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNft
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNft
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthNft
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ChainId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FileHash", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNft
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNft
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthNft
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FileHash = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNft
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNft
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthNft
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNft
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNft
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthNft
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Type = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Size_", wireType)
			}
			m.Size_ = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNft
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Size_ |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Thumbnail", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNft
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNft
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthNft
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Thumbnail = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TransactionId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNft
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNft
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthNft
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TransactionId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Signature", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNft
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNft
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthNft
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Signature = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Description", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNft
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNft
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthNft
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Description = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipNft(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthNft
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthNft
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RespUpLoad) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNft
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RespUpLoad: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RespUpLoad: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			m.Code = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNft
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Code |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Message", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNft
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNft
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthNft
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Message = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNft
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNft
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthNft
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipNft(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthNft
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthNft
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReqCheckDownload) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNft
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReqCheckDownload: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReqCheckDownload: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNft
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNft
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthNft
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChainId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNft
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNft
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthNft
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ChainId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Signature", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNft
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNft
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthNft
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Signature = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FileHash", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNft
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNft
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthNft
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FileHash = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipNft(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthNft
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthNft
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RespCheckDownload) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNft
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RespCheckDownload: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RespCheckDownload: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			m.Code = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNft
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Code |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Message", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNft
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNft
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthNft
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Message = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNft
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNft
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthNft
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Exists", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNft
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Exists = bool(v != 0)
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FileHash", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNft
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNft
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthNft
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FileHash = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNft
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNft
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthNft
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNft
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNft
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthNft
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Type = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Size_", wireType)
			}
			m.Size_ = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNft
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Size_ |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipNft(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthNft
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthNft
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReqGetFiles) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNft
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReqGetFiles: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReqGetFiles: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNft
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNft
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthNft
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChainId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNft
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNft
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthNft
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ChainId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Signature", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNft
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNft
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthNft
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Signature = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Start", wireType)
			}
			m.Start = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNft
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Start |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Limit", wireType)
			}
			m.Limit = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNft
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Limit |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipNft(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthNft
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthNft
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RespGetFiles) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNft
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RespGetFiles: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RespGetFiles: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			m.Code = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNft
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Code |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Message", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNft
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNft
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthNft
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Message = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNft
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNft
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthNft
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Total", wireType)
			}
			m.Total = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNft
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Total |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Files", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNft
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNft
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthNft
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Files = append(m.Files, &NftTab{})
			if err := m.Files[len(m.Files)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipNft(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthNft
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthNft
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReqSubscribe) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNft
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReqSubscribe: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReqSubscribe: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNft
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNft
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthNft
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChainId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNft
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNft
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthNft
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ChainId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Email", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNft
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNft
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthNft
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Email = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipNft(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthNft
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthNft
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RespSubscribe) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNft
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RespSubscribe: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RespSubscribe: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			m.Code = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNft
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Code |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Message", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNft
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNft
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthNft
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Message = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNft
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNft
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthNft
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipNft(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthNft
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthNft
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReqStatus) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNft
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReqStatus: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReqStatus: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNft
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNft
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthNft
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipNft(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthNft
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthNft
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RespStatus) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNft
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RespStatus: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RespStatus: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			m.Code = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNft
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Code |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Message", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNft
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNft
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthNft
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Message = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNft
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNft
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthNft
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FileCount", wireType)
			}
			m.FileCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNft
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FileCount |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipNft(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthNft
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthNft
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipNft(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowNft
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowNft
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowNft
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthNft
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupNft
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthNft
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthNft        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowNft          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupNft = fmt.Errorf("proto: unexpected end of group")
)
