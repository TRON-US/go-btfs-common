syntax = "proto3";

package nft;

// gogo plugin toggles
option (gogoproto.gogoproto_import) = true;
option (gogoproto.goproto_registration) = true;
option (gogoproto.marshaler_all) = true;
option (gogoproto.messagename_all) = true;
option (gogoproto.populate_all) = true;
option (gogoproto.sizer_all) = true;
option (gogoproto.unmarshaler_all) = true;
// golang option
option go_package = "nft";
// java options
option java_multiple_files = true;
option java_outer_classname = "NftProto";
option java_package = "io.btfs.nft";

import "github.com/tron-us/protobuf/gogoproto/gogo.proto";
import "google/protobuf/timestamp.proto";

message NftTab {
  string table_name = 1 [(gogoproto.moretags) = "pg:\"nft,alias:t,discard_unknown_columns\""];
  string address = 2;
  string chain_id = 3;
  string file_hash = 4;
  string name = 5;
  string type = 6;
  int32 size = 7;
  string thumbnail = 8;
  string transaction_id = 9;
  string signature = 10;
  string description = 11;
  google.protobuf.Timestamp time_created = 12 [
    (gogoproto.nullable) = false,
    (gogoproto.stdtime) = true
  ];
}

message UserTab {
  string table_name = 1 [(gogoproto.moretags) = "pg:\"nft_user,alias:t,discard_unknown_columns\""];
  string address = 2;
  string chain_id = 3;
  string email = 4;
  int32 is_subscribed = 5;
  google.protobuf.Timestamp time_created = 6 [
    (gogoproto.nullable) = false,
    (gogoproto.stdtime) = true
  ];
}

service NftService {
  rpc UpLoad(ReqUpLoad) returns (RespUpLoad);
  rpc CheckDownload(ReqCheckDownload) returns (RespCheckDownload);
  rpc GetFiles(ReqGetFiles) returns (RespGetFiles);
  rpc Subscribe(ReqSubscribe) returns (RespSubscribe);
  rpc Status(ReqStatus) returns (RespStatus);
}

// upload
message ReqUpLoad {
  string address = 1;
  string chain_id = 2;
  string file_hash = 3;
  string name = 4;
  string type = 5;
  int32 size = 6;
  string thumbnail = 7;
  string transaction_id = 8;
  string signature = 9;
  string description = 10;
}

message RespUpLoad {
  int32 code = 1;
  string message = 2;
  string address = 3;
}

// check download
message ReqCheckDownload {
  string address = 1;
  string chain_id = 2;
  string signature = 3;
  string file_hash = 4;
}

message RespCheckDownload {
  int32 code = 1;
  string message = 2;
  string address = 3;
  bool exists = 4;
  string file_hash = 5;
  string name = 6;
  string type = 7;
  int32 size = 8;
}

// get files
message ReqGetFiles {
  string address = 1;
  string chain_id = 2;
  string signature = 3;
  int32 start = 4;
  int32 limit = 5;
}

message RespGetFiles {
  int32 code = 1;
  string message = 2;
  string address = 3;
  int32 total = 4;
  repeated NftTab files = 5;
}

// subscribe
message ReqSubscribe {
  string address = 1;
  string chain_id = 2;
  string email = 3;
}

message RespSubscribe {
  int32 code = 1;
  string message = 2;
  string address = 3;
}

// status
message ReqStatus {
  string address = 1;
}

message RespStatus {
  int32 code = 1;
  string message = 2;
  string address = 3;
  int32 file_count = 4;
}
