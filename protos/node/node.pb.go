// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: protos/node/node.proto

package node

import (
	encoding_binary "encoding/binary"
	fmt "fmt"
	_ "github.com/gogo/protobuf/types"
	golang_proto "github.com/golang/protobuf/proto"
	guard "github.com/tron-us/go-btfs-common/protos/guard"
	_ "github.com/tron-us/protobuf/gogoproto"
	proto "github.com/tron-us/protobuf/proto"
	github_com_tron_us_protobuf_types "github.com/tron-us/protobuf/types"
	io "io"
	math "math"
	math_bits "math/bits"
	time "time"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = golang_proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf
var _ = time.Kitchen

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type ContractStat_Role int32

const (
	ContractStat_HOST     ContractStat_Role = 0
	ContractStat_RENTER   ContractStat_Role = 1
	ContractStat_RESERVED ContractStat_Role = 2
)

var ContractStat_Role_name = map[int32]string{
	0: "HOST",
	1: "RENTER",
	2: "RESERVED",
}

var ContractStat_Role_value = map[string]int32{
	"HOST":     0,
	"RENTER":   1,
	"RESERVED": 2,
}

func (x ContractStat_Role) String() string {
	return proto.EnumName(ContractStat_Role_name, int32(x))
}

func (ContractStat_Role) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_35f8e1f5ec2240a2, []int{2, 0}
}

type Node struct {
	tableName              string  `pg:"node_metrics,alias:t,discard_unknown_columns"`
	NodeId                 string  `protobuf:"bytes,2,opt,name=node_id,json=nodeId,proto3" json:"node_id,omitempty" pg:"node_id"`
	BtfsVersion            string  `protobuf:"bytes,3,opt,name=btfs_version,json=btfsVersion,proto3" json:"btfs_version,omitempty" pg:"btfs_version"`
	UpTime                 uint64  `protobuf:"varint,4,opt,name=up_time,json=upTime,proto3" json:"up_time,omitempty" pg:"up_time"`
	StorageUsed            uint64  `protobuf:"varint,5,opt,name=storage_used,json=storageUsed,proto3" json:"storage_used,omitempty" pg:"storage_used"`
	StorageVolumeCap       uint64  `protobuf:"varint,6,opt,name=storage_volume_cap,json=storageVolumeCap,proto3" json:"storage_volume_cap,omitempty" pg:"storage_volume_cap"`
	MemoryUsed             uint64  `protobuf:"varint,7,opt,name=memory_used,json=memoryUsed,proto3" json:"memory_used,omitempty" pg:"memory_used"`
	CpuUsed                float64 `protobuf:"fixed64,8,opt,name=cpu_used,json=cpuUsed,proto3" json:"cpu_used,omitempty" pg:"cpu_used"`
	Upload                 uint64  `protobuf:"varint,9,opt,name=upload,proto3" json:"upload,omitempty" pg:"upload"`
	Download               uint64  `protobuf:"varint,10,opt,name=download,proto3" json:"download,omitempty" pg:"download"`
	TotalUpload            uint64  `protobuf:"varint,11,opt,name=total_upload,json=totalUpload,proto3" json:"total_upload,omitempty" pg:"total_upload"`
	TotalDownload          uint64  `protobuf:"varint,12,opt,name=total_download,json=totalDownload,proto3" json:"total_download,omitempty" pg:"total_download"`
	StoragePriceDeal       uint64  `protobuf:"varint,13,opt,name=storage_price_deal,json=storagePriceDeal,proto3" json:"storage_price_deal,omitempty" pg:"storage_price_deal"`
	BandwidthPriceDeal     uint64  `protobuf:"varint,14,opt,name=bandwidth_price_deal,json=bandwidthPriceDeal,proto3" json:"bandwidth_price_deal,omitempty" pg:"bandwidth_price_deal"`
	Node_Settings          `protobuf:"bytes,15,opt,name=settings,proto3,embedded=settings" json:"settings" pg:"settings"`
	Reputation             float64   `protobuf:"fixed64,16,opt,name=reputation,proto3" json:"reputation,omitempty" pg:"reputation"`
	BlocksUp               uint64    `protobuf:"varint,17,opt,name=blocks_up,json=blocksUp,proto3" json:"blocks_up,omitempty" pg:"blocks_up"`
	BlocksDown             uint64    `protobuf:"varint,18,opt,name=blocks_down,json=blocksDown,proto3" json:"blocks_down,omitempty" pg:"blocks_down"`
	OsType                 string    `protobuf:"bytes,19,opt,name=os_type,json=osType,proto3" json:"os_type,omitempty" pg:"os_type"`
	ArchType               string    `protobuf:"bytes,20,opt,name=arch_type,json=archType,proto3" json:"arch_type,omitempty" pg:"arch_type"`
	CpuInfo                string    `protobuf:"bytes,21,opt,name=cpu_info,json=cpuInfo,proto3" json:"cpu_info,omitempty" pg:"cpu_info"`
	PeersConnected         uint64    `protobuf:"varint,23,opt,name=peers_connected,json=peersConnected,proto3" json:"peers_connected,omitempty" pg:"peers_connected"`
	TimeCreated            time.Time `protobuf:"bytes,24,opt,name=time_created,json=timeCreated,proto3,stdtime" json:"time_created" pg:"time_created"`
	HVal                   string    `protobuf:"bytes,25,opt,name=h_val,json=hVal,proto3" json:"h_val,omitempty" pg:"h_val"`
	Node_Geo               `protobuf:"bytes,26,opt,name=geo,proto3,embedded=geo" json:"geo" pg:"geo"`
	Node_ExperimentalFlags `protobuf:"bytes,27,opt,name=flg,proto3,embedded=flg" json:"flg" pg:"flg"`
	XXX_NoUnkeyedLiteral   struct{} `json:"-" pg:"-"`
	XXX_unrecognized       []byte   `json:"-" pg:"-"`
	XXX_sizecache          int32    `json:"-" pg:"-"`
}

func (m *Node) Reset()         { *m = Node{} }
func (m *Node) String() string { return proto.CompactTextString(m) }
func (*Node) ProtoMessage()    {}
func (*Node) Descriptor() ([]byte, []int) {
	return fileDescriptor_35f8e1f5ec2240a2, []int{0}
}
func (m *Node) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Node) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Node.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Node) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Node.Merge(m, src)
}
func (m *Node) XXX_Size() int {
	return m.Size()
}
func (m *Node) XXX_DiscardUnknown() {
	xxx_messageInfo_Node.DiscardUnknown(m)
}

var xxx_messageInfo_Node proto.InternalMessageInfo

func (m *Node) GettableName() string {
	if m != nil {
		return m.tableName
	}
	return ""
}

func (m *Node) GetNodeId() string {
	if m != nil {
		return m.NodeId
	}
	return ""
}

func (m *Node) GetBtfsVersion() string {
	if m != nil {
		return m.BtfsVersion
	}
	return ""
}

func (m *Node) GetUpTime() uint64 {
	if m != nil {
		return m.UpTime
	}
	return 0
}

func (m *Node) GetStorageUsed() uint64 {
	if m != nil {
		return m.StorageUsed
	}
	return 0
}

func (m *Node) GetStorageVolumeCap() uint64 {
	if m != nil {
		return m.StorageVolumeCap
	}
	return 0
}

func (m *Node) GetMemoryUsed() uint64 {
	if m != nil {
		return m.MemoryUsed
	}
	return 0
}

func (m *Node) GetCpuUsed() float64 {
	if m != nil {
		return m.CpuUsed
	}
	return 0
}

func (m *Node) GetUpload() uint64 {
	if m != nil {
		return m.Upload
	}
	return 0
}

func (m *Node) GetDownload() uint64 {
	if m != nil {
		return m.Download
	}
	return 0
}

func (m *Node) GetTotalUpload() uint64 {
	if m != nil {
		return m.TotalUpload
	}
	return 0
}

func (m *Node) GetTotalDownload() uint64 {
	if m != nil {
		return m.TotalDownload
	}
	return 0
}

func (m *Node) GetStoragePriceDeal() uint64 {
	if m != nil {
		return m.StoragePriceDeal
	}
	return 0
}

func (m *Node) GetBandwidthPriceDeal() uint64 {
	if m != nil {
		return m.BandwidthPriceDeal
	}
	return 0
}

func (m *Node) GetReputation() float64 {
	if m != nil {
		return m.Reputation
	}
	return 0
}

func (m *Node) GetBlocksUp() uint64 {
	if m != nil {
		return m.BlocksUp
	}
	return 0
}

func (m *Node) GetBlocksDown() uint64 {
	if m != nil {
		return m.BlocksDown
	}
	return 0
}

func (m *Node) GetOsType() string {
	if m != nil {
		return m.OsType
	}
	return ""
}

func (m *Node) GetArchType() string {
	if m != nil {
		return m.ArchType
	}
	return ""
}

func (m *Node) GetCpuInfo() string {
	if m != nil {
		return m.CpuInfo
	}
	return ""
}

func (m *Node) GetPeersConnected() uint64 {
	if m != nil {
		return m.PeersConnected
	}
	return 0
}

func (m *Node) GetTimeCreated() time.Time {
	if m != nil {
		return m.TimeCreated
	}
	return time.Time{}
}

func (m *Node) GetHVal() string {
	if m != nil {
		return m.HVal
	}
	return ""
}

func (*Node) XXX_MessageName() string {
	return "node.Node"
}

type Node_Settings struct {
	StoragePriceAsk      uint64   `protobuf:"varint,1,opt,name=storage_price_ask,json=storagePriceAsk,proto3" json:"storage_price_ask,omitempty" pg:"storage_price_ask"`
	BandwidthPriceAsk    uint64   `protobuf:"varint,2,opt,name=bandwidth_price_ask,json=bandwidthPriceAsk,proto3" json:"bandwidth_price_ask,omitempty" pg:"bandwidth_price_ask"`
	StorageTimeMin       uint64   `protobuf:"varint,3,opt,name=storage_time_min,json=storageTimeMin,proto3" json:"storage_time_min,omitempty" pg:"storage_time_min"`
	BandwidthLimit       float64  `protobuf:"fixed64,4,opt,name=bandwidth_limit,json=bandwidthLimit,proto3" json:"bandwidth_limit,omitempty" pg:"bandwidth_limit"`
	CollateralStake      uint64   `protobuf:"varint,5,opt,name=collateral_stake,json=collateralStake,proto3" json:"collateral_stake,omitempty" pg:"collateral_stake"`
	Role                 string   `protobuf:"bytes,6,opt,name=role,proto3" json:"-" pg:"-"`
	XXX_NoUnkeyedLiteral struct{} `json:"-" pg:"-"`
	XXX_unrecognized     []byte   `json:"-" pg:"-"`
	XXX_sizecache        int32    `json:"-" pg:"-"`
}

func (m *Node_Settings) Reset()         { *m = Node_Settings{} }
func (m *Node_Settings) String() string { return proto.CompactTextString(m) }
func (*Node_Settings) ProtoMessage()    {}
func (*Node_Settings) Descriptor() ([]byte, []int) {
	return fileDescriptor_35f8e1f5ec2240a2, []int{0, 0}
}
func (m *Node_Settings) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Node_Settings) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Node_Settings.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Node_Settings) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Node_Settings.Merge(m, src)
}
func (m *Node_Settings) XXX_Size() int {
	return m.Size()
}
func (m *Node_Settings) XXX_DiscardUnknown() {
	xxx_messageInfo_Node_Settings.DiscardUnknown(m)
}

var xxx_messageInfo_Node_Settings proto.InternalMessageInfo

func (m *Node_Settings) GetStoragePriceAsk() uint64 {
	if m != nil {
		return m.StoragePriceAsk
	}
	return 0
}

func (m *Node_Settings) GetBandwidthPriceAsk() uint64 {
	if m != nil {
		return m.BandwidthPriceAsk
	}
	return 0
}

func (m *Node_Settings) GetStorageTimeMin() uint64 {
	if m != nil {
		return m.StorageTimeMin
	}
	return 0
}

func (m *Node_Settings) GetBandwidthLimit() float64 {
	if m != nil {
		return m.BandwidthLimit
	}
	return 0
}

func (m *Node_Settings) GetCollateralStake() uint64 {
	if m != nil {
		return m.CollateralStake
	}
	return 0
}

func (m *Node_Settings) GetRole() string {
	if m != nil {
		return m.Role
	}
	return ""
}

func (*Node_Settings) XXX_MessageName() string {
	return "node.Node.Settings"
}

type Node_Geo struct {
	CountryShort         string   `protobuf:"bytes,1,opt,name=country_short,json=countryShort,proto3" json:"country_short,omitempty" pg:"country_short"`
	Region               string   `protobuf:"bytes,2,opt,name=region,proto3" json:"region,omitempty" pg:"region"`
	Latitude             float32  `protobuf:"fixed32,3,opt,name=latitude,proto3" json:"latitude,omitempty" pg:"latitude"`
	Longitude            float32  `protobuf:"fixed32,4,opt,name=longitude,proto3" json:"longitude,omitempty" pg:"longitude"`
	XXX_NoUnkeyedLiteral struct{} `json:"-" pg:"-"`
	XXX_unrecognized     []byte   `json:"-" pg:"-"`
	XXX_sizecache        int32    `json:"-" pg:"-"`
}

func (m *Node_Geo) Reset()         { *m = Node_Geo{} }
func (m *Node_Geo) String() string { return proto.CompactTextString(m) }
func (*Node_Geo) ProtoMessage()    {}
func (*Node_Geo) Descriptor() ([]byte, []int) {
	return fileDescriptor_35f8e1f5ec2240a2, []int{0, 1}
}
func (m *Node_Geo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Node_Geo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Node_Geo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Node_Geo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Node_Geo.Merge(m, src)
}
func (m *Node_Geo) XXX_Size() int {
	return m.Size()
}
func (m *Node_Geo) XXX_DiscardUnknown() {
	xxx_messageInfo_Node_Geo.DiscardUnknown(m)
}

var xxx_messageInfo_Node_Geo proto.InternalMessageInfo

func (m *Node_Geo) GetCountryShort() string {
	if m != nil {
		return m.CountryShort
	}
	return ""
}

func (m *Node_Geo) GetRegion() string {
	if m != nil {
		return m.Region
	}
	return ""
}

func (m *Node_Geo) GetLatitude() float32 {
	if m != nil {
		return m.Latitude
	}
	return 0
}

func (m *Node_Geo) GetLongitude() float32 {
	if m != nil {
		return m.Longitude
	}
	return 0
}

func (*Node_Geo) XXX_MessageName() string {
	return "node.Node.Geo"
}

type Node_ExperimentalFlags struct {
	Analytics            bool     `protobuf:"varint,1,opt,name=analytics,proto3" json:"analytics,omitempty" pg:"analytics"`
	FilestoreEnabled     bool     `protobuf:"varint,2,opt,name=filestore_enabled,json=filestoreEnabled,proto3" json:"filestore_enabled,omitempty" pg:"filestore_enabled"`
	HostsSyncEnabled     bool     `protobuf:"varint,3,opt,name=hosts_sync_enabled,json=hostsSyncEnabled,proto3" json:"hosts_sync_enabled,omitempty" pg:"hosts_sync_enabled"`
	HostsSyncMode        string   `protobuf:"bytes,4,opt,name=hosts_sync_mode,json=hostsSyncMode,proto3" json:"hosts_sync_mode,omitempty" pg:"hosts_sync_mode"`
	Libp2PStreamMounting bool     `protobuf:"varint,5,opt,name=libp2p_stream_mounting,json=libp2pStreamMounting,proto3" json:"libp2p_stream_mounting,omitempty" pg:"libp2p_stream_mounting"`
	P2PHttpProxy         bool     `protobuf:"varint,6,opt,name=p2p_http_proxy,json=p2pHttpProxy,proto3" json:"p2p_http_proxy,omitempty" pg:"p2p_http_proxy"`
	PreferTls            bool     `protobuf:"varint,7,opt,name=prefer_tls,json=preferTls,proto3" json:"prefer_tls,omitempty" pg:"prefer_tls"`
	Quic                 bool     `protobuf:"varint,8,opt,name=quic,proto3" json:"quic,omitempty" pg:"quic"`
	RemoveOnUnpin        bool     `protobuf:"varint,9,opt,name=remove_on_unpin,json=removeOnUnpin,proto3" json:"remove_on_unpin,omitempty" pg:"remove_on_unpin"`
	ShardingEnabled      bool     `protobuf:"varint,10,opt,name=sharding_enabled,json=shardingEnabled,proto3" json:"sharding_enabled,omitempty" pg:"sharding_enabled"`
	StorageClientEnabled bool     `protobuf:"varint,11,opt,name=storage_client_enabled,json=storageClientEnabled,proto3" json:"storage_client_enabled,omitempty" pg:"storage_client_enabled"`
	StorageHostEnabled   bool     `protobuf:"varint,12,opt,name=storage_host_enabled,json=storageHostEnabled,proto3" json:"storage_host_enabled,omitempty" pg:"storage_host_enabled"`
	StrategicProviding   bool     `protobuf:"varint,13,opt,name=strategic_providing,json=strategicProviding,proto3" json:"strategic_providing,omitempty" pg:"strategic_providing"`
	UrlStoreEnabled      bool     `protobuf:"varint,14,opt,name=url_store_enabled,json=urlStoreEnabled,proto3" json:"url_store_enabled,omitempty" pg:"url_store_enabled"`
	DisableAutoUpdate    bool     `protobuf:"varint,15,opt,name=disable_auto_update,json=disableAutoUpdate,proto3" json:"disable_auto_update,omitempty" pg:"disable_auto_update"`
	GraphsyncEnabled     bool     `protobuf:"varint,16,opt,name=graphsync_enabled,json=graphsyncEnabled,proto3" json:"graphsync_enabled,omitempty" pg:"graphsync_enabled"`
	XXX_NoUnkeyedLiteral struct{} `json:"-" pg:"-"`
	XXX_unrecognized     []byte   `json:"-" pg:"-"`
	XXX_sizecache        int32    `json:"-" pg:"-"`
}

func (m *Node_ExperimentalFlags) Reset()         { *m = Node_ExperimentalFlags{} }
func (m *Node_ExperimentalFlags) String() string { return proto.CompactTextString(m) }
func (*Node_ExperimentalFlags) ProtoMessage()    {}
func (*Node_ExperimentalFlags) Descriptor() ([]byte, []int) {
	return fileDescriptor_35f8e1f5ec2240a2, []int{0, 2}
}
func (m *Node_ExperimentalFlags) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Node_ExperimentalFlags) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Node_ExperimentalFlags.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Node_ExperimentalFlags) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Node_ExperimentalFlags.Merge(m, src)
}
func (m *Node_ExperimentalFlags) XXX_Size() int {
	return m.Size()
}
func (m *Node_ExperimentalFlags) XXX_DiscardUnknown() {
	xxx_messageInfo_Node_ExperimentalFlags.DiscardUnknown(m)
}

var xxx_messageInfo_Node_ExperimentalFlags proto.InternalMessageInfo

func (m *Node_ExperimentalFlags) GetAnalytics() bool {
	if m != nil {
		return m.Analytics
	}
	return false
}

func (m *Node_ExperimentalFlags) GetFilestoreEnabled() bool {
	if m != nil {
		return m.FilestoreEnabled
	}
	return false
}

func (m *Node_ExperimentalFlags) GetHostsSyncEnabled() bool {
	if m != nil {
		return m.HostsSyncEnabled
	}
	return false
}

func (m *Node_ExperimentalFlags) GetHostsSyncMode() string {
	if m != nil {
		return m.HostsSyncMode
	}
	return ""
}

func (m *Node_ExperimentalFlags) GetLibp2PStreamMounting() bool {
	if m != nil {
		return m.Libp2PStreamMounting
	}
	return false
}

func (m *Node_ExperimentalFlags) GetP2PHttpProxy() bool {
	if m != nil {
		return m.P2PHttpProxy
	}
	return false
}

func (m *Node_ExperimentalFlags) GetPreferTls() bool {
	if m != nil {
		return m.PreferTls
	}
	return false
}

func (m *Node_ExperimentalFlags) GetQuic() bool {
	if m != nil {
		return m.Quic
	}
	return false
}

func (m *Node_ExperimentalFlags) GetRemoveOnUnpin() bool {
	if m != nil {
		return m.RemoveOnUnpin
	}
	return false
}

func (m *Node_ExperimentalFlags) GetShardingEnabled() bool {
	if m != nil {
		return m.ShardingEnabled
	}
	return false
}

func (m *Node_ExperimentalFlags) GetStorageClientEnabled() bool {
	if m != nil {
		return m.StorageClientEnabled
	}
	return false
}

func (m *Node_ExperimentalFlags) GetStorageHostEnabled() bool {
	if m != nil {
		return m.StorageHostEnabled
	}
	return false
}

func (m *Node_ExperimentalFlags) GetStrategicProviding() bool {
	if m != nil {
		return m.StrategicProviding
	}
	return false
}

func (m *Node_ExperimentalFlags) GetUrlStoreEnabled() bool {
	if m != nil {
		return m.UrlStoreEnabled
	}
	return false
}

func (m *Node_ExperimentalFlags) GetDisableAutoUpdate() bool {
	if m != nil {
		return m.DisableAutoUpdate
	}
	return false
}

func (m *Node_ExperimentalFlags) GetGraphsyncEnabled() bool {
	if m != nil {
		return m.GraphsyncEnabled
	}
	return false
}

func (*Node_ExperimentalFlags) XXX_MessageName() string {
	return "node.Node.ExperimentalFlags"
}

type StorageStat struct {
	HostStats            StorageStat_Host   `protobuf:"bytes,1,opt,name=host_stats,json=hostStats,proto3" json:"host_stats" pg:"host_stats"`
	RenterStats          StorageStat_Renter `protobuf:"bytes,2,opt,name=renter_stats,json=renterStats,proto3" json:"renter_stats" pg:"renter_stats"`
	XXX_NoUnkeyedLiteral struct{}           `json:"-" pg:"-"`
	XXX_unrecognized     []byte             `json:"-" pg:"-"`
	XXX_sizecache        int32              `json:"-" pg:"-"`
}

func (m *StorageStat) Reset()         { *m = StorageStat{} }
func (m *StorageStat) String() string { return proto.CompactTextString(m) }
func (*StorageStat) ProtoMessage()    {}
func (*StorageStat) Descriptor() ([]byte, []int) {
	return fileDescriptor_35f8e1f5ec2240a2, []int{1}
}
func (m *StorageStat) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *StorageStat) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_StorageStat.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *StorageStat) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StorageStat.Merge(m, src)
}
func (m *StorageStat) XXX_Size() int {
	return m.Size()
}
func (m *StorageStat) XXX_DiscardUnknown() {
	xxx_messageInfo_StorageStat.DiscardUnknown(m)
}

var xxx_messageInfo_StorageStat proto.InternalMessageInfo

func (m *StorageStat) GetHostStats() StorageStat_Host {
	if m != nil {
		return m.HostStats
	}
	return StorageStat_Host{}
}

func (m *StorageStat) GetRenterStats() StorageStat_Renter {
	if m != nil {
		return m.RenterStats
	}
	return StorageStat_Renter{}
}

func (*StorageStat) XXX_MessageName() string {
	return "node.StorageStat"
}

type StorageStat_Host struct {
	Online               bool     `protobuf:"varint,1,opt,name=online,proto3" json:"online" pg:"online"`
	Uptime               float32  `protobuf:"fixed32,2,opt,name=uptime,proto3" json:"uptime" pg:"uptime"`
	Score                float32  `protobuf:"fixed32,3,opt,name=score,proto3" json:"score" pg:"score"`
	StorageUsed          int64    `protobuf:"varint,4,opt,name=storage_used,json=storageUsed,proto3" json:"storage_used" pg:"storage_used"`
	StorageCap           int64    `protobuf:"varint,5,opt,name=storage_cap,json=storageCap,proto3" json:"storage_cap" pg:"storage_cap"`
	StorageDiskTotal     int64    `protobuf:"varint,6,opt,name=storage_disk_total,json=storageDiskTotal,proto3" json:"storage_disk_total" pg:"storage_disk_total"`
	StorageDiskAvailable int64    `protobuf:"varint,7,opt,name=storage_disk_available,json=storageDiskAvailable,proto3" json:"storage_disk_available" pg:"storage_disk_available"`
	XXX_NoUnkeyedLiteral struct{} `json:"-" pg:"-"`
	XXX_unrecognized     []byte   `json:"-" pg:"-"`
	XXX_sizecache        int32    `json:"-" pg:"-"`
}

func (m *StorageStat_Host) Reset()         { *m = StorageStat_Host{} }
func (m *StorageStat_Host) String() string { return proto.CompactTextString(m) }
func (*StorageStat_Host) ProtoMessage()    {}
func (*StorageStat_Host) Descriptor() ([]byte, []int) {
	return fileDescriptor_35f8e1f5ec2240a2, []int{1, 0}
}
func (m *StorageStat_Host) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *StorageStat_Host) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_StorageStat_Host.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *StorageStat_Host) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StorageStat_Host.Merge(m, src)
}
func (m *StorageStat_Host) XXX_Size() int {
	return m.Size()
}
func (m *StorageStat_Host) XXX_DiscardUnknown() {
	xxx_messageInfo_StorageStat_Host.DiscardUnknown(m)
}

var xxx_messageInfo_StorageStat_Host proto.InternalMessageInfo

func (m *StorageStat_Host) GetOnline() bool {
	if m != nil {
		return m.Online
	}
	return false
}

func (m *StorageStat_Host) GetUptime() float32 {
	if m != nil {
		return m.Uptime
	}
	return 0
}

func (m *StorageStat_Host) GetScore() float32 {
	if m != nil {
		return m.Score
	}
	return 0
}

func (m *StorageStat_Host) GetStorageUsed() int64 {
	if m != nil {
		return m.StorageUsed
	}
	return 0
}

func (m *StorageStat_Host) GetStorageCap() int64 {
	if m != nil {
		return m.StorageCap
	}
	return 0
}

func (m *StorageStat_Host) GetStorageDiskTotal() int64 {
	if m != nil {
		return m.StorageDiskTotal
	}
	return 0
}

func (m *StorageStat_Host) GetStorageDiskAvailable() int64 {
	if m != nil {
		return m.StorageDiskAvailable
	}
	return 0
}

func (*StorageStat_Host) XXX_MessageName() string {
	return "node.StorageStat.Host"
}

type StorageStat_Renter struct {
	Reserved             string   `protobuf:"bytes,1,opt,name=reserved,proto3" json:"reserved" pg:"reserved"`
	XXX_NoUnkeyedLiteral struct{} `json:"-" pg:"-"`
	XXX_unrecognized     []byte   `json:"-" pg:"-"`
	XXX_sizecache        int32    `json:"-" pg:"-"`
}

func (m *StorageStat_Renter) Reset()         { *m = StorageStat_Renter{} }
func (m *StorageStat_Renter) String() string { return proto.CompactTextString(m) }
func (*StorageStat_Renter) ProtoMessage()    {}
func (*StorageStat_Renter) Descriptor() ([]byte, []int) {
	return fileDescriptor_35f8e1f5ec2240a2, []int{1, 1}
}
func (m *StorageStat_Renter) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *StorageStat_Renter) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_StorageStat_Renter.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *StorageStat_Renter) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StorageStat_Renter.Merge(m, src)
}
func (m *StorageStat_Renter) XXX_Size() int {
	return m.Size()
}
func (m *StorageStat_Renter) XXX_DiscardUnknown() {
	xxx_messageInfo_StorageStat_Renter.DiscardUnknown(m)
}

var xxx_messageInfo_StorageStat_Renter proto.InternalMessageInfo

func (m *StorageStat_Renter) GetReserved() string {
	if m != nil {
		return m.Reserved
	}
	return ""
}

func (*StorageStat_Renter) XXX_MessageName() string {
	return "node.StorageStat.Renter"
}

type ContractStat struct {
	ActiveContractNum       int64             `protobuf:"varint,1,opt,name=active_contract_num,json=activeContractNum,proto3" json:"active_contract_num" pg:"active_contract_num"`
	CompensationPaid        int64             `protobuf:"varint,2,opt,name=compensation_paid,json=compensationPaid,proto3" json:"compensation_paid" pg:"compensation_paid"`
	CompensationOutstanding int64             `protobuf:"varint,3,opt,name=compensation_outstanding,json=compensationOutstanding,proto3" json:"compensation_outstanding" pg:"compensation_outstanding"`
	FirstContractStart      time.Time         `protobuf:"bytes,4,opt,name=first_contract_start,json=firstContractStart,proto3,stdtime" json:"first_contract_start" pg:"first_contract_start"`
	LastContractEnd         time.Time         `protobuf:"bytes,5,opt,name=last_contract_end,json=lastContractEnd,proto3,stdtime" json:"last_contract_end" pg:"last_contract_end"`
	Role                    ContractStat_Role `protobuf:"varint,6,opt,name=role,proto3,enum=node.ContractStat_Role" json:"role" pg:"role"`
	XXX_NoUnkeyedLiteral    struct{}          `json:"-" pg:"-"`
	XXX_unrecognized        []byte            `json:"-" pg:"-"`
	XXX_sizecache           int32             `json:"-" pg:"-"`
}

func (m *ContractStat) Reset()         { *m = ContractStat{} }
func (m *ContractStat) String() string { return proto.CompactTextString(m) }
func (*ContractStat) ProtoMessage()    {}
func (*ContractStat) Descriptor() ([]byte, []int) {
	return fileDescriptor_35f8e1f5ec2240a2, []int{2}
}
func (m *ContractStat) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ContractStat) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ContractStat.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ContractStat) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ContractStat.Merge(m, src)
}
func (m *ContractStat) XXX_Size() int {
	return m.Size()
}
func (m *ContractStat) XXX_DiscardUnknown() {
	xxx_messageInfo_ContractStat.DiscardUnknown(m)
}

var xxx_messageInfo_ContractStat proto.InternalMessageInfo

func (m *ContractStat) GetActiveContractNum() int64 {
	if m != nil {
		return m.ActiveContractNum
	}
	return 0
}

func (m *ContractStat) GetCompensationPaid() int64 {
	if m != nil {
		return m.CompensationPaid
	}
	return 0
}

func (m *ContractStat) GetCompensationOutstanding() int64 {
	if m != nil {
		return m.CompensationOutstanding
	}
	return 0
}

func (m *ContractStat) GetFirstContractStart() time.Time {
	if m != nil {
		return m.FirstContractStart
	}
	return time.Time{}
}

func (m *ContractStat) GetLastContractEnd() time.Time {
	if m != nil {
		return m.LastContractEnd
	}
	return time.Time{}
}

func (m *ContractStat) GetRole() ContractStat_Role {
	if m != nil {
		return m.Role
	}
	return ContractStat_HOST
}

func (*ContractStat) XXX_MessageName() string {
	return "node.ContractStat"
}

type Contracts struct {
	Contracts            []*Contracts_Contract `protobuf:"bytes,1,rep,name=contracts,proto3" json:"contracts" pg:"contracts"`
	XXX_NoUnkeyedLiteral struct{}              `json:"-" pg:"-"`
	XXX_unrecognized     []byte                `json:"-" pg:"-"`
	XXX_sizecache        int32                 `json:"-" pg:"-"`
}

func (m *Contracts) Reset()         { *m = Contracts{} }
func (m *Contracts) String() string { return proto.CompactTextString(m) }
func (*Contracts) ProtoMessage()    {}
func (*Contracts) Descriptor() ([]byte, []int) {
	return fileDescriptor_35f8e1f5ec2240a2, []int{3}
}
func (m *Contracts) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Contracts) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Contracts.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Contracts) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Contracts.Merge(m, src)
}
func (m *Contracts) XXX_Size() int {
	return m.Size()
}
func (m *Contracts) XXX_DiscardUnknown() {
	xxx_messageInfo_Contracts.DiscardUnknown(m)
}

var xxx_messageInfo_Contracts proto.InternalMessageInfo

func (m *Contracts) GetContracts() []*Contracts_Contract {
	if m != nil {
		return m.Contracts
	}
	return nil
}

func (*Contracts) XXX_MessageName() string {
	return "node.Contracts"
}

type Contracts_Contract struct {
	ContractId              string                       `protobuf:"bytes,1,opt,name=contract_id,json=contractId,proto3" json:"contract_id" pg:"contract_id"`
	HostId                  string                       `protobuf:"bytes,2,opt,name=host_id,json=hostId,proto3" json:"host_id" pg:"host_id"`
	RenterId                string                       `protobuf:"bytes,3,opt,name=renter_id,json=renterId,proto3" json:"renter_id" pg:"renter_id"`
	Status                  guard.Contract_ContractState `protobuf:"varint,4,opt,name=status,proto3,enum=guard.Contract_ContractState" json:"status" pg:"status"`
	StartTime               time.Time                    `protobuf:"bytes,5,opt,name=start_time,json=startTime,proto3,stdtime" json:"start_time" pg:"start_time"`
	EndTime                 time.Time                    `protobuf:"bytes,6,opt,name=end_time,json=endTime,proto3,stdtime" json:"end_time" pg:"end_time"`
	NextEscrowTime          time.Time                    `protobuf:"bytes,7,opt,name=next_escrow_time,json=nextEscrowTime,proto3,stdtime" json:"next_escrow_time" pg:"next_escrow_time"`
	CompensationPaid        int64                        `protobuf:"varint,8,opt,name=compensation_paid,json=compensationPaid,proto3" json:"compensation_paid" pg:"compensation_paid"`
	CompensationOutstanding int64                        `protobuf:"varint,9,opt,name=compensation_outstanding,json=compensationOutstanding,proto3" json:"compensation_outstanding" pg:"compensation_outstanding"`
	UnitPrice               int64                        `protobuf:"varint,10,opt,name=unit_price,json=unitPrice,proto3" json:"unit_price" pg:"unit_price"`
	ShardSize               int64                        `protobuf:"varint,11,opt,name=shard_size,json=shardSize,proto3" json:"shard_size" pg:"shard_size"`
	ShardHash               string                       `protobuf:"bytes,12,opt,name=shard_hash,json=shardHash,proto3" json:"shard_hash" pg:"shard_hash"`
	FileHash                string                       `protobuf:"bytes,13,opt,name=file_hash,json=fileHash,proto3" json:"file_hash" pg:"file_hash"`
	XXX_NoUnkeyedLiteral    struct{}                     `json:"-" pg:"-"`
	XXX_unrecognized        []byte                       `json:"-" pg:"-"`
	XXX_sizecache           int32                        `json:"-" pg:"-"`
}

func (m *Contracts_Contract) Reset()         { *m = Contracts_Contract{} }
func (m *Contracts_Contract) String() string { return proto.CompactTextString(m) }
func (*Contracts_Contract) ProtoMessage()    {}
func (*Contracts_Contract) Descriptor() ([]byte, []int) {
	return fileDescriptor_35f8e1f5ec2240a2, []int{3, 0}
}
func (m *Contracts_Contract) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Contracts_Contract) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Contracts_Contract.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Contracts_Contract) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Contracts_Contract.Merge(m, src)
}
func (m *Contracts_Contract) XXX_Size() int {
	return m.Size()
}
func (m *Contracts_Contract) XXX_DiscardUnknown() {
	xxx_messageInfo_Contracts_Contract.DiscardUnknown(m)
}

var xxx_messageInfo_Contracts_Contract proto.InternalMessageInfo

func (m *Contracts_Contract) GetContractId() string {
	if m != nil {
		return m.ContractId
	}
	return ""
}

func (m *Contracts_Contract) GetHostId() string {
	if m != nil {
		return m.HostId
	}
	return ""
}

func (m *Contracts_Contract) GetRenterId() string {
	if m != nil {
		return m.RenterId
	}
	return ""
}

func (m *Contracts_Contract) GetStatus() guard.Contract_ContractState {
	if m != nil {
		return m.Status
	}
	return guard.Contract_DRAFT
}

func (m *Contracts_Contract) GetStartTime() time.Time {
	if m != nil {
		return m.StartTime
	}
	return time.Time{}
}

func (m *Contracts_Contract) GetEndTime() time.Time {
	if m != nil {
		return m.EndTime
	}
	return time.Time{}
}

func (m *Contracts_Contract) GetNextEscrowTime() time.Time {
	if m != nil {
		return m.NextEscrowTime
	}
	return time.Time{}
}

func (m *Contracts_Contract) GetCompensationPaid() int64 {
	if m != nil {
		return m.CompensationPaid
	}
	return 0
}

func (m *Contracts_Contract) GetCompensationOutstanding() int64 {
	if m != nil {
		return m.CompensationOutstanding
	}
	return 0
}

func (m *Contracts_Contract) GetUnitPrice() int64 {
	if m != nil {
		return m.UnitPrice
	}
	return 0
}

func (m *Contracts_Contract) GetShardSize() int64 {
	if m != nil {
		return m.ShardSize
	}
	return 0
}

func (m *Contracts_Contract) GetShardHash() string {
	if m != nil {
		return m.ShardHash
	}
	return ""
}

func (m *Contracts_Contract) GetFileHash() string {
	if m != nil {
		return m.FileHash
	}
	return ""
}

func (*Contracts_Contract) XXX_MessageName() string {
	return "node.Contracts.Contract"
}
func init() {
	proto.RegisterEnum("node.ContractStat_Role", ContractStat_Role_name, ContractStat_Role_value)
	golang_proto.RegisterEnum("node.ContractStat_Role", ContractStat_Role_name, ContractStat_Role_value)
	proto.RegisterType((*Node)(nil), "node.Node")
	golang_proto.RegisterType((*Node)(nil), "node.Node")
	proto.RegisterType((*Node_Settings)(nil), "node.Node.Settings")
	golang_proto.RegisterType((*Node_Settings)(nil), "node.Node.Settings")
	proto.RegisterType((*Node_Geo)(nil), "node.Node.Geo")
	golang_proto.RegisterType((*Node_Geo)(nil), "node.Node.Geo")
	proto.RegisterType((*Node_ExperimentalFlags)(nil), "node.Node.ExperimentalFlags")
	golang_proto.RegisterType((*Node_ExperimentalFlags)(nil), "node.Node.ExperimentalFlags")
	proto.RegisterType((*StorageStat)(nil), "node.StorageStat")
	golang_proto.RegisterType((*StorageStat)(nil), "node.StorageStat")
	proto.RegisterType((*StorageStat_Host)(nil), "node.StorageStat.Host")
	golang_proto.RegisterType((*StorageStat_Host)(nil), "node.StorageStat.Host")
	proto.RegisterType((*StorageStat_Renter)(nil), "node.StorageStat.Renter")
	golang_proto.RegisterType((*StorageStat_Renter)(nil), "node.StorageStat.Renter")
	proto.RegisterType((*ContractStat)(nil), "node.ContractStat")
	golang_proto.RegisterType((*ContractStat)(nil), "node.ContractStat")
	proto.RegisterType((*Contracts)(nil), "node.Contracts")
	golang_proto.RegisterType((*Contracts)(nil), "node.Contracts")
	proto.RegisterType((*Contracts_Contract)(nil), "node.Contracts.Contract")
	golang_proto.RegisterType((*Contracts_Contract)(nil), "node.Contracts.Contract")
}

func init() { proto.RegisterFile("protos/node/node.proto", fileDescriptor_35f8e1f5ec2240a2) }
func init() { golang_proto.RegisterFile("protos/node/node.proto", fileDescriptor_35f8e1f5ec2240a2) }

var fileDescriptor_35f8e1f5ec2240a2 = []byte{
	// 1837 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x57, 0xcf, 0x73, 0x1b, 0x49,
	0xf5, 0xdf, 0xb1, 0x64, 0x67, 0xd4, 0x92, 0x65, 0xb9, 0xed, 0xaf, 0x33, 0xd1, 0x6e, 0xec, 0x7c,
	0xcd, 0x2f, 0x93, 0x4d, 0xe4, 0x60, 0x76, 0x29, 0x36, 0x14, 0x45, 0xc5, 0x8e, 0x49, 0x5c, 0x45,
	0x1c, 0xd7, 0xc8, 0xf6, 0x81, 0xcb, 0x54, 0x7b, 0xa6, 0x2d, 0x75, 0x79, 0xa6, 0x7b, 0xe8, 0xee,
	0x71, 0xe2, 0x2d, 0xfe, 0x08, 0x8e, 0x1c, 0xa9, 0xfd, 0x03, 0xe0, 0xca, 0x81, 0x03, 0xc7, 0x1c,
	0xf7, 0xc4, 0x31, 0x40, 0x72, 0xe3, 0xc8, 0x89, 0xe2, 0x02, 0xf5, 0x5e, 0xcf, 0x8c, 0xc6, 0x64,
	0x8b, 0xda, 0x70, 0x51, 0xa9, 0x3f, 0x9f, 0xcf, 0x7b, 0xea, 0x7e, 0xbf, 0xba, 0x45, 0xd6, 0x72,
	0xad, 0xac, 0x32, 0xdb, 0x52, 0x25, 0x1c, 0x3f, 0x46, 0x08, 0xd0, 0x36, 0x7c, 0x1f, 0x3e, 0x9c,
	0x08, 0x3b, 0x2d, 0xce, 0x46, 0xb1, 0xca, 0xb6, 0xad, 0x56, 0xf2, 0x7e, 0x61, 0xb6, 0x27, 0xea,
	0xfe, 0x99, 0x3d, 0x37, 0xf7, 0x63, 0x95, 0x65, 0x4a, 0x6e, 0x97, 0xf6, 0x93, 0x82, 0xe9, 0xc4,
	0x7d, 0x3a, 0x0f, 0xc3, 0x07, 0x5f, 0x61, 0x8b, 0xcc, 0x59, 0x71, 0xbe, 0x3d, 0x51, 0x13, 0x85,
	0x0b, 0xfc, 0x56, 0x5a, 0x6c, 0x4c, 0x94, 0x9a, 0xa4, 0x7c, 0xa6, 0xb2, 0x22, 0xe3, 0xc6, 0xb2,
	0x2c, 0x77, 0x82, 0xcd, 0xdf, 0x0e, 0x48, 0xfb, 0x50, 0x25, 0x9c, 0x1e, 0x13, 0x62, 0xd9, 0x59,
	0xca, 0x23, 0xc9, 0x32, 0x1e, 0x78, 0x77, 0xbc, 0xad, 0xce, 0xee, 0xa7, 0x7f, 0x7f, 0xbd, 0xf1,
	0xbd, 0x7c, 0xf2, 0x70, 0x13, 0x76, 0x1e, 0x65, 0xdc, 0x6a, 0x11, 0x9b, 0x7b, 0x2c, 0x15, 0xcc,
	0x3c, 0xb4, 0xf7, 0x12, 0x61, 0x62, 0xa6, 0x93, 0xa8, 0x90, 0x17, 0x52, 0xbd, 0x90, 0x51, 0xac,
	0xd2, 0x22, 0x93, 0x66, 0x33, 0xec, 0xa0, 0xa3, 0x43, 0x96, 0x71, 0x7a, 0x93, 0xdc, 0x40, 0x5b,
	0x91, 0x04, 0x73, 0xe0, 0x32, 0x5c, 0x80, 0xe5, 0x41, 0x42, 0xff, 0x9f, 0xf4, 0xe0, 0xc8, 0xd1,
	0x25, 0xd7, 0x46, 0x28, 0x19, 0xb4, 0x90, 0xed, 0x02, 0x76, 0xea, 0x20, 0xb0, 0x2d, 0xf2, 0x08,
	0x36, 0x1c, 0xb4, 0xef, 0x78, 0x5b, 0xed, 0x70, 0xa1, 0xc8, 0x8f, 0x45, 0xc6, 0xc1, 0xd6, 0x58,
	0xa5, 0xd9, 0x84, 0x47, 0x85, 0xe1, 0x49, 0x30, 0x8f, 0x6c, 0xb7, 0xc4, 0x4e, 0x0c, 0x4f, 0xe8,
	0x3d, 0x42, 0x2b, 0xc9, 0x25, 0x6c, 0x8b, 0x47, 0x31, 0xcb, 0x83, 0x05, 0x14, 0x0e, 0x4a, 0xe6,
	0x14, 0x89, 0x3d, 0x96, 0xd3, 0x0d, 0xd2, 0xcd, 0x78, 0xa6, 0xf4, 0x95, 0xf3, 0x77, 0x03, 0x65,
	0xc4, 0x41, 0xe8, 0xee, 0x16, 0xf1, 0xe3, 0xbc, 0x70, 0xac, 0x7f, 0xc7, 0xdb, 0xf2, 0xc2, 0x1b,
	0x71, 0x5e, 0x20, 0xb5, 0x46, 0x16, 0x8a, 0x3c, 0x55, 0x2c, 0x09, 0x3a, 0xd5, 0x26, 0x61, 0x45,
	0x87, 0xc4, 0x4f, 0xd4, 0x0b, 0x89, 0x0c, 0x41, 0xa6, 0x5e, 0xc3, 0x01, 0xac, 0xb2, 0x2c, 0x8d,
	0x4a, 0xcb, 0xae, 0x3b, 0x00, 0x62, 0x27, 0xce, 0xfc, 0x5b, 0xa4, 0xef, 0x24, 0xb5, 0x93, 0x1e,
	0x8a, 0x16, 0x11, 0x7d, 0x5c, 0x79, 0x6a, 0x9c, 0x33, 0xd7, 0x22, 0xe6, 0x51, 0xc2, 0x59, 0x1a,
	0x2c, 0x5e, 0x3b, 0xe7, 0x11, 0x10, 0x8f, 0x39, 0x4b, 0xe9, 0x03, 0xb2, 0x7a, 0xc6, 0x64, 0xf2,
	0x42, 0x24, 0x76, 0xda, 0xd4, 0xf7, 0x51, 0x4f, 0x6b, 0x6e, 0x66, 0xf1, 0x19, 0xf1, 0x0d, 0xb7,
	0x56, 0xc8, 0x89, 0x09, 0x96, 0xee, 0x78, 0x5b, 0xdd, 0x9d, 0x95, 0x11, 0x96, 0x34, 0xd4, 0xcc,
	0x68, 0x5c, 0x52, 0xbb, 0xfe, 0xab, 0xd7, 0x1b, 0x1f, 0x7c, 0xf9, 0x7a, 0xc3, 0x0b, 0x6b, 0x39,
	0x5d, 0x27, 0x44, 0xf3, 0xbc, 0xb0, 0xcc, 0x42, 0x7e, 0x07, 0x18, 0xb5, 0x06, 0x42, 0x3f, 0x24,
	0x9d, 0xb3, 0x54, 0xc5, 0x17, 0x26, 0x2a, 0xf2, 0x60, 0xd9, 0x45, 0xc8, 0x01, 0x27, 0x98, 0x91,
	0x92, 0x84, 0xf3, 0x07, 0xd4, 0x65, 0xc4, 0x41, 0x70, 0x78, 0x28, 0x0e, 0x65, 0x22, 0x7b, 0x95,
	0xf3, 0x60, 0xc5, 0x15, 0x96, 0x32, 0xc7, 0x57, 0x39, 0x07, 0xb7, 0x4c, 0xc7, 0x53, 0x47, 0xad,
	0x22, 0xe5, 0x03, 0x80, 0x64, 0x99, 0x47, 0x21, 0xcf, 0x55, 0xf0, 0x7f, 0xc8, 0x41, 0x1e, 0x0f,
	0xe4, 0xb9, 0xa2, 0xdf, 0x21, 0x4b, 0x39, 0xe7, 0xda, 0x44, 0xb1, 0x92, 0x92, 0xc7, 0x96, 0x27,
	0xc1, 0x4d, 0xfc, 0xd5, 0x3e, 0xc2, 0x7b, 0x15, 0x4a, 0x9f, 0x90, 0x1e, 0xd4, 0x64, 0x14, 0x6b,
	0xce, 0x40, 0x15, 0x60, 0x58, 0x86, 0x23, 0xd7, 0x69, 0xa3, 0xaa, 0xd3, 0x46, 0xc7, 0x55, 0xa7,
	0xb9, 0xe8, 0xfc, 0xea, 0xcf, 0x1b, 0x5e, 0xd8, 0x05, 0xcb, 0x3d, 0x67, 0x48, 0x57, 0xc8, 0xfc,
	0x34, 0xba, 0x64, 0x69, 0x70, 0x0b, 0x77, 0xd2, 0x9e, 0x9e, 0xb2, 0x94, 0xde, 0x25, 0xad, 0x09,
	0x57, 0xc1, 0x10, 0x9d, 0xf6, 0x1b, 0xb1, 0x7e, 0xc2, 0x55, 0x23, 0xcc, 0x20, 0xa2, 0x3f, 0x24,
	0xad, 0xf3, 0x74, 0x12, 0x7c, 0x88, 0xda, 0x8f, 0x1a, 0xda, 0xfd, 0x97, 0x39, 0xd7, 0x22, 0xe3,
	0xd2, 0xb2, 0xf4, 0xa7, 0x29, 0xbb, 0x96, 0x20, 0x30, 0x19, 0xfe, 0xcb, 0x23, 0x7e, 0x95, 0x3c,
	0x7a, 0x97, 0x2c, 0x5f, 0xaf, 0x21, 0x66, 0x2e, 0x70, 0x00, 0xb4, 0xc3, 0xa5, 0x66, 0x09, 0x3d,
	0x32, 0x17, 0x74, 0x44, 0x56, 0xfe, 0xb3, 0x82, 0x40, 0x3d, 0x87, 0xea, 0xe5, 0xeb, 0x05, 0x04,
	0xfa, 0x2d, 0x52, 0x55, 0x21, 0x36, 0x72, 0x94, 0x09, 0xd7, 0xea, 0xed, 0xb0, 0x5f, 0xe2, 0x10,
	0xa6, 0x67, 0x42, 0x42, 0xfc, 0x67, 0x9e, 0x53, 0x91, 0x09, 0x8b, 0x5d, 0xef, 0x85, 0xfd, 0x1a,
	0xfe, 0x19, 0xa0, 0xf4, 0xbb, 0x64, 0x10, 0xab, 0x34, 0x65, 0x96, 0x6b, 0x96, 0x46, 0xc6, 0xb2,
	0x0b, 0x5e, 0x4e, 0x80, 0xa5, 0x19, 0x3e, 0x06, 0x98, 0xde, 0x22, 0x6d, 0xad, 0x52, 0x8e, 0x7d,
	0xdf, 0xd9, 0x9d, 0xff, 0xdb, 0xeb, 0x0d, 0xef, 0x7e, 0x88, 0xd0, 0xf0, 0x97, 0xa4, 0xf5, 0x84,
	0x2b, 0xfa, 0x0d, 0xb2, 0x18, 0xab, 0x42, 0x5a, 0x7d, 0x15, 0x99, 0xa9, 0xd2, 0xd6, 0x0d, 0xbe,
	0xb0, 0x57, 0x82, 0x63, 0xc0, 0xa0, 0xc5, 0x35, 0x9f, 0x40, 0x15, 0x97, 0x33, 0xcc, 0xad, 0xa0,
	0xc5, 0x53, 0x66, 0x85, 0x2d, 0x12, 0x8e, 0x87, 0x9a, 0x0b, 0xeb, 0x35, 0xfd, 0x88, 0x74, 0x52,
	0x25, 0x27, 0x8e, 0x6c, 0x23, 0x39, 0x03, 0x86, 0xbf, 0x9f, 0x27, 0xcb, 0xef, 0x24, 0x09, 0x6c,
	0x98, 0x64, 0xe9, 0x95, 0x15, 0xb1, 0xc1, 0x8d, 0xf8, 0xe1, 0x0c, 0xa0, 0x1f, 0x93, 0xe5, 0x73,
	0x91, 0x72, 0x08, 0x1b, 0x8f, 0xb8, 0x84, 0x11, 0xeb, 0x86, 0xaa, 0x1f, 0x0e, 0x6a, 0x62, 0xdf,
	0xe1, 0x30, 0x17, 0xa6, 0xca, 0x58, 0x13, 0x99, 0x2b, 0x19, 0xd7, 0xea, 0x96, 0x53, 0x23, 0x33,
	0xbe, 0x92, 0x71, 0xa5, 0xfe, 0x36, 0x59, 0x6a, 0xa8, 0x33, 0x55, 0x6e, 0xb9, 0x13, 0x2e, 0xd6,
	0xd2, 0x67, 0x70, 0x47, 0x7c, 0x42, 0xd6, 0x52, 0x71, 0x96, 0xef, 0xe4, 0x91, 0xb1, 0x9a, 0xb3,
	0x2c, 0xca, 0x20, 0x4c, 0x42, 0x4e, 0x30, 0x01, 0x7e, 0xb8, 0xea, 0xd8, 0x31, 0x92, 0xcf, 0x4a,
	0x8e, 0x7e, 0x93, 0xf4, 0xc1, 0x64, 0x6a, 0x6d, 0x1e, 0xe5, 0x5a, 0xbd, 0xbc, 0xc2, 0x7c, 0xf8,
	0x61, 0x2f, 0xdf, 0xc9, 0x9f, 0x5a, 0x9b, 0x1f, 0x01, 0x46, 0x6f, 0x13, 0x92, 0x6b, 0x7e, 0xce,
	0x75, 0x64, 0x53, 0x83, 0x23, 0xd8, 0x0f, 0x3b, 0x0e, 0x39, 0x4e, 0x0d, 0xa5, 0xa4, 0xfd, 0x8b,
	0x42, 0xc4, 0x38, 0x7d, 0xfd, 0x10, 0xbf, 0xc3, 0xb6, 0x35, 0xcf, 0xd4, 0x25, 0x8f, 0x94, 0x8c,
	0x0a, 0x99, 0x0b, 0x89, 0x33, 0xd8, 0x0f, 0x17, 0x1d, 0xfc, 0x5c, 0x9e, 0x00, 0x08, 0x15, 0x63,
	0xa6, 0x4c, 0x27, 0x42, 0x4e, 0xea, 0x50, 0x10, 0x14, 0x2e, 0x55, 0x78, 0x15, 0x89, 0x4f, 0xc8,
	0x5a, 0x55, 0xaf, 0x71, 0x2a, 0xb8, 0xb4, 0xb5, 0x41, 0xd7, 0x9d, 0xb0, 0x64, 0xf7, 0x90, 0xac,
	0xac, 0x1e, 0x90, 0x0a, 0x8f, 0x20, 0x60, 0xb5, 0x4d, 0x0f, 0x6d, 0xaa, 0x09, 0xfd, 0x54, 0x99,
	0xda, 0x62, 0x9b, 0xac, 0x18, 0xab, 0x99, 0xe5, 0x13, 0x11, 0x43, 0x50, 0x2e, 0x05, 0xec, 0x02,
	0x07, 0x37, 0x1a, 0x94, 0xd4, 0x51, 0xc5, 0x40, 0x93, 0x16, 0x1a, 0xca, 0xbd, 0x99, 0xfd, 0xbe,
	0x3b, 0x44, 0xa1, 0xd3, 0x71, 0x33, 0xf9, 0x23, 0xb2, 0x92, 0x08, 0x83, 0x97, 0x39, 0x2b, 0xac,
	0x8a, 0x8a, 0x3c, 0x61, 0x96, 0xe3, 0xfc, 0xf6, 0xc3, 0xe5, 0x92, 0x7a, 0x54, 0x58, 0x75, 0x82,
	0x04, 0x54, 0xd6, 0x44, 0xb3, 0x7c, 0x7a, 0xad, 0x56, 0x06, 0xae, 0x56, 0x6a, 0xa2, 0x74, 0xbe,
	0xf9, 0x87, 0x16, 0xe9, 0x8e, 0xdd, 0x81, 0xc6, 0x96, 0x59, 0xfa, 0x23, 0x42, 0xf0, 0xcc, 0xc6,
	0x32, 0xeb, 0xaa, 0xb6, 0xbb, 0xb3, 0xe6, 0x66, 0x51, 0x43, 0x36, 0x82, 0xc3, 0xef, 0xb6, 0x61,
	0x0a, 0x85, 0x1d, 0xd0, 0x03, 0x68, 0xe8, 0x23, 0xd2, 0xd3, 0x5c, 0x5a, 0xae, 0x4b, 0xf3, 0x39,
	0x34, 0x0f, 0xde, 0x35, 0x0f, 0x51, 0x55, 0x3a, 0xe8, 0x3a, 0x1b, 0x74, 0x31, 0xfc, 0xa7, 0x47,
	0xda, 0xe0, 0x1c, 0xba, 0x54, 0xc9, 0x54, 0x48, 0x5e, 0xb6, 0x4e, 0xb9, 0x72, 0x17, 0x34, 0xbe,
	0x22, 0xe6, 0xb0, 0x0d, 0xcb, 0x15, 0x5d, 0x25, 0xf3, 0x26, 0x56, 0xba, 0x6a, 0x5d, 0xb7, 0x78,
	0xe7, 0x6d, 0x01, 0x7d, 0xd0, 0xba, 0xfe, 0xb6, 0xd8, 0x20, 0xdd, 0xba, 0x46, 0x58, 0x8e, 0xa5,
	0xdf, 0x0a, 0x49, 0x55, 0x18, 0x2c, 0x6f, 0x5e, 0xca, 0x89, 0x30, 0x17, 0x11, 0x5e, 0xd9, 0x58,
	0xf4, 0xad, 0xfa, 0x52, 0x7e, 0x2c, 0xcc, 0xc5, 0x31, 0xe0, 0xcd, 0x92, 0x43, 0x35, 0xbb, 0x64,
	0x22, 0x85, 0x58, 0x63, 0x13, 0xb4, 0xea, 0x92, 0x03, 0x8b, 0x47, 0x15, 0xf7, 0xb0, 0xfd, 0x9b,
	0x2f, 0x36, 0xbc, 0xe1, 0x5d, 0xb2, 0xe0, 0x22, 0x03, 0xb3, 0x48, 0x73, 0xc3, 0xf5, 0x25, 0x4f,
	0xca, 0x19, 0x56, 0xaf, 0x9d, 0xd6, 0x7d, 0x6e, 0xfe, 0xae, 0x45, 0x7a, 0x7b, 0x4a, 0x5a, 0xcd,
	0x62, 0xcc, 0x01, 0x14, 0x0b, 0x8b, 0xad, 0xb8, 0xe4, 0x70, 0xf1, 0x21, 0x1c, 0xc9, 0x22, 0x43,
	0x1f, 0xad, 0x70, 0xd9, 0x51, 0x95, 0xc1, 0x61, 0x91, 0x41, 0xb1, 0xc4, 0x2a, 0xcb, 0xb9, 0x34,
	0x78, 0x8d, 0x47, 0x39, 0x2b, 0xdf, 0x76, 0xad, 0x70, 0xd0, 0x24, 0x8e, 0x98, 0x48, 0xe8, 0x67,
	0x24, 0xb8, 0x26, 0x56, 0x85, 0x35, 0x96, 0x49, 0xac, 0xf5, 0x16, 0xda, 0xdc, 0x6c, 0xf2, 0xcf,
	0x67, 0x34, 0x3d, 0x25, 0xab, 0xe7, 0x42, 0x1b, 0x3b, 0xdb, 0x96, 0xb1, 0x4c, 0xbb, 0x4b, 0xe1,
	0xeb, 0x5e, 0xb7, 0x14, 0x3d, 0x34, 0x8e, 0xab, 0x2d, 0x3d, 0x22, 0xcb, 0x29, 0x6b, 0xba, 0xe5,
	0xd2, 0xbd, 0x20, 0xbf, 0xae, 0xd3, 0x25, 0x30, 0xaf, 0x7c, 0xee, 0xcb, 0x84, 0x7e, 0xdc, 0xb8,
	0x65, 0xfa, 0x3b, 0x37, 0x5d, 0xf1, 0x36, 0x63, 0x3c, 0x0a, 0x55, 0xca, 0xdd, 0xbd, 0xb3, 0x79,
	0x97, 0xb4, 0x61, 0x45, 0x7d, 0xd2, 0x7e, 0xfa, 0x7c, 0x7c, 0x3c, 0xf8, 0x80, 0x12, 0xb2, 0x10,
	0xee, 0x1f, 0x1e, 0xef, 0x87, 0x03, 0x8f, 0xf6, 0x88, 0x1f, 0xee, 0x8f, 0xf7, 0xc3, 0xd3, 0xfd,
	0xc7, 0x83, 0xb9, 0x32, 0x63, 0x5f, 0xcc, 0x93, 0x4e, 0xe5, 0xcd, 0xd0, 0x1f, 0x90, 0x4e, 0xb5,
	0x73, 0xe8, 0xb6, 0xd6, 0xac, 0x5d, 0x6a, 0x4d, 0xfd, 0x2d, 0x9c, 0x49, 0x87, 0x7f, 0x6a, 0x13,
	0xbf, 0xc2, 0xa1, 0x82, 0xeb, 0xe3, 0x8b, 0xaa, 0x5e, 0x48, 0x05, 0x1d, 0x24, 0xf0, 0xba, 0xc2,
	0xa6, 0x9e, 0x3d, 0xdb, 0x61, 0x79, 0x90, 0xc0, 0xeb, 0xaa, 0x6c, 0x58, 0x91, 0x94, 0x6f, 0x76,
	0xdf, 0x01, 0x07, 0x09, 0xfd, 0x94, 0x2c, 0x40, 0x1b, 0x17, 0x06, 0x93, 0xd4, 0xdf, 0xb9, 0x3d,
	0x72, 0x7f, 0x5e, 0xaa, 0xdf, 0xbd, 0x16, 0x14, 0x1e, 0x96, 0x62, 0xba, 0x47, 0x08, 0xa6, 0xd6,
	0x3d, 0xf5, 0xdf, 0x27, 0x15, 0x1d, 0xb4, 0xc3, 0xff, 0x04, 0x3f, 0x21, 0x3e, 0x97, 0x89, 0x73,
	0xb1, 0xf0, 0x1e, 0x2e, 0x6e, 0x70, 0x99, 0xa0, 0x83, 0x43, 0x32, 0x90, 0xfc, 0xa5, 0x8d, 0xb8,
	0x89, 0xb5, 0x7a, 0xe1, 0x1c, 0xdd, 0x78, 0x0f, 0x47, 0x7d, 0xb0, 0xde, 0x47, 0x63, 0xf4, 0xf7,
	0x95, 0x7d, 0xe2, 0xff, 0x0f, 0x7d, 0xd2, 0xf9, 0xef, 0x7d, 0x72, 0x9b, 0x90, 0x42, 0x0a, 0xeb,
	0x1e, 0x63, 0x78, 0xad, 0xb5, 0xc2, 0x0e, 0x20, 0xf8, 0x06, 0x03, 0x1a, 0xef, 0xb8, 0xc8, 0x88,
	0xcf, 0x39, 0x5e, 0x62, 0xad, 0xb0, 0x83, 0xc8, 0x58, 0x7c, 0xde, 0xa0, 0xa7, 0xcc, 0x4c, 0xf1,
	0xbe, 0xea, 0x94, 0xf4, 0x53, 0x66, 0xa6, 0x90, 0x6e, 0x78, 0x5a, 0x38, 0x76, 0xd1, 0xa5, 0x1b,
	0x00, 0x20, 0x9b, 0x63, 0x65, 0xf7, 0xc7, 0xff, 0xf8, 0xeb, 0xba, 0xf7, 0xea, 0xcd, 0xba, 0xf7,
	0xe5, 0x9b, 0x75, 0xef, 0x2f, 0x6f, 0xd6, 0xbd, 0x5f, 0xbf, 0x5d, 0xf7, 0xfe, 0xf8, 0x76, 0xdd,
	0x7b, 0xf5, 0x76, 0xdd, 0x23, 0x3d, 0xa1, 0x46, 0xf0, 0xcf, 0x0e, 0x0b, 0x75, 0xb7, 0x03, 0x6f,
	0xd4, 0x23, 0x88, 0xe5, 0x91, 0xf7, 0x73, 0xfc, 0x53, 0x7c, 0xb6, 0x80, 0xa1, 0xfd, 0xfe, 0xbf,
	0x03, 0x00, 0x00, 0xff, 0xff, 0x37, 0x45, 0x2b, 0x22, 0x3b, 0x0f, 0x00, 0x00,
}

func (m *Node) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Node) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Node) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	{
		size, err := m.Node_ExperimentalFlags.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintNode(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1
	i--
	dAtA[i] = 0xda
	{
		size, err := m.Node_Geo.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintNode(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1
	i--
	dAtA[i] = 0xd2
	if len(m.HVal) > 0 {
		i -= len(m.HVal)
		copy(dAtA[i:], m.HVal)
		i = encodeVarintNode(dAtA, i, uint64(len(m.HVal)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xca
	}
	n3, err3 := github_com_tron_us_protobuf_types.StdTimeMarshalTo(m.TimeCreated, dAtA[i-github_com_tron_us_protobuf_types.SizeOfStdTime(m.TimeCreated):])
	if err3 != nil {
		return 0, err3
	}
	i -= n3
	i = encodeVarintNode(dAtA, i, uint64(n3))
	i--
	dAtA[i] = 0x1
	i--
	dAtA[i] = 0xc2
	if m.PeersConnected != 0 {
		i = encodeVarintNode(dAtA, i, uint64(m.PeersConnected))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xb8
	}
	if len(m.CpuInfo) > 0 {
		i -= len(m.CpuInfo)
		copy(dAtA[i:], m.CpuInfo)
		i = encodeVarintNode(dAtA, i, uint64(len(m.CpuInfo)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xaa
	}
	if len(m.ArchType) > 0 {
		i -= len(m.ArchType)
		copy(dAtA[i:], m.ArchType)
		i = encodeVarintNode(dAtA, i, uint64(len(m.ArchType)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xa2
	}
	if len(m.OsType) > 0 {
		i -= len(m.OsType)
		copy(dAtA[i:], m.OsType)
		i = encodeVarintNode(dAtA, i, uint64(len(m.OsType)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x9a
	}
	if m.BlocksDown != 0 {
		i = encodeVarintNode(dAtA, i, uint64(m.BlocksDown))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x90
	}
	if m.BlocksUp != 0 {
		i = encodeVarintNode(dAtA, i, uint64(m.BlocksUp))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x88
	}
	if m.Reputation != 0 {
		i -= 8
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.Reputation))))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x81
	}
	{
		size, err := m.Node_Settings.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintNode(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x7a
	if m.BandwidthPriceDeal != 0 {
		i = encodeVarintNode(dAtA, i, uint64(m.BandwidthPriceDeal))
		i--
		dAtA[i] = 0x70
	}
	if m.StoragePriceDeal != 0 {
		i = encodeVarintNode(dAtA, i, uint64(m.StoragePriceDeal))
		i--
		dAtA[i] = 0x68
	}
	if m.TotalDownload != 0 {
		i = encodeVarintNode(dAtA, i, uint64(m.TotalDownload))
		i--
		dAtA[i] = 0x60
	}
	if m.TotalUpload != 0 {
		i = encodeVarintNode(dAtA, i, uint64(m.TotalUpload))
		i--
		dAtA[i] = 0x58
	}
	if m.Download != 0 {
		i = encodeVarintNode(dAtA, i, uint64(m.Download))
		i--
		dAtA[i] = 0x50
	}
	if m.Upload != 0 {
		i = encodeVarintNode(dAtA, i, uint64(m.Upload))
		i--
		dAtA[i] = 0x48
	}
	if m.CpuUsed != 0 {
		i -= 8
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.CpuUsed))))
		i--
		dAtA[i] = 0x41
	}
	if m.MemoryUsed != 0 {
		i = encodeVarintNode(dAtA, i, uint64(m.MemoryUsed))
		i--
		dAtA[i] = 0x38
	}
	if m.StorageVolumeCap != 0 {
		i = encodeVarintNode(dAtA, i, uint64(m.StorageVolumeCap))
		i--
		dAtA[i] = 0x30
	}
	if m.StorageUsed != 0 {
		i = encodeVarintNode(dAtA, i, uint64(m.StorageUsed))
		i--
		dAtA[i] = 0x28
	}
	if m.UpTime != 0 {
		i = encodeVarintNode(dAtA, i, uint64(m.UpTime))
		i--
		dAtA[i] = 0x20
	}
	if len(m.BtfsVersion) > 0 {
		i -= len(m.BtfsVersion)
		copy(dAtA[i:], m.BtfsVersion)
		i = encodeVarintNode(dAtA, i, uint64(len(m.BtfsVersion)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.NodeId) > 0 {
		i -= len(m.NodeId)
		copy(dAtA[i:], m.NodeId)
		i = encodeVarintNode(dAtA, i, uint64(len(m.NodeId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.tableName) > 0 {
		i -= len(m.tableName)
		copy(dAtA[i:], m.tableName)
		i = encodeVarintNode(dAtA, i, uint64(len(m.tableName)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Node_Settings) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Node_Settings) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Node_Settings) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Role) > 0 {
		i -= len(m.Role)
		copy(dAtA[i:], m.Role)
		i = encodeVarintNode(dAtA, i, uint64(len(m.Role)))
		i--
		dAtA[i] = 0x32
	}
	if m.CollateralStake != 0 {
		i = encodeVarintNode(dAtA, i, uint64(m.CollateralStake))
		i--
		dAtA[i] = 0x28
	}
	if m.BandwidthLimit != 0 {
		i -= 8
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.BandwidthLimit))))
		i--
		dAtA[i] = 0x21
	}
	if m.StorageTimeMin != 0 {
		i = encodeVarintNode(dAtA, i, uint64(m.StorageTimeMin))
		i--
		dAtA[i] = 0x18
	}
	if m.BandwidthPriceAsk != 0 {
		i = encodeVarintNode(dAtA, i, uint64(m.BandwidthPriceAsk))
		i--
		dAtA[i] = 0x10
	}
	if m.StoragePriceAsk != 0 {
		i = encodeVarintNode(dAtA, i, uint64(m.StoragePriceAsk))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *Node_Geo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Node_Geo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Node_Geo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Longitude != 0 {
		i -= 4
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(m.Longitude))))
		i--
		dAtA[i] = 0x25
	}
	if m.Latitude != 0 {
		i -= 4
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(m.Latitude))))
		i--
		dAtA[i] = 0x1d
	}
	if len(m.Region) > 0 {
		i -= len(m.Region)
		copy(dAtA[i:], m.Region)
		i = encodeVarintNode(dAtA, i, uint64(len(m.Region)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.CountryShort) > 0 {
		i -= len(m.CountryShort)
		copy(dAtA[i:], m.CountryShort)
		i = encodeVarintNode(dAtA, i, uint64(len(m.CountryShort)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Node_ExperimentalFlags) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Node_ExperimentalFlags) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Node_ExperimentalFlags) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.GraphsyncEnabled {
		i--
		if m.GraphsyncEnabled {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x80
	}
	if m.DisableAutoUpdate {
		i--
		if m.DisableAutoUpdate {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x78
	}
	if m.UrlStoreEnabled {
		i--
		if m.UrlStoreEnabled {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x70
	}
	if m.StrategicProviding {
		i--
		if m.StrategicProviding {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x68
	}
	if m.StorageHostEnabled {
		i--
		if m.StorageHostEnabled {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x60
	}
	if m.StorageClientEnabled {
		i--
		if m.StorageClientEnabled {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x58
	}
	if m.ShardingEnabled {
		i--
		if m.ShardingEnabled {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x50
	}
	if m.RemoveOnUnpin {
		i--
		if m.RemoveOnUnpin {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x48
	}
	if m.Quic {
		i--
		if m.Quic {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x40
	}
	if m.PreferTls {
		i--
		if m.PreferTls {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x38
	}
	if m.P2PHttpProxy {
		i--
		if m.P2PHttpProxy {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x30
	}
	if m.Libp2PStreamMounting {
		i--
		if m.Libp2PStreamMounting {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x28
	}
	if len(m.HostsSyncMode) > 0 {
		i -= len(m.HostsSyncMode)
		copy(dAtA[i:], m.HostsSyncMode)
		i = encodeVarintNode(dAtA, i, uint64(len(m.HostsSyncMode)))
		i--
		dAtA[i] = 0x22
	}
	if m.HostsSyncEnabled {
		i--
		if m.HostsSyncEnabled {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x18
	}
	if m.FilestoreEnabled {
		i--
		if m.FilestoreEnabled {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x10
	}
	if m.Analytics {
		i--
		if m.Analytics {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *StorageStat) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *StorageStat) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *StorageStat) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	{
		size, err := m.RenterStats.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintNode(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	{
		size, err := m.HostStats.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintNode(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *StorageStat_Host) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *StorageStat_Host) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *StorageStat_Host) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.StorageDiskAvailable != 0 {
		i = encodeVarintNode(dAtA, i, uint64(m.StorageDiskAvailable))
		i--
		dAtA[i] = 0x38
	}
	if m.StorageDiskTotal != 0 {
		i = encodeVarintNode(dAtA, i, uint64(m.StorageDiskTotal))
		i--
		dAtA[i] = 0x30
	}
	if m.StorageCap != 0 {
		i = encodeVarintNode(dAtA, i, uint64(m.StorageCap))
		i--
		dAtA[i] = 0x28
	}
	if m.StorageUsed != 0 {
		i = encodeVarintNode(dAtA, i, uint64(m.StorageUsed))
		i--
		dAtA[i] = 0x20
	}
	if m.Score != 0 {
		i -= 4
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(m.Score))))
		i--
		dAtA[i] = 0x1d
	}
	if m.Uptime != 0 {
		i -= 4
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(m.Uptime))))
		i--
		dAtA[i] = 0x15
	}
	if m.Online {
		i--
		if m.Online {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *StorageStat_Renter) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *StorageStat_Renter) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *StorageStat_Renter) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Reserved) > 0 {
		i -= len(m.Reserved)
		copy(dAtA[i:], m.Reserved)
		i = encodeVarintNode(dAtA, i, uint64(len(m.Reserved)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ContractStat) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ContractStat) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ContractStat) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Role != 0 {
		i = encodeVarintNode(dAtA, i, uint64(m.Role))
		i--
		dAtA[i] = 0x30
	}
	n7, err7 := github_com_tron_us_protobuf_types.StdTimeMarshalTo(m.LastContractEnd, dAtA[i-github_com_tron_us_protobuf_types.SizeOfStdTime(m.LastContractEnd):])
	if err7 != nil {
		return 0, err7
	}
	i -= n7
	i = encodeVarintNode(dAtA, i, uint64(n7))
	i--
	dAtA[i] = 0x2a
	n8, err8 := github_com_tron_us_protobuf_types.StdTimeMarshalTo(m.FirstContractStart, dAtA[i-github_com_tron_us_protobuf_types.SizeOfStdTime(m.FirstContractStart):])
	if err8 != nil {
		return 0, err8
	}
	i -= n8
	i = encodeVarintNode(dAtA, i, uint64(n8))
	i--
	dAtA[i] = 0x22
	if m.CompensationOutstanding != 0 {
		i = encodeVarintNode(dAtA, i, uint64(m.CompensationOutstanding))
		i--
		dAtA[i] = 0x18
	}
	if m.CompensationPaid != 0 {
		i = encodeVarintNode(dAtA, i, uint64(m.CompensationPaid))
		i--
		dAtA[i] = 0x10
	}
	if m.ActiveContractNum != 0 {
		i = encodeVarintNode(dAtA, i, uint64(m.ActiveContractNum))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *Contracts) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Contracts) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Contracts) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Contracts) > 0 {
		for iNdEx := len(m.Contracts) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Contracts[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintNode(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *Contracts_Contract) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Contracts_Contract) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Contracts_Contract) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.FileHash) > 0 {
		i -= len(m.FileHash)
		copy(dAtA[i:], m.FileHash)
		i = encodeVarintNode(dAtA, i, uint64(len(m.FileHash)))
		i--
		dAtA[i] = 0x6a
	}
	if len(m.ShardHash) > 0 {
		i -= len(m.ShardHash)
		copy(dAtA[i:], m.ShardHash)
		i = encodeVarintNode(dAtA, i, uint64(len(m.ShardHash)))
		i--
		dAtA[i] = 0x62
	}
	if m.ShardSize != 0 {
		i = encodeVarintNode(dAtA, i, uint64(m.ShardSize))
		i--
		dAtA[i] = 0x58
	}
	if m.UnitPrice != 0 {
		i = encodeVarintNode(dAtA, i, uint64(m.UnitPrice))
		i--
		dAtA[i] = 0x50
	}
	if m.CompensationOutstanding != 0 {
		i = encodeVarintNode(dAtA, i, uint64(m.CompensationOutstanding))
		i--
		dAtA[i] = 0x48
	}
	if m.CompensationPaid != 0 {
		i = encodeVarintNode(dAtA, i, uint64(m.CompensationPaid))
		i--
		dAtA[i] = 0x40
	}
	n9, err9 := github_com_tron_us_protobuf_types.StdTimeMarshalTo(m.NextEscrowTime, dAtA[i-github_com_tron_us_protobuf_types.SizeOfStdTime(m.NextEscrowTime):])
	if err9 != nil {
		return 0, err9
	}
	i -= n9
	i = encodeVarintNode(dAtA, i, uint64(n9))
	i--
	dAtA[i] = 0x3a
	n10, err10 := github_com_tron_us_protobuf_types.StdTimeMarshalTo(m.EndTime, dAtA[i-github_com_tron_us_protobuf_types.SizeOfStdTime(m.EndTime):])
	if err10 != nil {
		return 0, err10
	}
	i -= n10
	i = encodeVarintNode(dAtA, i, uint64(n10))
	i--
	dAtA[i] = 0x32
	n11, err11 := github_com_tron_us_protobuf_types.StdTimeMarshalTo(m.StartTime, dAtA[i-github_com_tron_us_protobuf_types.SizeOfStdTime(m.StartTime):])
	if err11 != nil {
		return 0, err11
	}
	i -= n11
	i = encodeVarintNode(dAtA, i, uint64(n11))
	i--
	dAtA[i] = 0x2a
	if m.Status != 0 {
		i = encodeVarintNode(dAtA, i, uint64(m.Status))
		i--
		dAtA[i] = 0x20
	}
	if len(m.RenterId) > 0 {
		i -= len(m.RenterId)
		copy(dAtA[i:], m.RenterId)
		i = encodeVarintNode(dAtA, i, uint64(len(m.RenterId)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.HostId) > 0 {
		i -= len(m.HostId)
		copy(dAtA[i:], m.HostId)
		i = encodeVarintNode(dAtA, i, uint64(len(m.HostId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.ContractId) > 0 {
		i -= len(m.ContractId)
		copy(dAtA[i:], m.ContractId)
		i = encodeVarintNode(dAtA, i, uint64(len(m.ContractId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintNode(dAtA []byte, offset int, v uint64) int {
	offset -= sovNode(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func NewPopulatedNode(r randyNode, easy bool) *Node {
	this := &Node{}
	this.tableName = string(randStringNode(r))
	this.NodeId = string(randStringNode(r))
	this.BtfsVersion = string(randStringNode(r))
	this.UpTime = uint64(uint64(r.Uint32()))
	this.StorageUsed = uint64(uint64(r.Uint32()))
	this.StorageVolumeCap = uint64(uint64(r.Uint32()))
	this.MemoryUsed = uint64(uint64(r.Uint32()))
	this.CpuUsed = float64(r.Float64())
	if r.Intn(2) == 0 {
		this.CpuUsed *= -1
	}
	this.Upload = uint64(uint64(r.Uint32()))
	this.Download = uint64(uint64(r.Uint32()))
	this.TotalUpload = uint64(uint64(r.Uint32()))
	this.TotalDownload = uint64(uint64(r.Uint32()))
	this.StoragePriceDeal = uint64(uint64(r.Uint32()))
	this.BandwidthPriceDeal = uint64(uint64(r.Uint32()))
	v1 := NewPopulatedNode_Settings(r, easy)
	this.Node_Settings = *v1
	this.Reputation = float64(r.Float64())
	if r.Intn(2) == 0 {
		this.Reputation *= -1
	}
	this.BlocksUp = uint64(uint64(r.Uint32()))
	this.BlocksDown = uint64(uint64(r.Uint32()))
	this.OsType = string(randStringNode(r))
	this.ArchType = string(randStringNode(r))
	this.CpuInfo = string(randStringNode(r))
	this.PeersConnected = uint64(uint64(r.Uint32()))
	v2 := github_com_tron_us_protobuf_types.NewPopulatedStdTime(r, easy)
	this.TimeCreated = *v2
	this.HVal = string(randStringNode(r))
	v3 := NewPopulatedNode_Geo(r, easy)
	this.Node_Geo = *v3
	v4 := NewPopulatedNode_ExperimentalFlags(r, easy)
	this.Node_ExperimentalFlags = *v4
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedNode(r, 28)
	}
	return this
}

func NewPopulatedNode_Settings(r randyNode, easy bool) *Node_Settings {
	this := &Node_Settings{}
	this.StoragePriceAsk = uint64(uint64(r.Uint32()))
	this.BandwidthPriceAsk = uint64(uint64(r.Uint32()))
	this.StorageTimeMin = uint64(uint64(r.Uint32()))
	this.BandwidthLimit = float64(r.Float64())
	if r.Intn(2) == 0 {
		this.BandwidthLimit *= -1
	}
	this.CollateralStake = uint64(uint64(r.Uint32()))
	this.Role = string(randStringNode(r))
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedNode(r, 7)
	}
	return this
}

func NewPopulatedNode_Geo(r randyNode, easy bool) *Node_Geo {
	this := &Node_Geo{}
	this.CountryShort = string(randStringNode(r))
	this.Region = string(randStringNode(r))
	this.Latitude = float32(r.Float32())
	if r.Intn(2) == 0 {
		this.Latitude *= -1
	}
	this.Longitude = float32(r.Float32())
	if r.Intn(2) == 0 {
		this.Longitude *= -1
	}
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedNode(r, 5)
	}
	return this
}

func NewPopulatedNode_ExperimentalFlags(r randyNode, easy bool) *Node_ExperimentalFlags {
	this := &Node_ExperimentalFlags{}
	this.Analytics = bool(bool(r.Intn(2) == 0))
	this.FilestoreEnabled = bool(bool(r.Intn(2) == 0))
	this.HostsSyncEnabled = bool(bool(r.Intn(2) == 0))
	this.HostsSyncMode = string(randStringNode(r))
	this.Libp2PStreamMounting = bool(bool(r.Intn(2) == 0))
	this.P2PHttpProxy = bool(bool(r.Intn(2) == 0))
	this.PreferTls = bool(bool(r.Intn(2) == 0))
	this.Quic = bool(bool(r.Intn(2) == 0))
	this.RemoveOnUnpin = bool(bool(r.Intn(2) == 0))
	this.ShardingEnabled = bool(bool(r.Intn(2) == 0))
	this.StorageClientEnabled = bool(bool(r.Intn(2) == 0))
	this.StorageHostEnabled = bool(bool(r.Intn(2) == 0))
	this.StrategicProviding = bool(bool(r.Intn(2) == 0))
	this.UrlStoreEnabled = bool(bool(r.Intn(2) == 0))
	this.DisableAutoUpdate = bool(bool(r.Intn(2) == 0))
	this.GraphsyncEnabled = bool(bool(r.Intn(2) == 0))
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedNode(r, 17)
	}
	return this
}

func NewPopulatedStorageStat(r randyNode, easy bool) *StorageStat {
	this := &StorageStat{}
	v5 := NewPopulatedStorageStat_Host(r, easy)
	this.HostStats = *v5
	v6 := NewPopulatedStorageStat_Renter(r, easy)
	this.RenterStats = *v6
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedNode(r, 3)
	}
	return this
}

func NewPopulatedStorageStat_Host(r randyNode, easy bool) *StorageStat_Host {
	this := &StorageStat_Host{}
	this.Online = bool(bool(r.Intn(2) == 0))
	this.Uptime = float32(r.Float32())
	if r.Intn(2) == 0 {
		this.Uptime *= -1
	}
	this.Score = float32(r.Float32())
	if r.Intn(2) == 0 {
		this.Score *= -1
	}
	this.StorageUsed = int64(r.Int63())
	if r.Intn(2) == 0 {
		this.StorageUsed *= -1
	}
	this.StorageCap = int64(r.Int63())
	if r.Intn(2) == 0 {
		this.StorageCap *= -1
	}
	this.StorageDiskTotal = int64(r.Int63())
	if r.Intn(2) == 0 {
		this.StorageDiskTotal *= -1
	}
	this.StorageDiskAvailable = int64(r.Int63())
	if r.Intn(2) == 0 {
		this.StorageDiskAvailable *= -1
	}
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedNode(r, 8)
	}
	return this
}

func NewPopulatedStorageStat_Renter(r randyNode, easy bool) *StorageStat_Renter {
	this := &StorageStat_Renter{}
	this.Reserved = string(randStringNode(r))
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedNode(r, 2)
	}
	return this
}

func NewPopulatedContractStat(r randyNode, easy bool) *ContractStat {
	this := &ContractStat{}
	this.ActiveContractNum = int64(r.Int63())
	if r.Intn(2) == 0 {
		this.ActiveContractNum *= -1
	}
	this.CompensationPaid = int64(r.Int63())
	if r.Intn(2) == 0 {
		this.CompensationPaid *= -1
	}
	this.CompensationOutstanding = int64(r.Int63())
	if r.Intn(2) == 0 {
		this.CompensationOutstanding *= -1
	}
	v7 := github_com_tron_us_protobuf_types.NewPopulatedStdTime(r, easy)
	this.FirstContractStart = *v7
	v8 := github_com_tron_us_protobuf_types.NewPopulatedStdTime(r, easy)
	this.LastContractEnd = *v8
	this.Role = ContractStat_Role([]int32{0, 1, 2}[r.Intn(3)])
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedNode(r, 7)
	}
	return this
}

func NewPopulatedContracts(r randyNode, easy bool) *Contracts {
	this := &Contracts{}
	if r.Intn(5) != 0 {
		v9 := r.Intn(5)
		this.Contracts = make([]*Contracts_Contract, v9)
		for i := 0; i < v9; i++ {
			this.Contracts[i] = NewPopulatedContracts_Contract(r, easy)
		}
	}
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedNode(r, 2)
	}
	return this
}

func NewPopulatedContracts_Contract(r randyNode, easy bool) *Contracts_Contract {
	this := &Contracts_Contract{}
	this.ContractId = string(randStringNode(r))
	this.HostId = string(randStringNode(r))
	this.RenterId = string(randStringNode(r))
	this.Status = guard.Contract_ContractState([]int32{0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}[r.Intn(12)])
	v10 := github_com_tron_us_protobuf_types.NewPopulatedStdTime(r, easy)
	this.StartTime = *v10
	v11 := github_com_tron_us_protobuf_types.NewPopulatedStdTime(r, easy)
	this.EndTime = *v11
	v12 := github_com_tron_us_protobuf_types.NewPopulatedStdTime(r, easy)
	this.NextEscrowTime = *v12
	this.CompensationPaid = int64(r.Int63())
	if r.Intn(2) == 0 {
		this.CompensationPaid *= -1
	}
	this.CompensationOutstanding = int64(r.Int63())
	if r.Intn(2) == 0 {
		this.CompensationOutstanding *= -1
	}
	this.UnitPrice = int64(r.Int63())
	if r.Intn(2) == 0 {
		this.UnitPrice *= -1
	}
	this.ShardSize = int64(r.Int63())
	if r.Intn(2) == 0 {
		this.ShardSize *= -1
	}
	this.ShardHash = string(randStringNode(r))
	this.FileHash = string(randStringNode(r))
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedNode(r, 14)
	}
	return this
}

type randyNode interface {
	Float32() float32
	Float64() float64
	Int63() int64
	Int31() int32
	Uint32() uint32
	Intn(n int) int
}

func randUTF8RuneNode(r randyNode) rune {
	ru := r.Intn(62)
	if ru < 10 {
		return rune(ru + 48)
	} else if ru < 36 {
		return rune(ru + 55)
	}
	return rune(ru + 61)
}
func randStringNode(r randyNode) string {
	v13 := r.Intn(100)
	tmps := make([]rune, v13)
	for i := 0; i < v13; i++ {
		tmps[i] = randUTF8RuneNode(r)
	}
	return string(tmps)
}
func randUnrecognizedNode(r randyNode, maxFieldNumber int) (dAtA []byte) {
	l := r.Intn(5)
	for i := 0; i < l; i++ {
		wire := r.Intn(4)
		if wire == 3 {
			wire = 5
		}
		fieldNumber := maxFieldNumber + r.Intn(100)
		dAtA = randFieldNode(dAtA, r, fieldNumber, wire)
	}
	return dAtA
}
func randFieldNode(dAtA []byte, r randyNode, fieldNumber int, wire int) []byte {
	key := uint32(fieldNumber)<<3 | uint32(wire)
	switch wire {
	case 0:
		dAtA = encodeVarintPopulateNode(dAtA, uint64(key))
		v14 := r.Int63()
		if r.Intn(2) == 0 {
			v14 *= -1
		}
		dAtA = encodeVarintPopulateNode(dAtA, uint64(v14))
	case 1:
		dAtA = encodeVarintPopulateNode(dAtA, uint64(key))
		dAtA = append(dAtA, byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)))
	case 2:
		dAtA = encodeVarintPopulateNode(dAtA, uint64(key))
		ll := r.Intn(100)
		dAtA = encodeVarintPopulateNode(dAtA, uint64(ll))
		for j := 0; j < ll; j++ {
			dAtA = append(dAtA, byte(r.Intn(256)))
		}
	default:
		dAtA = encodeVarintPopulateNode(dAtA, uint64(key))
		dAtA = append(dAtA, byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)))
	}
	return dAtA
}
func encodeVarintPopulateNode(dAtA []byte, v uint64) []byte {
	for v >= 1<<7 {
		dAtA = append(dAtA, uint8(uint64(v)&0x7f|0x80))
		v >>= 7
	}
	dAtA = append(dAtA, uint8(v))
	return dAtA
}
func (m *Node) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.tableName)
	if l > 0 {
		n += 1 + l + sovNode(uint64(l))
	}
	l = len(m.NodeId)
	if l > 0 {
		n += 1 + l + sovNode(uint64(l))
	}
	l = len(m.BtfsVersion)
	if l > 0 {
		n += 1 + l + sovNode(uint64(l))
	}
	if m.UpTime != 0 {
		n += 1 + sovNode(uint64(m.UpTime))
	}
	if m.StorageUsed != 0 {
		n += 1 + sovNode(uint64(m.StorageUsed))
	}
	if m.StorageVolumeCap != 0 {
		n += 1 + sovNode(uint64(m.StorageVolumeCap))
	}
	if m.MemoryUsed != 0 {
		n += 1 + sovNode(uint64(m.MemoryUsed))
	}
	if m.CpuUsed != 0 {
		n += 9
	}
	if m.Upload != 0 {
		n += 1 + sovNode(uint64(m.Upload))
	}
	if m.Download != 0 {
		n += 1 + sovNode(uint64(m.Download))
	}
	if m.TotalUpload != 0 {
		n += 1 + sovNode(uint64(m.TotalUpload))
	}
	if m.TotalDownload != 0 {
		n += 1 + sovNode(uint64(m.TotalDownload))
	}
	if m.StoragePriceDeal != 0 {
		n += 1 + sovNode(uint64(m.StoragePriceDeal))
	}
	if m.BandwidthPriceDeal != 0 {
		n += 1 + sovNode(uint64(m.BandwidthPriceDeal))
	}
	l = m.Node_Settings.Size()
	n += 1 + l + sovNode(uint64(l))
	if m.Reputation != 0 {
		n += 10
	}
	if m.BlocksUp != 0 {
		n += 2 + sovNode(uint64(m.BlocksUp))
	}
	if m.BlocksDown != 0 {
		n += 2 + sovNode(uint64(m.BlocksDown))
	}
	l = len(m.OsType)
	if l > 0 {
		n += 2 + l + sovNode(uint64(l))
	}
	l = len(m.ArchType)
	if l > 0 {
		n += 2 + l + sovNode(uint64(l))
	}
	l = len(m.CpuInfo)
	if l > 0 {
		n += 2 + l + sovNode(uint64(l))
	}
	if m.PeersConnected != 0 {
		n += 2 + sovNode(uint64(m.PeersConnected))
	}
	l = github_com_tron_us_protobuf_types.SizeOfStdTime(m.TimeCreated)
	n += 2 + l + sovNode(uint64(l))
	l = len(m.HVal)
	if l > 0 {
		n += 2 + l + sovNode(uint64(l))
	}
	l = m.Node_Geo.Size()
	n += 2 + l + sovNode(uint64(l))
	l = m.Node_ExperimentalFlags.Size()
	n += 2 + l + sovNode(uint64(l))
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Node_Settings) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.StoragePriceAsk != 0 {
		n += 1 + sovNode(uint64(m.StoragePriceAsk))
	}
	if m.BandwidthPriceAsk != 0 {
		n += 1 + sovNode(uint64(m.BandwidthPriceAsk))
	}
	if m.StorageTimeMin != 0 {
		n += 1 + sovNode(uint64(m.StorageTimeMin))
	}
	if m.BandwidthLimit != 0 {
		n += 9
	}
	if m.CollateralStake != 0 {
		n += 1 + sovNode(uint64(m.CollateralStake))
	}
	l = len(m.Role)
	if l > 0 {
		n += 1 + l + sovNode(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Node_Geo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.CountryShort)
	if l > 0 {
		n += 1 + l + sovNode(uint64(l))
	}
	l = len(m.Region)
	if l > 0 {
		n += 1 + l + sovNode(uint64(l))
	}
	if m.Latitude != 0 {
		n += 5
	}
	if m.Longitude != 0 {
		n += 5
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Node_ExperimentalFlags) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Analytics {
		n += 2
	}
	if m.FilestoreEnabled {
		n += 2
	}
	if m.HostsSyncEnabled {
		n += 2
	}
	l = len(m.HostsSyncMode)
	if l > 0 {
		n += 1 + l + sovNode(uint64(l))
	}
	if m.Libp2PStreamMounting {
		n += 2
	}
	if m.P2PHttpProxy {
		n += 2
	}
	if m.PreferTls {
		n += 2
	}
	if m.Quic {
		n += 2
	}
	if m.RemoveOnUnpin {
		n += 2
	}
	if m.ShardingEnabled {
		n += 2
	}
	if m.StorageClientEnabled {
		n += 2
	}
	if m.StorageHostEnabled {
		n += 2
	}
	if m.StrategicProviding {
		n += 2
	}
	if m.UrlStoreEnabled {
		n += 2
	}
	if m.DisableAutoUpdate {
		n += 2
	}
	if m.GraphsyncEnabled {
		n += 3
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *StorageStat) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.HostStats.Size()
	n += 1 + l + sovNode(uint64(l))
	l = m.RenterStats.Size()
	n += 1 + l + sovNode(uint64(l))
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *StorageStat_Host) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Online {
		n += 2
	}
	if m.Uptime != 0 {
		n += 5
	}
	if m.Score != 0 {
		n += 5
	}
	if m.StorageUsed != 0 {
		n += 1 + sovNode(uint64(m.StorageUsed))
	}
	if m.StorageCap != 0 {
		n += 1 + sovNode(uint64(m.StorageCap))
	}
	if m.StorageDiskTotal != 0 {
		n += 1 + sovNode(uint64(m.StorageDiskTotal))
	}
	if m.StorageDiskAvailable != 0 {
		n += 1 + sovNode(uint64(m.StorageDiskAvailable))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *StorageStat_Renter) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Reserved)
	if l > 0 {
		n += 1 + l + sovNode(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ContractStat) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ActiveContractNum != 0 {
		n += 1 + sovNode(uint64(m.ActiveContractNum))
	}
	if m.CompensationPaid != 0 {
		n += 1 + sovNode(uint64(m.CompensationPaid))
	}
	if m.CompensationOutstanding != 0 {
		n += 1 + sovNode(uint64(m.CompensationOutstanding))
	}
	l = github_com_tron_us_protobuf_types.SizeOfStdTime(m.FirstContractStart)
	n += 1 + l + sovNode(uint64(l))
	l = github_com_tron_us_protobuf_types.SizeOfStdTime(m.LastContractEnd)
	n += 1 + l + sovNode(uint64(l))
	if m.Role != 0 {
		n += 1 + sovNode(uint64(m.Role))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Contracts) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Contracts) > 0 {
		for _, e := range m.Contracts {
			l = e.Size()
			n += 1 + l + sovNode(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Contracts_Contract) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ContractId)
	if l > 0 {
		n += 1 + l + sovNode(uint64(l))
	}
	l = len(m.HostId)
	if l > 0 {
		n += 1 + l + sovNode(uint64(l))
	}
	l = len(m.RenterId)
	if l > 0 {
		n += 1 + l + sovNode(uint64(l))
	}
	if m.Status != 0 {
		n += 1 + sovNode(uint64(m.Status))
	}
	l = github_com_tron_us_protobuf_types.SizeOfStdTime(m.StartTime)
	n += 1 + l + sovNode(uint64(l))
	l = github_com_tron_us_protobuf_types.SizeOfStdTime(m.EndTime)
	n += 1 + l + sovNode(uint64(l))
	l = github_com_tron_us_protobuf_types.SizeOfStdTime(m.NextEscrowTime)
	n += 1 + l + sovNode(uint64(l))
	if m.CompensationPaid != 0 {
		n += 1 + sovNode(uint64(m.CompensationPaid))
	}
	if m.CompensationOutstanding != 0 {
		n += 1 + sovNode(uint64(m.CompensationOutstanding))
	}
	if m.UnitPrice != 0 {
		n += 1 + sovNode(uint64(m.UnitPrice))
	}
	if m.ShardSize != 0 {
		n += 1 + sovNode(uint64(m.ShardSize))
	}
	l = len(m.ShardHash)
	if l > 0 {
		n += 1 + l + sovNode(uint64(l))
	}
	l = len(m.FileHash)
	if l > 0 {
		n += 1 + l + sovNode(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovNode(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozNode(x uint64) (n int) {
	return sovNode(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Node) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNode
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Node: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Node: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field tableName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNode
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNode
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthNode
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.tableName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NodeId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNode
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNode
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthNode
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NodeId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BtfsVersion", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNode
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNode
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthNode
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BtfsVersion = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpTime", wireType)
			}
			m.UpTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNode
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UpTime |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StorageUsed", wireType)
			}
			m.StorageUsed = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNode
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StorageUsed |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StorageVolumeCap", wireType)
			}
			m.StorageVolumeCap = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNode
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StorageVolumeCap |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MemoryUsed", wireType)
			}
			m.MemoryUsed = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNode
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MemoryUsed |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field CpuUsed", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.CpuUsed = float64(math.Float64frombits(v))
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Upload", wireType)
			}
			m.Upload = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNode
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Upload |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Download", wireType)
			}
			m.Download = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNode
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Download |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalUpload", wireType)
			}
			m.TotalUpload = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNode
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TotalUpload |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalDownload", wireType)
			}
			m.TotalDownload = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNode
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TotalDownload |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 13:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StoragePriceDeal", wireType)
			}
			m.StoragePriceDeal = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNode
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StoragePriceDeal |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 14:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BandwidthPriceDeal", wireType)
			}
			m.BandwidthPriceDeal = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNode
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BandwidthPriceDeal |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 15:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Node_Settings", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNode
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNode
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthNode
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Node_Settings.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 16:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field Reputation", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.Reputation = float64(math.Float64frombits(v))
		case 17:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlocksUp", wireType)
			}
			m.BlocksUp = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNode
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BlocksUp |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 18:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlocksDown", wireType)
			}
			m.BlocksDown = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNode
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BlocksDown |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 19:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OsType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNode
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNode
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthNode
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OsType = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 20:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ArchType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNode
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNode
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthNode
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ArchType = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 21:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CpuInfo", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNode
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNode
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthNode
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CpuInfo = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 23:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PeersConnected", wireType)
			}
			m.PeersConnected = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNode
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PeersConnected |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 24:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TimeCreated", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNode
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNode
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthNode
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_tron_us_protobuf_types.StdTimeUnmarshal(&m.TimeCreated, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 25:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HVal", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNode
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNode
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthNode
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.HVal = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 26:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Node_Geo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNode
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNode
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthNode
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Node_Geo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 27:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Node_ExperimentalFlags", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNode
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNode
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthNode
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Node_ExperimentalFlags.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipNode(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthNode
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthNode
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Node_Settings) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNode
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Settings: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Settings: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StoragePriceAsk", wireType)
			}
			m.StoragePriceAsk = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNode
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StoragePriceAsk |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BandwidthPriceAsk", wireType)
			}
			m.BandwidthPriceAsk = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNode
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BandwidthPriceAsk |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StorageTimeMin", wireType)
			}
			m.StorageTimeMin = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNode
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StorageTimeMin |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field BandwidthLimit", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.BandwidthLimit = float64(math.Float64frombits(v))
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CollateralStake", wireType)
			}
			m.CollateralStake = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNode
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CollateralStake |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Role", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNode
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNode
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthNode
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Role = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipNode(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthNode
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthNode
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Node_Geo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNode
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Geo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Geo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CountryShort", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNode
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNode
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthNode
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CountryShort = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Region", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNode
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNode
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthNode
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Region = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field Latitude", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			m.Latitude = float32(math.Float32frombits(v))
		case 4:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field Longitude", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			m.Longitude = float32(math.Float32frombits(v))
		default:
			iNdEx = preIndex
			skippy, err := skipNode(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthNode
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthNode
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Node_ExperimentalFlags) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNode
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ExperimentalFlags: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ExperimentalFlags: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Analytics", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNode
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Analytics = bool(v != 0)
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FilestoreEnabled", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNode
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.FilestoreEnabled = bool(v != 0)
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HostsSyncEnabled", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNode
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.HostsSyncEnabled = bool(v != 0)
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HostsSyncMode", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNode
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNode
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthNode
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.HostsSyncMode = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Libp2PStreamMounting", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNode
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Libp2PStreamMounting = bool(v != 0)
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field P2PHttpProxy", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNode
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.P2PHttpProxy = bool(v != 0)
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PreferTls", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNode
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.PreferTls = bool(v != 0)
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Quic", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNode
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Quic = bool(v != 0)
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RemoveOnUnpin", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNode
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.RemoveOnUnpin = bool(v != 0)
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ShardingEnabled", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNode
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ShardingEnabled = bool(v != 0)
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StorageClientEnabled", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNode
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.StorageClientEnabled = bool(v != 0)
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StorageHostEnabled", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNode
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.StorageHostEnabled = bool(v != 0)
		case 13:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StrategicProviding", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNode
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.StrategicProviding = bool(v != 0)
		case 14:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UrlStoreEnabled", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNode
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.UrlStoreEnabled = bool(v != 0)
		case 15:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DisableAutoUpdate", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNode
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.DisableAutoUpdate = bool(v != 0)
		case 16:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GraphsyncEnabled", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNode
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.GraphsyncEnabled = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipNode(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthNode
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthNode
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *StorageStat) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNode
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: StorageStat: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: StorageStat: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HostStats", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNode
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNode
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthNode
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.HostStats.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RenterStats", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNode
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNode
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthNode
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.RenterStats.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipNode(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthNode
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthNode
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *StorageStat_Host) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNode
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Host: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Host: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Online", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNode
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Online = bool(v != 0)
		case 2:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field Uptime", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			m.Uptime = float32(math.Float32frombits(v))
		case 3:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field Score", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			m.Score = float32(math.Float32frombits(v))
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StorageUsed", wireType)
			}
			m.StorageUsed = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNode
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StorageUsed |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StorageCap", wireType)
			}
			m.StorageCap = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNode
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StorageCap |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StorageDiskTotal", wireType)
			}
			m.StorageDiskTotal = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNode
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StorageDiskTotal |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StorageDiskAvailable", wireType)
			}
			m.StorageDiskAvailable = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNode
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StorageDiskAvailable |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipNode(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthNode
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthNode
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *StorageStat_Renter) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNode
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Renter: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Renter: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Reserved", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNode
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNode
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthNode
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Reserved = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipNode(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthNode
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthNode
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ContractStat) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNode
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ContractStat: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ContractStat: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ActiveContractNum", wireType)
			}
			m.ActiveContractNum = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNode
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ActiveContractNum |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CompensationPaid", wireType)
			}
			m.CompensationPaid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNode
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CompensationPaid |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CompensationOutstanding", wireType)
			}
			m.CompensationOutstanding = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNode
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CompensationOutstanding |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FirstContractStart", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNode
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNode
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthNode
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_tron_us_protobuf_types.StdTimeUnmarshal(&m.FirstContractStart, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastContractEnd", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNode
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNode
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthNode
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_tron_us_protobuf_types.StdTimeUnmarshal(&m.LastContractEnd, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Role", wireType)
			}
			m.Role = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNode
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Role |= ContractStat_Role(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipNode(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthNode
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthNode
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Contracts) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNode
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Contracts: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Contracts: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Contracts", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNode
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNode
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthNode
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Contracts = append(m.Contracts, &Contracts_Contract{})
			if err := m.Contracts[len(m.Contracts)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipNode(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthNode
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthNode
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Contracts_Contract) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNode
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Contract: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Contract: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ContractId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNode
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNode
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthNode
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ContractId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HostId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNode
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNode
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthNode
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.HostId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RenterId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNode
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNode
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthNode
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RenterId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNode
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= guard.Contract_ContractState(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartTime", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNode
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNode
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthNode
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_tron_us_protobuf_types.StdTimeUnmarshal(&m.StartTime, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EndTime", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNode
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNode
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthNode
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_tron_us_protobuf_types.StdTimeUnmarshal(&m.EndTime, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NextEscrowTime", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNode
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNode
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthNode
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_tron_us_protobuf_types.StdTimeUnmarshal(&m.NextEscrowTime, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CompensationPaid", wireType)
			}
			m.CompensationPaid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNode
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CompensationPaid |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CompensationOutstanding", wireType)
			}
			m.CompensationOutstanding = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNode
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CompensationOutstanding |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UnitPrice", wireType)
			}
			m.UnitPrice = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNode
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UnitPrice |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ShardSize", wireType)
			}
			m.ShardSize = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNode
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ShardSize |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ShardHash", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNode
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNode
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthNode
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ShardHash = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FileHash", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNode
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNode
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthNode
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FileHash = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipNode(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthNode
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthNode
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipNode(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowNode
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowNode
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowNode
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthNode
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupNode
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthNode
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthNode        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowNode          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupNode = fmt.Errorf("proto: unexpected end of group")
)
