syntax = "proto3";

package escrow;

// gogo plugin toggles
option (gogoproto.gogoproto_import) = true;
option (gogoproto.goproto_registration) = true;
option (gogoproto.marshaler_all) = true;
option (gogoproto.messagename_all) = true;
option (gogoproto.sizer_all) = true;
option (gogoproto.unmarshaler_all) = true;
// golang option
option go_package = "escrow";
// java options
option java_multiple_files = true;
option java_outer_classname = "EscrowProto";
option java_package = "io.btfs.escrow";

import "github.com/tron-us/protobuf/gogoproto/gogo.proto";
import "google/protobuf/timestamp.proto";
import "protos/ledger/ledger.proto";

service EscrowService {
  // buyer submit contracts to escrow after buyer and seller agreed contract
  // one contract is one buyer to one seller, and is one escrow in escrow service
  // buyer can submit multiple contracts in one request
  // return same number of results as request contracts
  rpc SubmitContracts(EscrowContractRequest) returns (SignedSubmitContractResult);
  rpc StartEscrow(EscrowContractRequest) returns (SignedStartEscrowResult);
  // after submit contract, buyer request to pay in
  // escrow will transfer contract amount from buyer wallet to escrow wallet
  rpc PayIn(SignedPayinRequest) returns (SignedPayinResult);
  // seller use this to check if a contract is paid in
  rpc IsPaid(SignedContractID) returns (SignedPayinStatus);
  // check escrow pay out to seller status of a contract
  rpc GetPayOutStatus(SignedContractID) returns (SignedPayoutStatus);
  //get the payout status in batch
  rpc GetPayOutStatusBatch(SignedContractIDBatch) returns (SignedPayoutStatusBatch);
  // auth request to cancel the contract
  // escrow will cancel the left payments to seller
  rpc CancelContracts(SignedCancelRequest) returns (SignedCancelContractResult);
  // seller query what new payments to receive
  rpc MyPayment(SignedPayoutAddress) returns (SignedPaymentResult);
  // query balance and create account if account not exist
  rpc BalanceOf(ledger.SignedCreateAccountRequest) returns (SignedBalanceResult);
  // Creates a channel on the ledger and returns the ID of the ledger
  rpc CreateChannel(ledger.SignedChannelCommit) returns (ledger.ChannelID);
  // Closes a channel on the ledger.
  rpc CloseChannel(ledger.SignedChannelState) returns (ledger.ChannelClosed);
  //use escrow as proxy to do the payment
  rpc Pay(ledger.SignedTransferRequest) returns (ledger.TransferResult);
}

enum TokenType {
  BTT = 0;
}

enum Schedule {
  MONTHLY = 0;
  QUARTERLY = 1;
  ANNUALLY = 2;
  CUSTOMIZED = 3;
}

enum ContractType {
  REGULAR = 0;
  PLAN = 1;
  REVISE = 2;
}

message ContractID {
  string contract_id = 1;
  bytes address = 2;
}

message ContractIDBatch {
  repeated string contract_id = 1;
  bytes address = 2;
}

message SignedContractID {
  ContractID data = 1;
  bytes signature = 2;
}

message SignedContractIDBatch {
  ContractIDBatch data = 1;
  bytes signature = 2;
}

message EscrowContract {
  string contract_id = 1; // identity of a contract
  bytes buyer_address = 2;
  bytes seller_address = 3;
  bytes auth_address = 4; // authority who can cancel escrow
  int64 amount = 5;
  int64 collateral_amount = 6;
  int64 withhold_amount = 7; // escrow hold amount till the last layment
  TokenType token_type = 8; // token type enum
  Schedule payout_schedule = 9; // schedule enum
  int32 num_payouts = 10; // numbers of payouts
  bytes reference = 11; // reference like hash value etc
  int32 customize_payout_period = 12; // customized payout period in days
  ContractType type = 13;
  int64 contingent_amount = 14;
}

message SignedEscrowContract {
  EscrowContract contract = 1;
  bytes buyer_signature = 2;
  bytes seller_signature = 3;
}

message EscrowContractRequest {
  repeated SignedEscrowContract contract = 1;
  ledger.SignedChannelCommit buyer_channel = 2; // ledger channel commit from buyer to escrow
}

message Escrow {
  string contract_id = 1;
  int64 escrow_id = 2;
  bytes from_address = 3;
  bytes to_address = 4;
  int64 amount = 5;
  int64 collateral_amount = 6;
  int32 error_code = 7;
  string error_message = 8;
}

message SubmitContractResult {
  string payin_id = 1; // for buyer to pay in a group of escrows
  repeated Escrow escrow = 2;
  bytes escrow_address = 3;
  google.protobuf.Timestamp escrow_signed_time = 4 [
    (gogoproto.nullable) = false,
    (gogoproto.stdtime) = true
  ];
  ledger.SignedChannelState buyer_channel_state = 5; // escrow signed then send to buyer to sign
}

message SignedSubmitContractResult {
  SubmitContractResult result = 1;
  bytes escrow_signature = 2;
}

message StartEscrowResult {
  repeated Escrow escrow = 1;
  bytes escrow_address = 2;
  google.protobuf.Timestamp escrow_signed_time = 3 [
    (gogoproto.nullable) = false,
    (gogoproto.stdtime) = true
  ];
}

message SignedStartEscrowResult {
  StartEscrowResult result = 1;
  bytes escrow_signature = 2;
}

message PayinRequest {
  string payin_id = 1;
  bytes buyer_address = 2;
  ledger.SignedChannelState buyer_channel_state = 3; // buyer signed ledger channel state
}

message SignedPayinRequest {
  PayinRequest request = 1;
  bytes buyer_signature = 2;
}

message PayinResult {
  string payin_id = 1;
  int64 amount = 2;
  int64 channel_id = 3; // ledger channel id
  bytes escrow_address = 4;
  google.protobuf.Timestamp escrow_signed_time = 5 [
    (gogoproto.nullable) = false,
    (gogoproto.stdtime) = true
  ];
}

message SignedPayinResult {
  PayinResult result = 1;
  bytes escrow_signature = 2;
}

message PayinStatus {
  bool paid = 1;
  int64 channel_id = 2; // ledger channel id
  bytes escrow_address = 3;
  google.protobuf.Timestamp escrow_signed_time = 4 [
    (gogoproto.nullable) = false,
    (gogoproto.stdtime) = true
  ];
}

message SignedPayinStatus {
  PayinStatus status = 1;
  bytes escrow_signature = 2;
}

enum EscrowStatus {
  INITIATED = 0;
  ACTIVE = 1;
  CANCELED = 2;
  CLOSED = 3;
}

message PayoutStatus {
  string contract_id = 1;
  int64 escrow_id = 2;
  bytes from_address = 3;
  bytes to_address = 4;
  bytes auth_address = 5;
  EscrowStatus status = 6;
  int64 amount = 7;
  int64 collateral = 8;
  int64 withhold = 9;
  int64 paid_amount = 10; // amount escrow already paid
  int32 num_paid = 11; // how many times escrow already paid
  int64 left_amount = 12;
  int32 num_left = 13; // how many times left escrow is going to pay
  int64 next_amount = 14; // next payout amount
  google.protobuf.Timestamp last_payout_time = 15 [
    (gogoproto.nullable) = false,
    (gogoproto.stdtime) = true
  ];
  google.protobuf.Timestamp next_payout_time = 16 [
    (gogoproto.nullable) = false,
    (gogoproto.stdtime) = true
  ];
  bytes escrow_address = 17;
  google.protobuf.Timestamp escrow_sign_time = 18 [
    (gogoproto.nullable) = false,
    (gogoproto.stdtime) = true
  ];
  string error_msg = 19;
}

message SignedPayoutStatus {
  PayoutStatus status = 1;
  bytes escrow_signature = 2;
}

message SignedPayoutStatusBatch {
  repeated PayoutStatus status = 1;
  bytes escrow_signature = 2;
}

message CancelContractRequest {
  string contract_id = 1;
  bytes auth_address = 2;
  google.protobuf.Timestamp auth_signed_time = 3 [
    (gogoproto.nullable) = false,
    (gogoproto.stdtime) = true
  ];
}

message SignedCancelRequest {
  CancelContractRequest request = 1;
  bytes auth_signature = 2; // authority signature
}

message CancelContractResult {
  string contract_id = 1;
  int64 escrow_id = 2;
  bool canceled = 3;
  bytes escrow_address = 4;
  google.protobuf.Timestamp escrow_signed_time = 5 [
    (gogoproto.nullable) = false,
    (gogoproto.stdtime) = true
  ];
  int64 amount = 6;
  bool paid = 7;
  string reference = 8;
}

message SignedCancelContractResult {
  CancelContractResult result = 1;
  bytes escrow_signature = 2;
}

message PayoutAddress {
  bytes to_address = 1;
  google.protobuf.Timestamp signed_time = 2 [
    (gogoproto.nullable) = false,
    (gogoproto.stdtime) = true
  ];
}

message SignedPayoutAddress {
  PayoutAddress address = 1;
  bytes signature = 2;
}

message Payment {
  string contract_id = 1;
  int64 escrow_id = 2;
  bytes from_address = 3;
  bytes to_address = 4;
  int64 amount = 5;
  int32 index = 6;
}

message PaymentResult {
  repeated Payment payment = 1;
  bytes escrow_address = 2;
  google.protobuf.Timestamp escrow_signed_time = 3 [
    (gogoproto.nullable) = false,
    (gogoproto.stdtime) = true
  ];
}

message SignedPaymentResult {
  PaymentResult result = 1;
  bytes escrow_signature = 2;
}

message BalanceResult {
  int64 balance = 1;
  bytes escrow_address = 2;
  google.protobuf.Timestamp escrow_signed_time = 3 [
    (gogoproto.nullable) = false,
    (gogoproto.stdtime) = true
  ];
}

message SignedBalanceResult {
  BalanceResult result = 1;
  bytes escrow_signature = 2;
}
