// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: protos/escrow/escrow.proto

package escrow

import (
	context "context"
	fmt "fmt"
	_ "github.com/gogo/protobuf/types"
	golang_proto "github.com/golang/protobuf/proto"
	ledger "github.com/tron-us/go-btfs-common/protos/ledger"
	_ "github.com/tron-us/protobuf/gogoproto"
	proto "github.com/tron-us/protobuf/proto"
	github_com_tron_us_protobuf_types "github.com/tron-us/protobuf/types"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
	time "time"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = golang_proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf
var _ = time.Kitchen

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type TokenType int32

const (
	TokenType_BTT TokenType = 0
)

var TokenType_name = map[int32]string{
	0: "BTT",
}

var TokenType_value = map[string]int32{
	"BTT": 0,
}

func (x TokenType) String() string {
	return proto.EnumName(TokenType_name, int32(x))
}

func (TokenType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_92a6463c7f7e20b5, []int{0}
}

type Schedule int32

const (
	Schedule_MONTHLY    Schedule = 0
	Schedule_QUARTERLY  Schedule = 1
	Schedule_ANNUALLY   Schedule = 2
	Schedule_CUSTOMIZED Schedule = 3
)

var Schedule_name = map[int32]string{
	0: "MONTHLY",
	1: "QUARTERLY",
	2: "ANNUALLY",
	3: "CUSTOMIZED",
}

var Schedule_value = map[string]int32{
	"MONTHLY":    0,
	"QUARTERLY":  1,
	"ANNUALLY":   2,
	"CUSTOMIZED": 3,
}

func (x Schedule) String() string {
	return proto.EnumName(Schedule_name, int32(x))
}

func (Schedule) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_92a6463c7f7e20b5, []int{1}
}

type ContractType int32

const (
	ContractType_REGULAR ContractType = 0
	ContractType_PLAN    ContractType = 1
	ContractType_REVISE  ContractType = 2
)

var ContractType_name = map[int32]string{
	0: "REGULAR",
	1: "PLAN",
	2: "REVISE",
}

var ContractType_value = map[string]int32{
	"REGULAR": 0,
	"PLAN":    1,
	"REVISE":  2,
}

func (x ContractType) String() string {
	return proto.EnumName(ContractType_name, int32(x))
}

func (ContractType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_92a6463c7f7e20b5, []int{2}
}

type EscrowStatus int32

const (
	EscrowStatus_INITIATED EscrowStatus = 0
	EscrowStatus_ACTIVE    EscrowStatus = 1
	EscrowStatus_CANCELED  EscrowStatus = 2
	EscrowStatus_CLOSED    EscrowStatus = 3
)

var EscrowStatus_name = map[int32]string{
	0: "INITIATED",
	1: "ACTIVE",
	2: "CANCELED",
	3: "CLOSED",
}

var EscrowStatus_value = map[string]int32{
	"INITIATED": 0,
	"ACTIVE":    1,
	"CANCELED":  2,
	"CLOSED":    3,
}

func (x EscrowStatus) String() string {
	return proto.EnumName(EscrowStatus_name, int32(x))
}

func (EscrowStatus) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_92a6463c7f7e20b5, []int{3}
}

type ContractID struct {
	ContractId           string   `protobuf:"bytes,1,opt,name=contract_id,json=contractId,proto3" json:"contract_id,omitempty" pg:"contract_id"`
	Address              []byte   `protobuf:"bytes,2,opt,name=address,proto3" json:"address,omitempty" pg:"address"`
	XXX_NoUnkeyedLiteral struct{} `json:"-" pg:"-"`
	XXX_unrecognized     []byte   `json:"-" pg:"-"`
	XXX_sizecache        int32    `json:"-" pg:"-"`
}

func (m *ContractID) Reset()         { *m = ContractID{} }
func (m *ContractID) String() string { return proto.CompactTextString(m) }
func (*ContractID) ProtoMessage()    {}
func (*ContractID) Descriptor() ([]byte, []int) {
	return fileDescriptor_92a6463c7f7e20b5, []int{0}
}
func (m *ContractID) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ContractID) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ContractID.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ContractID) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ContractID.Merge(m, src)
}
func (m *ContractID) XXX_Size() int {
	return m.Size()
}
func (m *ContractID) XXX_DiscardUnknown() {
	xxx_messageInfo_ContractID.DiscardUnknown(m)
}

var xxx_messageInfo_ContractID proto.InternalMessageInfo

func (m *ContractID) GetContractId() string {
	if m != nil {
		return m.ContractId
	}
	return ""
}

func (m *ContractID) GetAddress() []byte {
	if m != nil {
		return m.Address
	}
	return nil
}

func (*ContractID) XXX_MessageName() string {
	return "escrow.ContractID"
}

type ContractIDBatch struct {
	ContractId           []string `protobuf:"bytes,1,rep,name=contract_id,json=contractId,proto3" json:"contract_id,omitempty" pg:"contract_id"`
	Address              []byte   `protobuf:"bytes,2,opt,name=address,proto3" json:"address,omitempty" pg:"address"`
	XXX_NoUnkeyedLiteral struct{} `json:"-" pg:"-"`
	XXX_unrecognized     []byte   `json:"-" pg:"-"`
	XXX_sizecache        int32    `json:"-" pg:"-"`
}

func (m *ContractIDBatch) Reset()         { *m = ContractIDBatch{} }
func (m *ContractIDBatch) String() string { return proto.CompactTextString(m) }
func (*ContractIDBatch) ProtoMessage()    {}
func (*ContractIDBatch) Descriptor() ([]byte, []int) {
	return fileDescriptor_92a6463c7f7e20b5, []int{1}
}
func (m *ContractIDBatch) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ContractIDBatch) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ContractIDBatch.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ContractIDBatch) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ContractIDBatch.Merge(m, src)
}
func (m *ContractIDBatch) XXX_Size() int {
	return m.Size()
}
func (m *ContractIDBatch) XXX_DiscardUnknown() {
	xxx_messageInfo_ContractIDBatch.DiscardUnknown(m)
}

var xxx_messageInfo_ContractIDBatch proto.InternalMessageInfo

func (m *ContractIDBatch) GetContractId() []string {
	if m != nil {
		return m.ContractId
	}
	return nil
}

func (m *ContractIDBatch) GetAddress() []byte {
	if m != nil {
		return m.Address
	}
	return nil
}

func (*ContractIDBatch) XXX_MessageName() string {
	return "escrow.ContractIDBatch"
}

type SignedContractID struct {
	Data                 *ContractID `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty" pg:"data"`
	Signature            []byte      `protobuf:"bytes,2,opt,name=signature,proto3" json:"signature,omitempty" pg:"signature"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-" pg:"-"`
	XXX_unrecognized     []byte      `json:"-" pg:"-"`
	XXX_sizecache        int32       `json:"-" pg:"-"`
}

func (m *SignedContractID) Reset()         { *m = SignedContractID{} }
func (m *SignedContractID) String() string { return proto.CompactTextString(m) }
func (*SignedContractID) ProtoMessage()    {}
func (*SignedContractID) Descriptor() ([]byte, []int) {
	return fileDescriptor_92a6463c7f7e20b5, []int{2}
}
func (m *SignedContractID) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SignedContractID) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SignedContractID.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SignedContractID) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SignedContractID.Merge(m, src)
}
func (m *SignedContractID) XXX_Size() int {
	return m.Size()
}
func (m *SignedContractID) XXX_DiscardUnknown() {
	xxx_messageInfo_SignedContractID.DiscardUnknown(m)
}

var xxx_messageInfo_SignedContractID proto.InternalMessageInfo

func (m *SignedContractID) GetData() *ContractID {
	if m != nil {
		return m.Data
	}
	return nil
}

func (m *SignedContractID) GetSignature() []byte {
	if m != nil {
		return m.Signature
	}
	return nil
}

func (*SignedContractID) XXX_MessageName() string {
	return "escrow.SignedContractID"
}

type SignedContractIDBatch struct {
	Data                 *ContractIDBatch `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty" pg:"data"`
	Signature            []byte           `protobuf:"bytes,2,opt,name=signature,proto3" json:"signature,omitempty" pg:"signature"`
	XXX_NoUnkeyedLiteral struct{}         `json:"-" pg:"-"`
	XXX_unrecognized     []byte           `json:"-" pg:"-"`
	XXX_sizecache        int32            `json:"-" pg:"-"`
}

func (m *SignedContractIDBatch) Reset()         { *m = SignedContractIDBatch{} }
func (m *SignedContractIDBatch) String() string { return proto.CompactTextString(m) }
func (*SignedContractIDBatch) ProtoMessage()    {}
func (*SignedContractIDBatch) Descriptor() ([]byte, []int) {
	return fileDescriptor_92a6463c7f7e20b5, []int{3}
}
func (m *SignedContractIDBatch) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SignedContractIDBatch) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SignedContractIDBatch.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SignedContractIDBatch) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SignedContractIDBatch.Merge(m, src)
}
func (m *SignedContractIDBatch) XXX_Size() int {
	return m.Size()
}
func (m *SignedContractIDBatch) XXX_DiscardUnknown() {
	xxx_messageInfo_SignedContractIDBatch.DiscardUnknown(m)
}

var xxx_messageInfo_SignedContractIDBatch proto.InternalMessageInfo

func (m *SignedContractIDBatch) GetData() *ContractIDBatch {
	if m != nil {
		return m.Data
	}
	return nil
}

func (m *SignedContractIDBatch) GetSignature() []byte {
	if m != nil {
		return m.Signature
	}
	return nil
}

func (*SignedContractIDBatch) XXX_MessageName() string {
	return "escrow.SignedContractIDBatch"
}

type EscrowContract struct {
	ContractId            string       `protobuf:"bytes,1,opt,name=contract_id,json=contractId,proto3" json:"contract_id,omitempty" pg:"contract_id"`
	BuyerAddress          []byte       `protobuf:"bytes,2,opt,name=buyer_address,json=buyerAddress,proto3" json:"buyer_address,omitempty" pg:"buyer_address"`
	SellerAddress         []byte       `protobuf:"bytes,3,opt,name=seller_address,json=sellerAddress,proto3" json:"seller_address,omitempty" pg:"seller_address"`
	AuthAddress           []byte       `protobuf:"bytes,4,opt,name=auth_address,json=authAddress,proto3" json:"auth_address,omitempty" pg:"auth_address"`
	Amount                int64        `protobuf:"varint,5,opt,name=amount,proto3" json:"amount,omitempty" pg:"amount"`
	CollateralAmount      int64        `protobuf:"varint,6,opt,name=collateral_amount,json=collateralAmount,proto3" json:"collateral_amount,omitempty" pg:"collateral_amount"`
	WithholdAmount        int64        `protobuf:"varint,7,opt,name=withhold_amount,json=withholdAmount,proto3" json:"withhold_amount,omitempty" pg:"withhold_amount"`
	TokenType             TokenType    `protobuf:"varint,8,opt,name=token_type,json=tokenType,proto3,enum=escrow.TokenType" json:"token_type,omitempty" pg:"token_type"`
	PayoutSchedule        Schedule     `protobuf:"varint,9,opt,name=payout_schedule,json=payoutSchedule,proto3,enum=escrow.Schedule" json:"payout_schedule,omitempty" pg:"payout_schedule"`
	NumPayouts            int32        `protobuf:"varint,10,opt,name=num_payouts,json=numPayouts,proto3" json:"num_payouts,omitempty" pg:"num_payouts"`
	Reference             []byte       `protobuf:"bytes,11,opt,name=reference,proto3" json:"reference,omitempty" pg:"reference"`
	CustomizePayoutPeriod int32        `protobuf:"varint,12,opt,name=customize_payout_period,json=customizePayoutPeriod,proto3" json:"customize_payout_period,omitempty" pg:"customize_payout_period"`
	Type                  ContractType `protobuf:"varint,13,opt,name=type,proto3,enum=escrow.ContractType" json:"type,omitempty" pg:"type"`
	ContingentAmount      int64        `protobuf:"varint,14,opt,name=contingent_amount,json=contingentAmount,proto3" json:"contingent_amount,omitempty" pg:"contingent_amount"`
	XXX_NoUnkeyedLiteral  struct{}     `json:"-" pg:"-"`
	XXX_unrecognized      []byte       `json:"-" pg:"-"`
	XXX_sizecache         int32        `json:"-" pg:"-"`
}

func (m *EscrowContract) Reset()         { *m = EscrowContract{} }
func (m *EscrowContract) String() string { return proto.CompactTextString(m) }
func (*EscrowContract) ProtoMessage()    {}
func (*EscrowContract) Descriptor() ([]byte, []int) {
	return fileDescriptor_92a6463c7f7e20b5, []int{4}
}
func (m *EscrowContract) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EscrowContract) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EscrowContract.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EscrowContract) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EscrowContract.Merge(m, src)
}
func (m *EscrowContract) XXX_Size() int {
	return m.Size()
}
func (m *EscrowContract) XXX_DiscardUnknown() {
	xxx_messageInfo_EscrowContract.DiscardUnknown(m)
}

var xxx_messageInfo_EscrowContract proto.InternalMessageInfo

func (m *EscrowContract) GetContractId() string {
	if m != nil {
		return m.ContractId
	}
	return ""
}

func (m *EscrowContract) GetBuyerAddress() []byte {
	if m != nil {
		return m.BuyerAddress
	}
	return nil
}

func (m *EscrowContract) GetSellerAddress() []byte {
	if m != nil {
		return m.SellerAddress
	}
	return nil
}

func (m *EscrowContract) GetAuthAddress() []byte {
	if m != nil {
		return m.AuthAddress
	}
	return nil
}

func (m *EscrowContract) GetAmount() int64 {
	if m != nil {
		return m.Amount
	}
	return 0
}

func (m *EscrowContract) GetCollateralAmount() int64 {
	if m != nil {
		return m.CollateralAmount
	}
	return 0
}

func (m *EscrowContract) GetWithholdAmount() int64 {
	if m != nil {
		return m.WithholdAmount
	}
	return 0
}

func (m *EscrowContract) GetTokenType() TokenType {
	if m != nil {
		return m.TokenType
	}
	return TokenType_BTT
}

func (m *EscrowContract) GetPayoutSchedule() Schedule {
	if m != nil {
		return m.PayoutSchedule
	}
	return Schedule_MONTHLY
}

func (m *EscrowContract) GetNumPayouts() int32 {
	if m != nil {
		return m.NumPayouts
	}
	return 0
}

func (m *EscrowContract) GetReference() []byte {
	if m != nil {
		return m.Reference
	}
	return nil
}

func (m *EscrowContract) GetCustomizePayoutPeriod() int32 {
	if m != nil {
		return m.CustomizePayoutPeriod
	}
	return 0
}

func (m *EscrowContract) GetType() ContractType {
	if m != nil {
		return m.Type
	}
	return ContractType_REGULAR
}

func (m *EscrowContract) GetContingentAmount() int64 {
	if m != nil {
		return m.ContingentAmount
	}
	return 0
}

func (*EscrowContract) XXX_MessageName() string {
	return "escrow.EscrowContract"
}

type SignedEscrowContract struct {
	Contract             *EscrowContract `protobuf:"bytes,1,opt,name=contract,proto3" json:"contract,omitempty" pg:"contract"`
	BuyerSignature       []byte          `protobuf:"bytes,2,opt,name=buyer_signature,json=buyerSignature,proto3" json:"buyer_signature,omitempty" pg:"buyer_signature"`
	SellerSignature      []byte          `protobuf:"bytes,3,opt,name=seller_signature,json=sellerSignature,proto3" json:"seller_signature,omitempty" pg:"seller_signature"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-" pg:"-"`
	XXX_unrecognized     []byte          `json:"-" pg:"-"`
	XXX_sizecache        int32           `json:"-" pg:"-"`
}

func (m *SignedEscrowContract) Reset()         { *m = SignedEscrowContract{} }
func (m *SignedEscrowContract) String() string { return proto.CompactTextString(m) }
func (*SignedEscrowContract) ProtoMessage()    {}
func (*SignedEscrowContract) Descriptor() ([]byte, []int) {
	return fileDescriptor_92a6463c7f7e20b5, []int{5}
}
func (m *SignedEscrowContract) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SignedEscrowContract) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SignedEscrowContract.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SignedEscrowContract) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SignedEscrowContract.Merge(m, src)
}
func (m *SignedEscrowContract) XXX_Size() int {
	return m.Size()
}
func (m *SignedEscrowContract) XXX_DiscardUnknown() {
	xxx_messageInfo_SignedEscrowContract.DiscardUnknown(m)
}

var xxx_messageInfo_SignedEscrowContract proto.InternalMessageInfo

func (m *SignedEscrowContract) GetContract() *EscrowContract {
	if m != nil {
		return m.Contract
	}
	return nil
}

func (m *SignedEscrowContract) GetBuyerSignature() []byte {
	if m != nil {
		return m.BuyerSignature
	}
	return nil
}

func (m *SignedEscrowContract) GetSellerSignature() []byte {
	if m != nil {
		return m.SellerSignature
	}
	return nil
}

func (*SignedEscrowContract) XXX_MessageName() string {
	return "escrow.SignedEscrowContract"
}

type EscrowContractRequest struct {
	Contract             []*SignedEscrowContract     `protobuf:"bytes,1,rep,name=contract,proto3" json:"contract,omitempty" pg:"contract"`
	BuyerChannel         *ledger.SignedChannelCommit `protobuf:"bytes,2,opt,name=buyer_channel,json=buyerChannel,proto3" json:"buyer_channel,omitempty" pg:"buyer_channel"`
	XXX_NoUnkeyedLiteral struct{}                    `json:"-" pg:"-"`
	XXX_unrecognized     []byte                      `json:"-" pg:"-"`
	XXX_sizecache        int32                       `json:"-" pg:"-"`
}

func (m *EscrowContractRequest) Reset()         { *m = EscrowContractRequest{} }
func (m *EscrowContractRequest) String() string { return proto.CompactTextString(m) }
func (*EscrowContractRequest) ProtoMessage()    {}
func (*EscrowContractRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_92a6463c7f7e20b5, []int{6}
}
func (m *EscrowContractRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EscrowContractRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EscrowContractRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EscrowContractRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EscrowContractRequest.Merge(m, src)
}
func (m *EscrowContractRequest) XXX_Size() int {
	return m.Size()
}
func (m *EscrowContractRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_EscrowContractRequest.DiscardUnknown(m)
}

var xxx_messageInfo_EscrowContractRequest proto.InternalMessageInfo

func (m *EscrowContractRequest) GetContract() []*SignedEscrowContract {
	if m != nil {
		return m.Contract
	}
	return nil
}

func (m *EscrowContractRequest) GetBuyerChannel() *ledger.SignedChannelCommit {
	if m != nil {
		return m.BuyerChannel
	}
	return nil
}

func (*EscrowContractRequest) XXX_MessageName() string {
	return "escrow.EscrowContractRequest"
}

type Escrow struct {
	ContractId           string   `protobuf:"bytes,1,opt,name=contract_id,json=contractId,proto3" json:"contract_id,omitempty" pg:"contract_id"`
	EscrowId             int64    `protobuf:"varint,2,opt,name=escrow_id,json=escrowId,proto3" json:"escrow_id,omitempty" pg:"escrow_id"`
	FromAddress          []byte   `protobuf:"bytes,3,opt,name=from_address,json=fromAddress,proto3" json:"from_address,omitempty" pg:"from_address"`
	ToAddress            []byte   `protobuf:"bytes,4,opt,name=to_address,json=toAddress,proto3" json:"to_address,omitempty" pg:"to_address"`
	Amount               int64    `protobuf:"varint,5,opt,name=amount,proto3" json:"amount,omitempty" pg:"amount"`
	CollateralAmount     int64    `protobuf:"varint,6,opt,name=collateral_amount,json=collateralAmount,proto3" json:"collateral_amount,omitempty" pg:"collateral_amount"`
	ErrorCode            int32    `protobuf:"varint,7,opt,name=error_code,json=errorCode,proto3" json:"error_code,omitempty" pg:"error_code"`
	ErrorMessage         string   `protobuf:"bytes,8,opt,name=error_message,json=errorMessage,proto3" json:"error_message,omitempty" pg:"error_message"`
	XXX_NoUnkeyedLiteral struct{} `json:"-" pg:"-"`
	XXX_unrecognized     []byte   `json:"-" pg:"-"`
	XXX_sizecache        int32    `json:"-" pg:"-"`
}

func (m *Escrow) Reset()         { *m = Escrow{} }
func (m *Escrow) String() string { return proto.CompactTextString(m) }
func (*Escrow) ProtoMessage()    {}
func (*Escrow) Descriptor() ([]byte, []int) {
	return fileDescriptor_92a6463c7f7e20b5, []int{7}
}
func (m *Escrow) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Escrow) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Escrow.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Escrow) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Escrow.Merge(m, src)
}
func (m *Escrow) XXX_Size() int {
	return m.Size()
}
func (m *Escrow) XXX_DiscardUnknown() {
	xxx_messageInfo_Escrow.DiscardUnknown(m)
}

var xxx_messageInfo_Escrow proto.InternalMessageInfo

func (m *Escrow) GetContractId() string {
	if m != nil {
		return m.ContractId
	}
	return ""
}

func (m *Escrow) GetEscrowId() int64 {
	if m != nil {
		return m.EscrowId
	}
	return 0
}

func (m *Escrow) GetFromAddress() []byte {
	if m != nil {
		return m.FromAddress
	}
	return nil
}

func (m *Escrow) GetToAddress() []byte {
	if m != nil {
		return m.ToAddress
	}
	return nil
}

func (m *Escrow) GetAmount() int64 {
	if m != nil {
		return m.Amount
	}
	return 0
}

func (m *Escrow) GetCollateralAmount() int64 {
	if m != nil {
		return m.CollateralAmount
	}
	return 0
}

func (m *Escrow) GetErrorCode() int32 {
	if m != nil {
		return m.ErrorCode
	}
	return 0
}

func (m *Escrow) GetErrorMessage() string {
	if m != nil {
		return m.ErrorMessage
	}
	return ""
}

func (*Escrow) XXX_MessageName() string {
	return "escrow.Escrow"
}

type SubmitContractResult struct {
	PayinId              string                     `protobuf:"bytes,1,opt,name=payin_id,json=payinId,proto3" json:"payin_id,omitempty" pg:"payin_id"`
	Escrow               []*Escrow                  `protobuf:"bytes,2,rep,name=escrow,proto3" json:"escrow,omitempty" pg:"escrow"`
	EscrowAddress        []byte                     `protobuf:"bytes,3,opt,name=escrow_address,json=escrowAddress,proto3" json:"escrow_address,omitempty" pg:"escrow_address"`
	EscrowSignedTime     time.Time                  `protobuf:"bytes,4,opt,name=escrow_signed_time,json=escrowSignedTime,proto3,stdtime" json:"escrow_signed_time" pg:"escrow_signed_time"`
	BuyerChannelState    *ledger.SignedChannelState `protobuf:"bytes,5,opt,name=buyer_channel_state,json=buyerChannelState,proto3" json:"buyer_channel_state,omitempty" pg:"buyer_channel_state"`
	XXX_NoUnkeyedLiteral struct{}                   `json:"-" pg:"-"`
	XXX_unrecognized     []byte                     `json:"-" pg:"-"`
	XXX_sizecache        int32                      `json:"-" pg:"-"`
}

func (m *SubmitContractResult) Reset()         { *m = SubmitContractResult{} }
func (m *SubmitContractResult) String() string { return proto.CompactTextString(m) }
func (*SubmitContractResult) ProtoMessage()    {}
func (*SubmitContractResult) Descriptor() ([]byte, []int) {
	return fileDescriptor_92a6463c7f7e20b5, []int{8}
}
func (m *SubmitContractResult) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SubmitContractResult) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SubmitContractResult.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SubmitContractResult) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SubmitContractResult.Merge(m, src)
}
func (m *SubmitContractResult) XXX_Size() int {
	return m.Size()
}
func (m *SubmitContractResult) XXX_DiscardUnknown() {
	xxx_messageInfo_SubmitContractResult.DiscardUnknown(m)
}

var xxx_messageInfo_SubmitContractResult proto.InternalMessageInfo

func (m *SubmitContractResult) GetPayinId() string {
	if m != nil {
		return m.PayinId
	}
	return ""
}

func (m *SubmitContractResult) GetEscrow() []*Escrow {
	if m != nil {
		return m.Escrow
	}
	return nil
}

func (m *SubmitContractResult) GetEscrowAddress() []byte {
	if m != nil {
		return m.EscrowAddress
	}
	return nil
}

func (m *SubmitContractResult) GetEscrowSignedTime() time.Time {
	if m != nil {
		return m.EscrowSignedTime
	}
	return time.Time{}
}

func (m *SubmitContractResult) GetBuyerChannelState() *ledger.SignedChannelState {
	if m != nil {
		return m.BuyerChannelState
	}
	return nil
}

func (*SubmitContractResult) XXX_MessageName() string {
	return "escrow.SubmitContractResult"
}

type SignedSubmitContractResult struct {
	Result               *SubmitContractResult `protobuf:"bytes,1,opt,name=result,proto3" json:"result,omitempty" pg:"result"`
	EscrowSignature      []byte                `protobuf:"bytes,2,opt,name=escrow_signature,json=escrowSignature,proto3" json:"escrow_signature,omitempty" pg:"escrow_signature"`
	XXX_NoUnkeyedLiteral struct{}              `json:"-" pg:"-"`
	XXX_unrecognized     []byte                `json:"-" pg:"-"`
	XXX_sizecache        int32                 `json:"-" pg:"-"`
}

func (m *SignedSubmitContractResult) Reset()         { *m = SignedSubmitContractResult{} }
func (m *SignedSubmitContractResult) String() string { return proto.CompactTextString(m) }
func (*SignedSubmitContractResult) ProtoMessage()    {}
func (*SignedSubmitContractResult) Descriptor() ([]byte, []int) {
	return fileDescriptor_92a6463c7f7e20b5, []int{9}
}
func (m *SignedSubmitContractResult) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SignedSubmitContractResult) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SignedSubmitContractResult.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SignedSubmitContractResult) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SignedSubmitContractResult.Merge(m, src)
}
func (m *SignedSubmitContractResult) XXX_Size() int {
	return m.Size()
}
func (m *SignedSubmitContractResult) XXX_DiscardUnknown() {
	xxx_messageInfo_SignedSubmitContractResult.DiscardUnknown(m)
}

var xxx_messageInfo_SignedSubmitContractResult proto.InternalMessageInfo

func (m *SignedSubmitContractResult) GetResult() *SubmitContractResult {
	if m != nil {
		return m.Result
	}
	return nil
}

func (m *SignedSubmitContractResult) GetEscrowSignature() []byte {
	if m != nil {
		return m.EscrowSignature
	}
	return nil
}

func (*SignedSubmitContractResult) XXX_MessageName() string {
	return "escrow.SignedSubmitContractResult"
}

type StartEscrowResult struct {
	Escrow               []*Escrow `protobuf:"bytes,1,rep,name=escrow,proto3" json:"escrow,omitempty" pg:"escrow"`
	EscrowAddress        []byte    `protobuf:"bytes,2,opt,name=escrow_address,json=escrowAddress,proto3" json:"escrow_address,omitempty" pg:"escrow_address"`
	EscrowSignedTime     time.Time `protobuf:"bytes,3,opt,name=escrow_signed_time,json=escrowSignedTime,proto3,stdtime" json:"escrow_signed_time" pg:"escrow_signed_time"`
	XXX_NoUnkeyedLiteral struct{}  `json:"-" pg:"-"`
	XXX_unrecognized     []byte    `json:"-" pg:"-"`
	XXX_sizecache        int32     `json:"-" pg:"-"`
}

func (m *StartEscrowResult) Reset()         { *m = StartEscrowResult{} }
func (m *StartEscrowResult) String() string { return proto.CompactTextString(m) }
func (*StartEscrowResult) ProtoMessage()    {}
func (*StartEscrowResult) Descriptor() ([]byte, []int) {
	return fileDescriptor_92a6463c7f7e20b5, []int{10}
}
func (m *StartEscrowResult) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *StartEscrowResult) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_StartEscrowResult.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *StartEscrowResult) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StartEscrowResult.Merge(m, src)
}
func (m *StartEscrowResult) XXX_Size() int {
	return m.Size()
}
func (m *StartEscrowResult) XXX_DiscardUnknown() {
	xxx_messageInfo_StartEscrowResult.DiscardUnknown(m)
}

var xxx_messageInfo_StartEscrowResult proto.InternalMessageInfo

func (m *StartEscrowResult) GetEscrow() []*Escrow {
	if m != nil {
		return m.Escrow
	}
	return nil
}

func (m *StartEscrowResult) GetEscrowAddress() []byte {
	if m != nil {
		return m.EscrowAddress
	}
	return nil
}

func (m *StartEscrowResult) GetEscrowSignedTime() time.Time {
	if m != nil {
		return m.EscrowSignedTime
	}
	return time.Time{}
}

func (*StartEscrowResult) XXX_MessageName() string {
	return "escrow.StartEscrowResult"
}

type SignedStartEscrowResult struct {
	Result               *StartEscrowResult `protobuf:"bytes,1,opt,name=result,proto3" json:"result,omitempty" pg:"result"`
	EscrowSignature      []byte             `protobuf:"bytes,2,opt,name=escrow_signature,json=escrowSignature,proto3" json:"escrow_signature,omitempty" pg:"escrow_signature"`
	XXX_NoUnkeyedLiteral struct{}           `json:"-" pg:"-"`
	XXX_unrecognized     []byte             `json:"-" pg:"-"`
	XXX_sizecache        int32              `json:"-" pg:"-"`
}

func (m *SignedStartEscrowResult) Reset()         { *m = SignedStartEscrowResult{} }
func (m *SignedStartEscrowResult) String() string { return proto.CompactTextString(m) }
func (*SignedStartEscrowResult) ProtoMessage()    {}
func (*SignedStartEscrowResult) Descriptor() ([]byte, []int) {
	return fileDescriptor_92a6463c7f7e20b5, []int{11}
}
func (m *SignedStartEscrowResult) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SignedStartEscrowResult) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SignedStartEscrowResult.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SignedStartEscrowResult) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SignedStartEscrowResult.Merge(m, src)
}
func (m *SignedStartEscrowResult) XXX_Size() int {
	return m.Size()
}
func (m *SignedStartEscrowResult) XXX_DiscardUnknown() {
	xxx_messageInfo_SignedStartEscrowResult.DiscardUnknown(m)
}

var xxx_messageInfo_SignedStartEscrowResult proto.InternalMessageInfo

func (m *SignedStartEscrowResult) GetResult() *StartEscrowResult {
	if m != nil {
		return m.Result
	}
	return nil
}

func (m *SignedStartEscrowResult) GetEscrowSignature() []byte {
	if m != nil {
		return m.EscrowSignature
	}
	return nil
}

func (*SignedStartEscrowResult) XXX_MessageName() string {
	return "escrow.SignedStartEscrowResult"
}

type PayinRequest struct {
	PayinId              string                     `protobuf:"bytes,1,opt,name=payin_id,json=payinId,proto3" json:"payin_id,omitempty" pg:"payin_id"`
	BuyerAddress         []byte                     `protobuf:"bytes,2,opt,name=buyer_address,json=buyerAddress,proto3" json:"buyer_address,omitempty" pg:"buyer_address"`
	BuyerChannelState    *ledger.SignedChannelState `protobuf:"bytes,3,opt,name=buyer_channel_state,json=buyerChannelState,proto3" json:"buyer_channel_state,omitempty" pg:"buyer_channel_state"`
	XXX_NoUnkeyedLiteral struct{}                   `json:"-" pg:"-"`
	XXX_unrecognized     []byte                     `json:"-" pg:"-"`
	XXX_sizecache        int32                      `json:"-" pg:"-"`
}

func (m *PayinRequest) Reset()         { *m = PayinRequest{} }
func (m *PayinRequest) String() string { return proto.CompactTextString(m) }
func (*PayinRequest) ProtoMessage()    {}
func (*PayinRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_92a6463c7f7e20b5, []int{12}
}
func (m *PayinRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PayinRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PayinRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PayinRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PayinRequest.Merge(m, src)
}
func (m *PayinRequest) XXX_Size() int {
	return m.Size()
}
func (m *PayinRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_PayinRequest.DiscardUnknown(m)
}

var xxx_messageInfo_PayinRequest proto.InternalMessageInfo

func (m *PayinRequest) GetPayinId() string {
	if m != nil {
		return m.PayinId
	}
	return ""
}

func (m *PayinRequest) GetBuyerAddress() []byte {
	if m != nil {
		return m.BuyerAddress
	}
	return nil
}

func (m *PayinRequest) GetBuyerChannelState() *ledger.SignedChannelState {
	if m != nil {
		return m.BuyerChannelState
	}
	return nil
}

func (*PayinRequest) XXX_MessageName() string {
	return "escrow.PayinRequest"
}

type SignedPayinRequest struct {
	Request              *PayinRequest `protobuf:"bytes,1,opt,name=request,proto3" json:"request,omitempty" pg:"request"`
	BuyerSignature       []byte        `protobuf:"bytes,2,opt,name=buyer_signature,json=buyerSignature,proto3" json:"buyer_signature,omitempty" pg:"buyer_signature"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-" pg:"-"`
	XXX_unrecognized     []byte        `json:"-" pg:"-"`
	XXX_sizecache        int32         `json:"-" pg:"-"`
}

func (m *SignedPayinRequest) Reset()         { *m = SignedPayinRequest{} }
func (m *SignedPayinRequest) String() string { return proto.CompactTextString(m) }
func (*SignedPayinRequest) ProtoMessage()    {}
func (*SignedPayinRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_92a6463c7f7e20b5, []int{13}
}
func (m *SignedPayinRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SignedPayinRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SignedPayinRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SignedPayinRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SignedPayinRequest.Merge(m, src)
}
func (m *SignedPayinRequest) XXX_Size() int {
	return m.Size()
}
func (m *SignedPayinRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_SignedPayinRequest.DiscardUnknown(m)
}

var xxx_messageInfo_SignedPayinRequest proto.InternalMessageInfo

func (m *SignedPayinRequest) GetRequest() *PayinRequest {
	if m != nil {
		return m.Request
	}
	return nil
}

func (m *SignedPayinRequest) GetBuyerSignature() []byte {
	if m != nil {
		return m.BuyerSignature
	}
	return nil
}

func (*SignedPayinRequest) XXX_MessageName() string {
	return "escrow.SignedPayinRequest"
}

type PayinResult struct {
	PayinId              string    `protobuf:"bytes,1,opt,name=payin_id,json=payinId,proto3" json:"payin_id,omitempty" pg:"payin_id"`
	Amount               int64     `protobuf:"varint,2,opt,name=amount,proto3" json:"amount,omitempty" pg:"amount"`
	ChannelId            int64     `protobuf:"varint,3,opt,name=channel_id,json=channelId,proto3" json:"channel_id,omitempty" pg:"channel_id"`
	EscrowAddress        []byte    `protobuf:"bytes,4,opt,name=escrow_address,json=escrowAddress,proto3" json:"escrow_address,omitempty" pg:"escrow_address"`
	EscrowSignedTime     time.Time `protobuf:"bytes,5,opt,name=escrow_signed_time,json=escrowSignedTime,proto3,stdtime" json:"escrow_signed_time" pg:"escrow_signed_time"`
	XXX_NoUnkeyedLiteral struct{}  `json:"-" pg:"-"`
	XXX_unrecognized     []byte    `json:"-" pg:"-"`
	XXX_sizecache        int32     `json:"-" pg:"-"`
}

func (m *PayinResult) Reset()         { *m = PayinResult{} }
func (m *PayinResult) String() string { return proto.CompactTextString(m) }
func (*PayinResult) ProtoMessage()    {}
func (*PayinResult) Descriptor() ([]byte, []int) {
	return fileDescriptor_92a6463c7f7e20b5, []int{14}
}
func (m *PayinResult) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PayinResult) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PayinResult.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PayinResult) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PayinResult.Merge(m, src)
}
func (m *PayinResult) XXX_Size() int {
	return m.Size()
}
func (m *PayinResult) XXX_DiscardUnknown() {
	xxx_messageInfo_PayinResult.DiscardUnknown(m)
}

var xxx_messageInfo_PayinResult proto.InternalMessageInfo

func (m *PayinResult) GetPayinId() string {
	if m != nil {
		return m.PayinId
	}
	return ""
}

func (m *PayinResult) GetAmount() int64 {
	if m != nil {
		return m.Amount
	}
	return 0
}

func (m *PayinResult) GetChannelId() int64 {
	if m != nil {
		return m.ChannelId
	}
	return 0
}

func (m *PayinResult) GetEscrowAddress() []byte {
	if m != nil {
		return m.EscrowAddress
	}
	return nil
}

func (m *PayinResult) GetEscrowSignedTime() time.Time {
	if m != nil {
		return m.EscrowSignedTime
	}
	return time.Time{}
}

func (*PayinResult) XXX_MessageName() string {
	return "escrow.PayinResult"
}

type SignedPayinResult struct {
	Result               *PayinResult `protobuf:"bytes,1,opt,name=result,proto3" json:"result,omitempty" pg:"result"`
	EscrowSignature      []byte       `protobuf:"bytes,2,opt,name=escrow_signature,json=escrowSignature,proto3" json:"escrow_signature,omitempty" pg:"escrow_signature"`
	XXX_NoUnkeyedLiteral struct{}     `json:"-" pg:"-"`
	XXX_unrecognized     []byte       `json:"-" pg:"-"`
	XXX_sizecache        int32        `json:"-" pg:"-"`
}

func (m *SignedPayinResult) Reset()         { *m = SignedPayinResult{} }
func (m *SignedPayinResult) String() string { return proto.CompactTextString(m) }
func (*SignedPayinResult) ProtoMessage()    {}
func (*SignedPayinResult) Descriptor() ([]byte, []int) {
	return fileDescriptor_92a6463c7f7e20b5, []int{15}
}
func (m *SignedPayinResult) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SignedPayinResult) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SignedPayinResult.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SignedPayinResult) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SignedPayinResult.Merge(m, src)
}
func (m *SignedPayinResult) XXX_Size() int {
	return m.Size()
}
func (m *SignedPayinResult) XXX_DiscardUnknown() {
	xxx_messageInfo_SignedPayinResult.DiscardUnknown(m)
}

var xxx_messageInfo_SignedPayinResult proto.InternalMessageInfo

func (m *SignedPayinResult) GetResult() *PayinResult {
	if m != nil {
		return m.Result
	}
	return nil
}

func (m *SignedPayinResult) GetEscrowSignature() []byte {
	if m != nil {
		return m.EscrowSignature
	}
	return nil
}

func (*SignedPayinResult) XXX_MessageName() string {
	return "escrow.SignedPayinResult"
}

type PayinStatus struct {
	Paid                 bool      `protobuf:"varint,1,opt,name=paid,proto3" json:"paid,omitempty" pg:"paid"`
	ChannelId            int64     `protobuf:"varint,2,opt,name=channel_id,json=channelId,proto3" json:"channel_id,omitempty" pg:"channel_id"`
	EscrowAddress        []byte    `protobuf:"bytes,3,opt,name=escrow_address,json=escrowAddress,proto3" json:"escrow_address,omitempty" pg:"escrow_address"`
	EscrowSignedTime     time.Time `protobuf:"bytes,4,opt,name=escrow_signed_time,json=escrowSignedTime,proto3,stdtime" json:"escrow_signed_time" pg:"escrow_signed_time"`
	XXX_NoUnkeyedLiteral struct{}  `json:"-" pg:"-"`
	XXX_unrecognized     []byte    `json:"-" pg:"-"`
	XXX_sizecache        int32     `json:"-" pg:"-"`
}

func (m *PayinStatus) Reset()         { *m = PayinStatus{} }
func (m *PayinStatus) String() string { return proto.CompactTextString(m) }
func (*PayinStatus) ProtoMessage()    {}
func (*PayinStatus) Descriptor() ([]byte, []int) {
	return fileDescriptor_92a6463c7f7e20b5, []int{16}
}
func (m *PayinStatus) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PayinStatus) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PayinStatus.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PayinStatus) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PayinStatus.Merge(m, src)
}
func (m *PayinStatus) XXX_Size() int {
	return m.Size()
}
func (m *PayinStatus) XXX_DiscardUnknown() {
	xxx_messageInfo_PayinStatus.DiscardUnknown(m)
}

var xxx_messageInfo_PayinStatus proto.InternalMessageInfo

func (m *PayinStatus) GetPaid() bool {
	if m != nil {
		return m.Paid
	}
	return false
}

func (m *PayinStatus) GetChannelId() int64 {
	if m != nil {
		return m.ChannelId
	}
	return 0
}

func (m *PayinStatus) GetEscrowAddress() []byte {
	if m != nil {
		return m.EscrowAddress
	}
	return nil
}

func (m *PayinStatus) GetEscrowSignedTime() time.Time {
	if m != nil {
		return m.EscrowSignedTime
	}
	return time.Time{}
}

func (*PayinStatus) XXX_MessageName() string {
	return "escrow.PayinStatus"
}

type SignedPayinStatus struct {
	Status               *PayinStatus `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty" pg:"status"`
	EscrowSignature      []byte       `protobuf:"bytes,2,opt,name=escrow_signature,json=escrowSignature,proto3" json:"escrow_signature,omitempty" pg:"escrow_signature"`
	XXX_NoUnkeyedLiteral struct{}     `json:"-" pg:"-"`
	XXX_unrecognized     []byte       `json:"-" pg:"-"`
	XXX_sizecache        int32        `json:"-" pg:"-"`
}

func (m *SignedPayinStatus) Reset()         { *m = SignedPayinStatus{} }
func (m *SignedPayinStatus) String() string { return proto.CompactTextString(m) }
func (*SignedPayinStatus) ProtoMessage()    {}
func (*SignedPayinStatus) Descriptor() ([]byte, []int) {
	return fileDescriptor_92a6463c7f7e20b5, []int{17}
}
func (m *SignedPayinStatus) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SignedPayinStatus) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SignedPayinStatus.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SignedPayinStatus) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SignedPayinStatus.Merge(m, src)
}
func (m *SignedPayinStatus) XXX_Size() int {
	return m.Size()
}
func (m *SignedPayinStatus) XXX_DiscardUnknown() {
	xxx_messageInfo_SignedPayinStatus.DiscardUnknown(m)
}

var xxx_messageInfo_SignedPayinStatus proto.InternalMessageInfo

func (m *SignedPayinStatus) GetStatus() *PayinStatus {
	if m != nil {
		return m.Status
	}
	return nil
}

func (m *SignedPayinStatus) GetEscrowSignature() []byte {
	if m != nil {
		return m.EscrowSignature
	}
	return nil
}

func (*SignedPayinStatus) XXX_MessageName() string {
	return "escrow.SignedPayinStatus"
}

type PayoutStatus struct {
	ContractId           string       `protobuf:"bytes,1,opt,name=contract_id,json=contractId,proto3" json:"contract_id,omitempty" pg:"contract_id"`
	EscrowId             int64        `protobuf:"varint,2,opt,name=escrow_id,json=escrowId,proto3" json:"escrow_id,omitempty" pg:"escrow_id"`
	FromAddress          []byte       `protobuf:"bytes,3,opt,name=from_address,json=fromAddress,proto3" json:"from_address,omitempty" pg:"from_address"`
	ToAddress            []byte       `protobuf:"bytes,4,opt,name=to_address,json=toAddress,proto3" json:"to_address,omitempty" pg:"to_address"`
	AuthAddress          []byte       `protobuf:"bytes,5,opt,name=auth_address,json=authAddress,proto3" json:"auth_address,omitempty" pg:"auth_address"`
	Status               EscrowStatus `protobuf:"varint,6,opt,name=status,proto3,enum=escrow.EscrowStatus" json:"status,omitempty" pg:"status"`
	Amount               int64        `protobuf:"varint,7,opt,name=amount,proto3" json:"amount,omitempty" pg:"amount"`
	Collateral           int64        `protobuf:"varint,8,opt,name=collateral,proto3" json:"collateral,omitempty" pg:"collateral"`
	Withhold             int64        `protobuf:"varint,9,opt,name=withhold,proto3" json:"withhold,omitempty" pg:"withhold"`
	PaidAmount           int64        `protobuf:"varint,10,opt,name=paid_amount,json=paidAmount,proto3" json:"paid_amount,omitempty" pg:"paid_amount"`
	NumPaid              int32        `protobuf:"varint,11,opt,name=num_paid,json=numPaid,proto3" json:"num_paid,omitempty" pg:"num_paid"`
	LeftAmount           int64        `protobuf:"varint,12,opt,name=left_amount,json=leftAmount,proto3" json:"left_amount,omitempty" pg:"left_amount"`
	NumLeft              int32        `protobuf:"varint,13,opt,name=num_left,json=numLeft,proto3" json:"num_left,omitempty" pg:"num_left"`
	NextAmount           int64        `protobuf:"varint,14,opt,name=next_amount,json=nextAmount,proto3" json:"next_amount,omitempty" pg:"next_amount"`
	LastPayoutTime       time.Time    `protobuf:"bytes,15,opt,name=last_payout_time,json=lastPayoutTime,proto3,stdtime" json:"last_payout_time" pg:"last_payout_time"`
	NextPayoutTime       time.Time    `protobuf:"bytes,16,opt,name=next_payout_time,json=nextPayoutTime,proto3,stdtime" json:"next_payout_time" pg:"next_payout_time"`
	EscrowAddress        []byte       `protobuf:"bytes,17,opt,name=escrow_address,json=escrowAddress,proto3" json:"escrow_address,omitempty" pg:"escrow_address"`
	EscrowSignTime       time.Time    `protobuf:"bytes,18,opt,name=escrow_sign_time,json=escrowSignTime,proto3,stdtime" json:"escrow_sign_time" pg:"escrow_sign_time"`
	ErrorMsg             string       `protobuf:"bytes,19,opt,name=error_msg,json=errorMsg,proto3" json:"error_msg,omitempty" pg:"error_msg"`
	XXX_NoUnkeyedLiteral struct{}     `json:"-" pg:"-"`
	XXX_unrecognized     []byte       `json:"-" pg:"-"`
	XXX_sizecache        int32        `json:"-" pg:"-"`
}

func (m *PayoutStatus) Reset()         { *m = PayoutStatus{} }
func (m *PayoutStatus) String() string { return proto.CompactTextString(m) }
func (*PayoutStatus) ProtoMessage()    {}
func (*PayoutStatus) Descriptor() ([]byte, []int) {
	return fileDescriptor_92a6463c7f7e20b5, []int{18}
}
func (m *PayoutStatus) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PayoutStatus) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PayoutStatus.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PayoutStatus) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PayoutStatus.Merge(m, src)
}
func (m *PayoutStatus) XXX_Size() int {
	return m.Size()
}
func (m *PayoutStatus) XXX_DiscardUnknown() {
	xxx_messageInfo_PayoutStatus.DiscardUnknown(m)
}

var xxx_messageInfo_PayoutStatus proto.InternalMessageInfo

func (m *PayoutStatus) GetContractId() string {
	if m != nil {
		return m.ContractId
	}
	return ""
}

func (m *PayoutStatus) GetEscrowId() int64 {
	if m != nil {
		return m.EscrowId
	}
	return 0
}

func (m *PayoutStatus) GetFromAddress() []byte {
	if m != nil {
		return m.FromAddress
	}
	return nil
}

func (m *PayoutStatus) GetToAddress() []byte {
	if m != nil {
		return m.ToAddress
	}
	return nil
}

func (m *PayoutStatus) GetAuthAddress() []byte {
	if m != nil {
		return m.AuthAddress
	}
	return nil
}

func (m *PayoutStatus) GetStatus() EscrowStatus {
	if m != nil {
		return m.Status
	}
	return EscrowStatus_INITIATED
}

func (m *PayoutStatus) GetAmount() int64 {
	if m != nil {
		return m.Amount
	}
	return 0
}

func (m *PayoutStatus) GetCollateral() int64 {
	if m != nil {
		return m.Collateral
	}
	return 0
}

func (m *PayoutStatus) GetWithhold() int64 {
	if m != nil {
		return m.Withhold
	}
	return 0
}

func (m *PayoutStatus) GetPaidAmount() int64 {
	if m != nil {
		return m.PaidAmount
	}
	return 0
}

func (m *PayoutStatus) GetNumPaid() int32 {
	if m != nil {
		return m.NumPaid
	}
	return 0
}

func (m *PayoutStatus) GetLeftAmount() int64 {
	if m != nil {
		return m.LeftAmount
	}
	return 0
}

func (m *PayoutStatus) GetNumLeft() int32 {
	if m != nil {
		return m.NumLeft
	}
	return 0
}

func (m *PayoutStatus) GetNextAmount() int64 {
	if m != nil {
		return m.NextAmount
	}
	return 0
}

func (m *PayoutStatus) GetLastPayoutTime() time.Time {
	if m != nil {
		return m.LastPayoutTime
	}
	return time.Time{}
}

func (m *PayoutStatus) GetNextPayoutTime() time.Time {
	if m != nil {
		return m.NextPayoutTime
	}
	return time.Time{}
}

func (m *PayoutStatus) GetEscrowAddress() []byte {
	if m != nil {
		return m.EscrowAddress
	}
	return nil
}

func (m *PayoutStatus) GetEscrowSignTime() time.Time {
	if m != nil {
		return m.EscrowSignTime
	}
	return time.Time{}
}

func (m *PayoutStatus) GetErrorMsg() string {
	if m != nil {
		return m.ErrorMsg
	}
	return ""
}

func (*PayoutStatus) XXX_MessageName() string {
	return "escrow.PayoutStatus"
}

type SignedPayoutStatus struct {
	Status               *PayoutStatus `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty" pg:"status"`
	EscrowSignature      []byte        `protobuf:"bytes,2,opt,name=escrow_signature,json=escrowSignature,proto3" json:"escrow_signature,omitempty" pg:"escrow_signature"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-" pg:"-"`
	XXX_unrecognized     []byte        `json:"-" pg:"-"`
	XXX_sizecache        int32         `json:"-" pg:"-"`
}

func (m *SignedPayoutStatus) Reset()         { *m = SignedPayoutStatus{} }
func (m *SignedPayoutStatus) String() string { return proto.CompactTextString(m) }
func (*SignedPayoutStatus) ProtoMessage()    {}
func (*SignedPayoutStatus) Descriptor() ([]byte, []int) {
	return fileDescriptor_92a6463c7f7e20b5, []int{19}
}
func (m *SignedPayoutStatus) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SignedPayoutStatus) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SignedPayoutStatus.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SignedPayoutStatus) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SignedPayoutStatus.Merge(m, src)
}
func (m *SignedPayoutStatus) XXX_Size() int {
	return m.Size()
}
func (m *SignedPayoutStatus) XXX_DiscardUnknown() {
	xxx_messageInfo_SignedPayoutStatus.DiscardUnknown(m)
}

var xxx_messageInfo_SignedPayoutStatus proto.InternalMessageInfo

func (m *SignedPayoutStatus) GetStatus() *PayoutStatus {
	if m != nil {
		return m.Status
	}
	return nil
}

func (m *SignedPayoutStatus) GetEscrowSignature() []byte {
	if m != nil {
		return m.EscrowSignature
	}
	return nil
}

func (*SignedPayoutStatus) XXX_MessageName() string {
	return "escrow.SignedPayoutStatus"
}

type SignedPayoutStatusBatch struct {
	Status               []*PayoutStatus `protobuf:"bytes,1,rep,name=status,proto3" json:"status,omitempty" pg:"status"`
	EscrowSignature      []byte          `protobuf:"bytes,2,opt,name=escrow_signature,json=escrowSignature,proto3" json:"escrow_signature,omitempty" pg:"escrow_signature"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-" pg:"-"`
	XXX_unrecognized     []byte          `json:"-" pg:"-"`
	XXX_sizecache        int32           `json:"-" pg:"-"`
}

func (m *SignedPayoutStatusBatch) Reset()         { *m = SignedPayoutStatusBatch{} }
func (m *SignedPayoutStatusBatch) String() string { return proto.CompactTextString(m) }
func (*SignedPayoutStatusBatch) ProtoMessage()    {}
func (*SignedPayoutStatusBatch) Descriptor() ([]byte, []int) {
	return fileDescriptor_92a6463c7f7e20b5, []int{20}
}
func (m *SignedPayoutStatusBatch) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SignedPayoutStatusBatch) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SignedPayoutStatusBatch.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SignedPayoutStatusBatch) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SignedPayoutStatusBatch.Merge(m, src)
}
func (m *SignedPayoutStatusBatch) XXX_Size() int {
	return m.Size()
}
func (m *SignedPayoutStatusBatch) XXX_DiscardUnknown() {
	xxx_messageInfo_SignedPayoutStatusBatch.DiscardUnknown(m)
}

var xxx_messageInfo_SignedPayoutStatusBatch proto.InternalMessageInfo

func (m *SignedPayoutStatusBatch) GetStatus() []*PayoutStatus {
	if m != nil {
		return m.Status
	}
	return nil
}

func (m *SignedPayoutStatusBatch) GetEscrowSignature() []byte {
	if m != nil {
		return m.EscrowSignature
	}
	return nil
}

func (*SignedPayoutStatusBatch) XXX_MessageName() string {
	return "escrow.SignedPayoutStatusBatch"
}

type CancelContractRequest struct {
	ContractId           string    `protobuf:"bytes,1,opt,name=contract_id,json=contractId,proto3" json:"contract_id,omitempty" pg:"contract_id"`
	AuthAddress          []byte    `protobuf:"bytes,2,opt,name=auth_address,json=authAddress,proto3" json:"auth_address,omitempty" pg:"auth_address"`
	AuthSignedTime       time.Time `protobuf:"bytes,3,opt,name=auth_signed_time,json=authSignedTime,proto3,stdtime" json:"auth_signed_time" pg:"auth_signed_time"`
	XXX_NoUnkeyedLiteral struct{}  `json:"-" pg:"-"`
	XXX_unrecognized     []byte    `json:"-" pg:"-"`
	XXX_sizecache        int32     `json:"-" pg:"-"`
}

func (m *CancelContractRequest) Reset()         { *m = CancelContractRequest{} }
func (m *CancelContractRequest) String() string { return proto.CompactTextString(m) }
func (*CancelContractRequest) ProtoMessage()    {}
func (*CancelContractRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_92a6463c7f7e20b5, []int{21}
}
func (m *CancelContractRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CancelContractRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CancelContractRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CancelContractRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CancelContractRequest.Merge(m, src)
}
func (m *CancelContractRequest) XXX_Size() int {
	return m.Size()
}
func (m *CancelContractRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_CancelContractRequest.DiscardUnknown(m)
}

var xxx_messageInfo_CancelContractRequest proto.InternalMessageInfo

func (m *CancelContractRequest) GetContractId() string {
	if m != nil {
		return m.ContractId
	}
	return ""
}

func (m *CancelContractRequest) GetAuthAddress() []byte {
	if m != nil {
		return m.AuthAddress
	}
	return nil
}

func (m *CancelContractRequest) GetAuthSignedTime() time.Time {
	if m != nil {
		return m.AuthSignedTime
	}
	return time.Time{}
}

func (*CancelContractRequest) XXX_MessageName() string {
	return "escrow.CancelContractRequest"
}

type SignedCancelRequest struct {
	Request              *CancelContractRequest `protobuf:"bytes,1,opt,name=request,proto3" json:"request,omitempty" pg:"request"`
	AuthSignature        []byte                 `protobuf:"bytes,2,opt,name=auth_signature,json=authSignature,proto3" json:"auth_signature,omitempty" pg:"auth_signature"`
	XXX_NoUnkeyedLiteral struct{}               `json:"-" pg:"-"`
	XXX_unrecognized     []byte                 `json:"-" pg:"-"`
	XXX_sizecache        int32                  `json:"-" pg:"-"`
}

func (m *SignedCancelRequest) Reset()         { *m = SignedCancelRequest{} }
func (m *SignedCancelRequest) String() string { return proto.CompactTextString(m) }
func (*SignedCancelRequest) ProtoMessage()    {}
func (*SignedCancelRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_92a6463c7f7e20b5, []int{22}
}
func (m *SignedCancelRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SignedCancelRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SignedCancelRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SignedCancelRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SignedCancelRequest.Merge(m, src)
}
func (m *SignedCancelRequest) XXX_Size() int {
	return m.Size()
}
func (m *SignedCancelRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_SignedCancelRequest.DiscardUnknown(m)
}

var xxx_messageInfo_SignedCancelRequest proto.InternalMessageInfo

func (m *SignedCancelRequest) GetRequest() *CancelContractRequest {
	if m != nil {
		return m.Request
	}
	return nil
}

func (m *SignedCancelRequest) GetAuthSignature() []byte {
	if m != nil {
		return m.AuthSignature
	}
	return nil
}

func (*SignedCancelRequest) XXX_MessageName() string {
	return "escrow.SignedCancelRequest"
}

type CancelContractResult struct {
	ContractId           string    `protobuf:"bytes,1,opt,name=contract_id,json=contractId,proto3" json:"contract_id,omitempty" pg:"contract_id"`
	EscrowId             int64     `protobuf:"varint,2,opt,name=escrow_id,json=escrowId,proto3" json:"escrow_id,omitempty" pg:"escrow_id"`
	Canceled             bool      `protobuf:"varint,3,opt,name=canceled,proto3" json:"canceled,omitempty" pg:"canceled"`
	EscrowAddress        []byte    `protobuf:"bytes,4,opt,name=escrow_address,json=escrowAddress,proto3" json:"escrow_address,omitempty" pg:"escrow_address"`
	EscrowSignedTime     time.Time `protobuf:"bytes,5,opt,name=escrow_signed_time,json=escrowSignedTime,proto3,stdtime" json:"escrow_signed_time" pg:"escrow_signed_time"`
	Amount               int64     `protobuf:"varint,6,opt,name=amount,proto3" json:"amount,omitempty" pg:"amount"`
	Paid                 bool      `protobuf:"varint,7,opt,name=paid,proto3" json:"paid,omitempty" pg:"paid"`
	Reference            string    `protobuf:"bytes,8,opt,name=reference,proto3" json:"reference,omitempty" pg:"reference"`
	XXX_NoUnkeyedLiteral struct{}  `json:"-" pg:"-"`
	XXX_unrecognized     []byte    `json:"-" pg:"-"`
	XXX_sizecache        int32     `json:"-" pg:"-"`
}

func (m *CancelContractResult) Reset()         { *m = CancelContractResult{} }
func (m *CancelContractResult) String() string { return proto.CompactTextString(m) }
func (*CancelContractResult) ProtoMessage()    {}
func (*CancelContractResult) Descriptor() ([]byte, []int) {
	return fileDescriptor_92a6463c7f7e20b5, []int{23}
}
func (m *CancelContractResult) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CancelContractResult) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CancelContractResult.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CancelContractResult) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CancelContractResult.Merge(m, src)
}
func (m *CancelContractResult) XXX_Size() int {
	return m.Size()
}
func (m *CancelContractResult) XXX_DiscardUnknown() {
	xxx_messageInfo_CancelContractResult.DiscardUnknown(m)
}

var xxx_messageInfo_CancelContractResult proto.InternalMessageInfo

func (m *CancelContractResult) GetContractId() string {
	if m != nil {
		return m.ContractId
	}
	return ""
}

func (m *CancelContractResult) GetEscrowId() int64 {
	if m != nil {
		return m.EscrowId
	}
	return 0
}

func (m *CancelContractResult) GetCanceled() bool {
	if m != nil {
		return m.Canceled
	}
	return false
}

func (m *CancelContractResult) GetEscrowAddress() []byte {
	if m != nil {
		return m.EscrowAddress
	}
	return nil
}

func (m *CancelContractResult) GetEscrowSignedTime() time.Time {
	if m != nil {
		return m.EscrowSignedTime
	}
	return time.Time{}
}

func (m *CancelContractResult) GetAmount() int64 {
	if m != nil {
		return m.Amount
	}
	return 0
}

func (m *CancelContractResult) GetPaid() bool {
	if m != nil {
		return m.Paid
	}
	return false
}

func (m *CancelContractResult) GetReference() string {
	if m != nil {
		return m.Reference
	}
	return ""
}

func (*CancelContractResult) XXX_MessageName() string {
	return "escrow.CancelContractResult"
}

type SignedCancelContractResult struct {
	Result               *CancelContractResult `protobuf:"bytes,1,opt,name=result,proto3" json:"result,omitempty" pg:"result"`
	EscrowSignature      []byte                `protobuf:"bytes,2,opt,name=escrow_signature,json=escrowSignature,proto3" json:"escrow_signature,omitempty" pg:"escrow_signature"`
	XXX_NoUnkeyedLiteral struct{}              `json:"-" pg:"-"`
	XXX_unrecognized     []byte                `json:"-" pg:"-"`
	XXX_sizecache        int32                 `json:"-" pg:"-"`
}

func (m *SignedCancelContractResult) Reset()         { *m = SignedCancelContractResult{} }
func (m *SignedCancelContractResult) String() string { return proto.CompactTextString(m) }
func (*SignedCancelContractResult) ProtoMessage()    {}
func (*SignedCancelContractResult) Descriptor() ([]byte, []int) {
	return fileDescriptor_92a6463c7f7e20b5, []int{24}
}
func (m *SignedCancelContractResult) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SignedCancelContractResult) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SignedCancelContractResult.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SignedCancelContractResult) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SignedCancelContractResult.Merge(m, src)
}
func (m *SignedCancelContractResult) XXX_Size() int {
	return m.Size()
}
func (m *SignedCancelContractResult) XXX_DiscardUnknown() {
	xxx_messageInfo_SignedCancelContractResult.DiscardUnknown(m)
}

var xxx_messageInfo_SignedCancelContractResult proto.InternalMessageInfo

func (m *SignedCancelContractResult) GetResult() *CancelContractResult {
	if m != nil {
		return m.Result
	}
	return nil
}

func (m *SignedCancelContractResult) GetEscrowSignature() []byte {
	if m != nil {
		return m.EscrowSignature
	}
	return nil
}

func (*SignedCancelContractResult) XXX_MessageName() string {
	return "escrow.SignedCancelContractResult"
}

type PayoutAddress struct {
	ToAddress            []byte    `protobuf:"bytes,1,opt,name=to_address,json=toAddress,proto3" json:"to_address,omitempty" pg:"to_address"`
	SignedTime           time.Time `protobuf:"bytes,2,opt,name=signed_time,json=signedTime,proto3,stdtime" json:"signed_time" pg:"signed_time"`
	XXX_NoUnkeyedLiteral struct{}  `json:"-" pg:"-"`
	XXX_unrecognized     []byte    `json:"-" pg:"-"`
	XXX_sizecache        int32     `json:"-" pg:"-"`
}

func (m *PayoutAddress) Reset()         { *m = PayoutAddress{} }
func (m *PayoutAddress) String() string { return proto.CompactTextString(m) }
func (*PayoutAddress) ProtoMessage()    {}
func (*PayoutAddress) Descriptor() ([]byte, []int) {
	return fileDescriptor_92a6463c7f7e20b5, []int{25}
}
func (m *PayoutAddress) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PayoutAddress) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PayoutAddress.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PayoutAddress) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PayoutAddress.Merge(m, src)
}
func (m *PayoutAddress) XXX_Size() int {
	return m.Size()
}
func (m *PayoutAddress) XXX_DiscardUnknown() {
	xxx_messageInfo_PayoutAddress.DiscardUnknown(m)
}

var xxx_messageInfo_PayoutAddress proto.InternalMessageInfo

func (m *PayoutAddress) GetToAddress() []byte {
	if m != nil {
		return m.ToAddress
	}
	return nil
}

func (m *PayoutAddress) GetSignedTime() time.Time {
	if m != nil {
		return m.SignedTime
	}
	return time.Time{}
}

func (*PayoutAddress) XXX_MessageName() string {
	return "escrow.PayoutAddress"
}

type SignedPayoutAddress struct {
	Address              *PayoutAddress `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty" pg:"address"`
	Signature            []byte         `protobuf:"bytes,2,opt,name=signature,proto3" json:"signature,omitempty" pg:"signature"`
	XXX_NoUnkeyedLiteral struct{}       `json:"-" pg:"-"`
	XXX_unrecognized     []byte         `json:"-" pg:"-"`
	XXX_sizecache        int32          `json:"-" pg:"-"`
}

func (m *SignedPayoutAddress) Reset()         { *m = SignedPayoutAddress{} }
func (m *SignedPayoutAddress) String() string { return proto.CompactTextString(m) }
func (*SignedPayoutAddress) ProtoMessage()    {}
func (*SignedPayoutAddress) Descriptor() ([]byte, []int) {
	return fileDescriptor_92a6463c7f7e20b5, []int{26}
}
func (m *SignedPayoutAddress) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SignedPayoutAddress) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SignedPayoutAddress.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SignedPayoutAddress) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SignedPayoutAddress.Merge(m, src)
}
func (m *SignedPayoutAddress) XXX_Size() int {
	return m.Size()
}
func (m *SignedPayoutAddress) XXX_DiscardUnknown() {
	xxx_messageInfo_SignedPayoutAddress.DiscardUnknown(m)
}

var xxx_messageInfo_SignedPayoutAddress proto.InternalMessageInfo

func (m *SignedPayoutAddress) GetAddress() *PayoutAddress {
	if m != nil {
		return m.Address
	}
	return nil
}

func (m *SignedPayoutAddress) GetSignature() []byte {
	if m != nil {
		return m.Signature
	}
	return nil
}

func (*SignedPayoutAddress) XXX_MessageName() string {
	return "escrow.SignedPayoutAddress"
}

type Payment struct {
	ContractId           string   `protobuf:"bytes,1,opt,name=contract_id,json=contractId,proto3" json:"contract_id,omitempty" pg:"contract_id"`
	EscrowId             int64    `protobuf:"varint,2,opt,name=escrow_id,json=escrowId,proto3" json:"escrow_id,omitempty" pg:"escrow_id"`
	FromAddress          []byte   `protobuf:"bytes,3,opt,name=from_address,json=fromAddress,proto3" json:"from_address,omitempty" pg:"from_address"`
	ToAddress            []byte   `protobuf:"bytes,4,opt,name=to_address,json=toAddress,proto3" json:"to_address,omitempty" pg:"to_address"`
	Amount               int64    `protobuf:"varint,5,opt,name=amount,proto3" json:"amount,omitempty" pg:"amount"`
	Index                int32    `protobuf:"varint,6,opt,name=index,proto3" json:"index,omitempty" pg:"index"`
	XXX_NoUnkeyedLiteral struct{} `json:"-" pg:"-"`
	XXX_unrecognized     []byte   `json:"-" pg:"-"`
	XXX_sizecache        int32    `json:"-" pg:"-"`
}

func (m *Payment) Reset()         { *m = Payment{} }
func (m *Payment) String() string { return proto.CompactTextString(m) }
func (*Payment) ProtoMessage()    {}
func (*Payment) Descriptor() ([]byte, []int) {
	return fileDescriptor_92a6463c7f7e20b5, []int{27}
}
func (m *Payment) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Payment) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Payment.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Payment) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Payment.Merge(m, src)
}
func (m *Payment) XXX_Size() int {
	return m.Size()
}
func (m *Payment) XXX_DiscardUnknown() {
	xxx_messageInfo_Payment.DiscardUnknown(m)
}

var xxx_messageInfo_Payment proto.InternalMessageInfo

func (m *Payment) GetContractId() string {
	if m != nil {
		return m.ContractId
	}
	return ""
}

func (m *Payment) GetEscrowId() int64 {
	if m != nil {
		return m.EscrowId
	}
	return 0
}

func (m *Payment) GetFromAddress() []byte {
	if m != nil {
		return m.FromAddress
	}
	return nil
}

func (m *Payment) GetToAddress() []byte {
	if m != nil {
		return m.ToAddress
	}
	return nil
}

func (m *Payment) GetAmount() int64 {
	if m != nil {
		return m.Amount
	}
	return 0
}

func (m *Payment) GetIndex() int32 {
	if m != nil {
		return m.Index
	}
	return 0
}

func (*Payment) XXX_MessageName() string {
	return "escrow.Payment"
}

type PaymentResult struct {
	Payment              []*Payment `protobuf:"bytes,1,rep,name=payment,proto3" json:"payment,omitempty" pg:"payment"`
	EscrowAddress        []byte     `protobuf:"bytes,2,opt,name=escrow_address,json=escrowAddress,proto3" json:"escrow_address,omitempty" pg:"escrow_address"`
	EscrowSignedTime     time.Time  `protobuf:"bytes,3,opt,name=escrow_signed_time,json=escrowSignedTime,proto3,stdtime" json:"escrow_signed_time" pg:"escrow_signed_time"`
	XXX_NoUnkeyedLiteral struct{}   `json:"-" pg:"-"`
	XXX_unrecognized     []byte     `json:"-" pg:"-"`
	XXX_sizecache        int32      `json:"-" pg:"-"`
}

func (m *PaymentResult) Reset()         { *m = PaymentResult{} }
func (m *PaymentResult) String() string { return proto.CompactTextString(m) }
func (*PaymentResult) ProtoMessage()    {}
func (*PaymentResult) Descriptor() ([]byte, []int) {
	return fileDescriptor_92a6463c7f7e20b5, []int{28}
}
func (m *PaymentResult) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PaymentResult) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PaymentResult.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PaymentResult) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PaymentResult.Merge(m, src)
}
func (m *PaymentResult) XXX_Size() int {
	return m.Size()
}
func (m *PaymentResult) XXX_DiscardUnknown() {
	xxx_messageInfo_PaymentResult.DiscardUnknown(m)
}

var xxx_messageInfo_PaymentResult proto.InternalMessageInfo

func (m *PaymentResult) GetPayment() []*Payment {
	if m != nil {
		return m.Payment
	}
	return nil
}

func (m *PaymentResult) GetEscrowAddress() []byte {
	if m != nil {
		return m.EscrowAddress
	}
	return nil
}

func (m *PaymentResult) GetEscrowSignedTime() time.Time {
	if m != nil {
		return m.EscrowSignedTime
	}
	return time.Time{}
}

func (*PaymentResult) XXX_MessageName() string {
	return "escrow.PaymentResult"
}

type SignedPaymentResult struct {
	Result               *PaymentResult `protobuf:"bytes,1,opt,name=result,proto3" json:"result,omitempty" pg:"result"`
	EscrowSignature      []byte         `protobuf:"bytes,2,opt,name=escrow_signature,json=escrowSignature,proto3" json:"escrow_signature,omitempty" pg:"escrow_signature"`
	XXX_NoUnkeyedLiteral struct{}       `json:"-" pg:"-"`
	XXX_unrecognized     []byte         `json:"-" pg:"-"`
	XXX_sizecache        int32          `json:"-" pg:"-"`
}

func (m *SignedPaymentResult) Reset()         { *m = SignedPaymentResult{} }
func (m *SignedPaymentResult) String() string { return proto.CompactTextString(m) }
func (*SignedPaymentResult) ProtoMessage()    {}
func (*SignedPaymentResult) Descriptor() ([]byte, []int) {
	return fileDescriptor_92a6463c7f7e20b5, []int{29}
}
func (m *SignedPaymentResult) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SignedPaymentResult) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SignedPaymentResult.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SignedPaymentResult) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SignedPaymentResult.Merge(m, src)
}
func (m *SignedPaymentResult) XXX_Size() int {
	return m.Size()
}
func (m *SignedPaymentResult) XXX_DiscardUnknown() {
	xxx_messageInfo_SignedPaymentResult.DiscardUnknown(m)
}

var xxx_messageInfo_SignedPaymentResult proto.InternalMessageInfo

func (m *SignedPaymentResult) GetResult() *PaymentResult {
	if m != nil {
		return m.Result
	}
	return nil
}

func (m *SignedPaymentResult) GetEscrowSignature() []byte {
	if m != nil {
		return m.EscrowSignature
	}
	return nil
}

func (*SignedPaymentResult) XXX_MessageName() string {
	return "escrow.SignedPaymentResult"
}

type BalanceResult struct {
	Balance              int64     `protobuf:"varint,1,opt,name=balance,proto3" json:"balance,omitempty" pg:"balance"`
	EscrowAddress        []byte    `protobuf:"bytes,2,opt,name=escrow_address,json=escrowAddress,proto3" json:"escrow_address,omitempty" pg:"escrow_address"`
	EscrowSignedTime     time.Time `protobuf:"bytes,3,opt,name=escrow_signed_time,json=escrowSignedTime,proto3,stdtime" json:"escrow_signed_time" pg:"escrow_signed_time"`
	XXX_NoUnkeyedLiteral struct{}  `json:"-" pg:"-"`
	XXX_unrecognized     []byte    `json:"-" pg:"-"`
	XXX_sizecache        int32     `json:"-" pg:"-"`
}

func (m *BalanceResult) Reset()         { *m = BalanceResult{} }
func (m *BalanceResult) String() string { return proto.CompactTextString(m) }
func (*BalanceResult) ProtoMessage()    {}
func (*BalanceResult) Descriptor() ([]byte, []int) {
	return fileDescriptor_92a6463c7f7e20b5, []int{30}
}
func (m *BalanceResult) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BalanceResult) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BalanceResult.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BalanceResult) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BalanceResult.Merge(m, src)
}
func (m *BalanceResult) XXX_Size() int {
	return m.Size()
}
func (m *BalanceResult) XXX_DiscardUnknown() {
	xxx_messageInfo_BalanceResult.DiscardUnknown(m)
}

var xxx_messageInfo_BalanceResult proto.InternalMessageInfo

func (m *BalanceResult) GetBalance() int64 {
	if m != nil {
		return m.Balance
	}
	return 0
}

func (m *BalanceResult) GetEscrowAddress() []byte {
	if m != nil {
		return m.EscrowAddress
	}
	return nil
}

func (m *BalanceResult) GetEscrowSignedTime() time.Time {
	if m != nil {
		return m.EscrowSignedTime
	}
	return time.Time{}
}

func (*BalanceResult) XXX_MessageName() string {
	return "escrow.BalanceResult"
}

type SignedBalanceResult struct {
	Result               *BalanceResult `protobuf:"bytes,1,opt,name=result,proto3" json:"result,omitempty" pg:"result"`
	EscrowSignature      []byte         `protobuf:"bytes,2,opt,name=escrow_signature,json=escrowSignature,proto3" json:"escrow_signature,omitempty" pg:"escrow_signature"`
	XXX_NoUnkeyedLiteral struct{}       `json:"-" pg:"-"`
	XXX_unrecognized     []byte         `json:"-" pg:"-"`
	XXX_sizecache        int32          `json:"-" pg:"-"`
}

func (m *SignedBalanceResult) Reset()         { *m = SignedBalanceResult{} }
func (m *SignedBalanceResult) String() string { return proto.CompactTextString(m) }
func (*SignedBalanceResult) ProtoMessage()    {}
func (*SignedBalanceResult) Descriptor() ([]byte, []int) {
	return fileDescriptor_92a6463c7f7e20b5, []int{31}
}
func (m *SignedBalanceResult) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SignedBalanceResult) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SignedBalanceResult.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SignedBalanceResult) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SignedBalanceResult.Merge(m, src)
}
func (m *SignedBalanceResult) XXX_Size() int {
	return m.Size()
}
func (m *SignedBalanceResult) XXX_DiscardUnknown() {
	xxx_messageInfo_SignedBalanceResult.DiscardUnknown(m)
}

var xxx_messageInfo_SignedBalanceResult proto.InternalMessageInfo

func (m *SignedBalanceResult) GetResult() *BalanceResult {
	if m != nil {
		return m.Result
	}
	return nil
}

func (m *SignedBalanceResult) GetEscrowSignature() []byte {
	if m != nil {
		return m.EscrowSignature
	}
	return nil
}

func (*SignedBalanceResult) XXX_MessageName() string {
	return "escrow.SignedBalanceResult"
}
func init() {
	proto.RegisterEnum("escrow.TokenType", TokenType_name, TokenType_value)
	golang_proto.RegisterEnum("escrow.TokenType", TokenType_name, TokenType_value)
	proto.RegisterEnum("escrow.Schedule", Schedule_name, Schedule_value)
	golang_proto.RegisterEnum("escrow.Schedule", Schedule_name, Schedule_value)
	proto.RegisterEnum("escrow.ContractType", ContractType_name, ContractType_value)
	golang_proto.RegisterEnum("escrow.ContractType", ContractType_name, ContractType_value)
	proto.RegisterEnum("escrow.EscrowStatus", EscrowStatus_name, EscrowStatus_value)
	golang_proto.RegisterEnum("escrow.EscrowStatus", EscrowStatus_name, EscrowStatus_value)
	proto.RegisterType((*ContractID)(nil), "escrow.ContractID")
	golang_proto.RegisterType((*ContractID)(nil), "escrow.ContractID")
	proto.RegisterType((*ContractIDBatch)(nil), "escrow.ContractIDBatch")
	golang_proto.RegisterType((*ContractIDBatch)(nil), "escrow.ContractIDBatch")
	proto.RegisterType((*SignedContractID)(nil), "escrow.SignedContractID")
	golang_proto.RegisterType((*SignedContractID)(nil), "escrow.SignedContractID")
	proto.RegisterType((*SignedContractIDBatch)(nil), "escrow.SignedContractIDBatch")
	golang_proto.RegisterType((*SignedContractIDBatch)(nil), "escrow.SignedContractIDBatch")
	proto.RegisterType((*EscrowContract)(nil), "escrow.EscrowContract")
	golang_proto.RegisterType((*EscrowContract)(nil), "escrow.EscrowContract")
	proto.RegisterType((*SignedEscrowContract)(nil), "escrow.SignedEscrowContract")
	golang_proto.RegisterType((*SignedEscrowContract)(nil), "escrow.SignedEscrowContract")
	proto.RegisterType((*EscrowContractRequest)(nil), "escrow.EscrowContractRequest")
	golang_proto.RegisterType((*EscrowContractRequest)(nil), "escrow.EscrowContractRequest")
	proto.RegisterType((*Escrow)(nil), "escrow.Escrow")
	golang_proto.RegisterType((*Escrow)(nil), "escrow.Escrow")
	proto.RegisterType((*SubmitContractResult)(nil), "escrow.SubmitContractResult")
	golang_proto.RegisterType((*SubmitContractResult)(nil), "escrow.SubmitContractResult")
	proto.RegisterType((*SignedSubmitContractResult)(nil), "escrow.SignedSubmitContractResult")
	golang_proto.RegisterType((*SignedSubmitContractResult)(nil), "escrow.SignedSubmitContractResult")
	proto.RegisterType((*StartEscrowResult)(nil), "escrow.StartEscrowResult")
	golang_proto.RegisterType((*StartEscrowResult)(nil), "escrow.StartEscrowResult")
	proto.RegisterType((*SignedStartEscrowResult)(nil), "escrow.SignedStartEscrowResult")
	golang_proto.RegisterType((*SignedStartEscrowResult)(nil), "escrow.SignedStartEscrowResult")
	proto.RegisterType((*PayinRequest)(nil), "escrow.PayinRequest")
	golang_proto.RegisterType((*PayinRequest)(nil), "escrow.PayinRequest")
	proto.RegisterType((*SignedPayinRequest)(nil), "escrow.SignedPayinRequest")
	golang_proto.RegisterType((*SignedPayinRequest)(nil), "escrow.SignedPayinRequest")
	proto.RegisterType((*PayinResult)(nil), "escrow.PayinResult")
	golang_proto.RegisterType((*PayinResult)(nil), "escrow.PayinResult")
	proto.RegisterType((*SignedPayinResult)(nil), "escrow.SignedPayinResult")
	golang_proto.RegisterType((*SignedPayinResult)(nil), "escrow.SignedPayinResult")
	proto.RegisterType((*PayinStatus)(nil), "escrow.PayinStatus")
	golang_proto.RegisterType((*PayinStatus)(nil), "escrow.PayinStatus")
	proto.RegisterType((*SignedPayinStatus)(nil), "escrow.SignedPayinStatus")
	golang_proto.RegisterType((*SignedPayinStatus)(nil), "escrow.SignedPayinStatus")
	proto.RegisterType((*PayoutStatus)(nil), "escrow.PayoutStatus")
	golang_proto.RegisterType((*PayoutStatus)(nil), "escrow.PayoutStatus")
	proto.RegisterType((*SignedPayoutStatus)(nil), "escrow.SignedPayoutStatus")
	golang_proto.RegisterType((*SignedPayoutStatus)(nil), "escrow.SignedPayoutStatus")
	proto.RegisterType((*SignedPayoutStatusBatch)(nil), "escrow.SignedPayoutStatusBatch")
	golang_proto.RegisterType((*SignedPayoutStatusBatch)(nil), "escrow.SignedPayoutStatusBatch")
	proto.RegisterType((*CancelContractRequest)(nil), "escrow.CancelContractRequest")
	golang_proto.RegisterType((*CancelContractRequest)(nil), "escrow.CancelContractRequest")
	proto.RegisterType((*SignedCancelRequest)(nil), "escrow.SignedCancelRequest")
	golang_proto.RegisterType((*SignedCancelRequest)(nil), "escrow.SignedCancelRequest")
	proto.RegisterType((*CancelContractResult)(nil), "escrow.CancelContractResult")
	golang_proto.RegisterType((*CancelContractResult)(nil), "escrow.CancelContractResult")
	proto.RegisterType((*SignedCancelContractResult)(nil), "escrow.SignedCancelContractResult")
	golang_proto.RegisterType((*SignedCancelContractResult)(nil), "escrow.SignedCancelContractResult")
	proto.RegisterType((*PayoutAddress)(nil), "escrow.PayoutAddress")
	golang_proto.RegisterType((*PayoutAddress)(nil), "escrow.PayoutAddress")
	proto.RegisterType((*SignedPayoutAddress)(nil), "escrow.SignedPayoutAddress")
	golang_proto.RegisterType((*SignedPayoutAddress)(nil), "escrow.SignedPayoutAddress")
	proto.RegisterType((*Payment)(nil), "escrow.Payment")
	golang_proto.RegisterType((*Payment)(nil), "escrow.Payment")
	proto.RegisterType((*PaymentResult)(nil), "escrow.PaymentResult")
	golang_proto.RegisterType((*PaymentResult)(nil), "escrow.PaymentResult")
	proto.RegisterType((*SignedPaymentResult)(nil), "escrow.SignedPaymentResult")
	golang_proto.RegisterType((*SignedPaymentResult)(nil), "escrow.SignedPaymentResult")
	proto.RegisterType((*BalanceResult)(nil), "escrow.BalanceResult")
	golang_proto.RegisterType((*BalanceResult)(nil), "escrow.BalanceResult")
	proto.RegisterType((*SignedBalanceResult)(nil), "escrow.SignedBalanceResult")
	golang_proto.RegisterType((*SignedBalanceResult)(nil), "escrow.SignedBalanceResult")
}

func init() { proto.RegisterFile("protos/escrow/escrow.proto", fileDescriptor_92a6463c7f7e20b5) }
func init() { golang_proto.RegisterFile("protos/escrow/escrow.proto", fileDescriptor_92a6463c7f7e20b5) }

var fileDescriptor_92a6463c7f7e20b5 = []byte{
	// 1996 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xcc, 0x58, 0xcb, 0x6f, 0x23, 0x49,
	0x19, 0x4f, 0xdb, 0xf1, 0xeb, 0xf3, 0xab, 0x53, 0x93, 0xcc, 0x78, 0x3c, 0x9b, 0x07, 0x46, 0xbb,
	0x84, 0x99, 0x5d, 0x67, 0x37, 0x20, 0x1e, 0x12, 0xb0, 0x38, 0x8e, 0x35, 0x18, 0x39, 0x8e, 0x69,
	0x3b, 0x23, 0x66, 0x2f, 0x56, 0xc7, 0x5d, 0x71, 0x5a, 0x6b, 0x77, 0x87, 0xee, 0x6a, 0x66, 0x8d,
	0x84, 0xc4, 0x9f, 0x00, 0xe2, 0x82, 0x38, 0x20, 0x0e, 0xdc, 0x38, 0x2f, 0x1c, 0xb8, 0x70, 0x1c,
	0x6e, 0x9c, 0x39, 0x00, 0x9a, 0xf9, 0x43, 0x40, 0xf5, 0xea, 0x97, 0x3b, 0x93, 0xc7, 0xac, 0x76,
	0xe6, 0x64, 0xd7, 0x57, 0xbf, 0xef, 0xab, 0xaa, 0x5f, 0x7d, 0xaf, 0x2e, 0xa8, 0x5f, 0x38, 0x36,
	0xb1, 0xdd, 0x3d, 0xec, 0x4e, 0x1c, 0xfb, 0x99, 0xf8, 0x69, 0x32, 0x21, 0xca, 0xf2, 0x51, 0xfd,
	0xc3, 0xa9, 0x49, 0xce, 0xbd, 0xd3, 0xe6, 0xc4, 0x9e, 0xef, 0x11, 0xc7, 0xb6, 0x3e, 0xf0, 0xdc,
	0x3d, 0x86, 0x38, 0xf5, 0xce, 0xf6, 0xa6, 0xf6, 0xd4, 0x66, 0x03, 0xf6, 0x8f, 0x6b, 0xd6, 0xb7,
	0xa7, 0xb6, 0x3d, 0x9d, 0xe1, 0x00, 0x45, 0xcc, 0x39, 0x76, 0x89, 0x3e, 0xbf, 0x10, 0x00, 0xb9,
	0xec, 0x0c, 0x1b, 0x53, 0xec, 0x88, 0x1f, 0x3e, 0xd7, 0x78, 0x0c, 0xd0, 0xb6, 0x2d, 0xe2, 0xe8,
	0x13, 0xd2, 0x3d, 0x44, 0xdb, 0x50, 0x9c, 0x88, 0xd1, 0xd8, 0x34, 0x6a, 0xca, 0x8e, 0xb2, 0x5b,
	0xd0, 0x40, 0x8a, 0xba, 0x06, 0xaa, 0x41, 0x4e, 0x37, 0x0c, 0x07, 0xbb, 0x6e, 0x2d, 0xb5, 0xa3,
	0xec, 0x96, 0x34, 0x39, 0x6c, 0xf4, 0xa0, 0x1a, 0x18, 0x3a, 0xd0, 0xc9, 0xe4, 0x7c, 0xd9, 0x5a,
	0xfa, 0xda, 0xd6, 0x7e, 0x0a, 0xea, 0xd0, 0x9c, 0x5a, 0xd8, 0x08, 0x6d, 0xee, 0x3d, 0x58, 0x35,
	0x74, 0xa2, 0xb3, 0x5d, 0x15, 0xf7, 0x51, 0x53, 0xd0, 0x17, 0x20, 0x34, 0x36, 0x8f, 0xde, 0x81,
	0x82, 0x6b, 0x4e, 0x2d, 0x9d, 0x78, 0x0e, 0x16, 0x76, 0x03, 0x41, 0xe3, 0x14, 0x36, 0xe2, 0x96,
	0xf9, 0x6e, 0x1f, 0x45, 0xcc, 0xdf, 0x5b, 0x36, 0xcf, 0x60, 0xd7, 0x5a, 0xe3, 0x1f, 0xab, 0x50,
	0xe9, 0x30, 0x75, 0xa9, 0x7d, 0x35, 0xb3, 0x5f, 0x85, 0xf2, 0xa9, 0xb7, 0xc0, 0xce, 0x38, 0xca,
	0x48, 0x89, 0x09, 0x5b, 0x5c, 0x86, 0xde, 0x85, 0x8a, 0x8b, 0x67, 0xb3, 0x10, 0x2a, 0xcd, 0x50,
	0x65, 0x2e, 0x95, 0xb0, 0xaf, 0x40, 0x49, 0xf7, 0xc8, 0xb9, 0x0f, 0x5a, 0x65, 0xa0, 0x22, 0x95,
	0x49, 0xc8, 0x5d, 0xc8, 0xea, 0x73, 0xdb, 0xb3, 0x48, 0x2d, 0xb3, 0xa3, 0xec, 0xa6, 0x35, 0x31,
	0x42, 0x8f, 0x60, 0x6d, 0x62, 0xcf, 0x66, 0x3a, 0xc1, 0x8e, 0x3e, 0x1b, 0x0b, 0x48, 0x96, 0x41,
	0xd4, 0x60, 0xa2, 0xc5, 0xc1, 0x5f, 0x83, 0xea, 0x33, 0x93, 0x9c, 0x9f, 0xdb, 0x33, 0x43, 0x42,
	0x73, 0x0c, 0x5a, 0x91, 0x62, 0x01, 0xfc, 0x10, 0x80, 0xd8, 0x9f, 0x62, 0x6b, 0x4c, 0x16, 0x17,
	0xb8, 0x96, 0xdf, 0x51, 0x76, 0x2b, 0xfb, 0x6b, 0x92, 0xe1, 0x11, 0x9d, 0x19, 0x2d, 0x2e, 0xb0,
	0x56, 0x20, 0xf2, 0x2f, 0xfa, 0x2e, 0x54, 0x2f, 0xf4, 0x85, 0xed, 0x91, 0xb1, 0x3b, 0x39, 0xc7,
	0x86, 0x37, 0xc3, 0xb5, 0x02, 0x53, 0x53, 0xa5, 0xda, 0x50, 0xc8, 0xb5, 0x0a, 0x07, 0xca, 0x31,
	0xa5, 0xda, 0xf2, 0xe6, 0x63, 0x2e, 0x75, 0x6b, 0xb0, 0xa3, 0xec, 0x66, 0x34, 0xb0, 0xbc, 0xf9,
	0x80, 0x4b, 0xe8, 0xe5, 0x39, 0xf8, 0x0c, 0x3b, 0xd8, 0x9a, 0xe0, 0x5a, 0x91, 0x5f, 0x9e, 0x2f,
	0x40, 0xdf, 0x82, 0x7b, 0x13, 0xcf, 0x25, 0xf6, 0xdc, 0xfc, 0x05, 0x16, 0x46, 0xc6, 0x17, 0xd8,
	0x31, 0x6d, 0xa3, 0x56, 0x62, 0xa6, 0x36, 0xfc, 0x69, 0x6e, 0x70, 0xc0, 0x26, 0xd1, 0x2e, 0xac,
	0xb2, 0xd3, 0x95, 0xd9, 0x36, 0xd7, 0xe3, 0xfe, 0xc3, 0x0e, 0xc8, 0x10, 0x9c, 0x63, 0x8b, 0x98,
	0xd6, 0x14, 0x5b, 0x44, 0x12, 0x57, 0x91, 0x1c, 0xcb, 0x09, 0x4e, 0x5d, 0xe3, 0x0f, 0x0a, 0xac,
	0x73, 0x87, 0x8d, 0x79, 0xd4, 0x3e, 0xe4, 0xa5, 0xfb, 0x08, 0x9f, 0xbd, 0x2b, 0xd7, 0x8c, 0x22,
	0x35, 0x1f, 0x47, 0x2f, 0x8c, 0x3b, 0x59, 0xdc, 0x79, 0x2b, 0x4c, 0x3c, 0x94, 0x52, 0xf4, 0x75,
	0x50, 0x85, 0xa3, 0x05, 0x48, 0xee, 0x6a, 0x55, 0x2e, 0xf7, 0xa1, 0x8d, 0xdf, 0x2a, 0xb0, 0x11,
	0x5b, 0x10, 0xff, 0xcc, 0xc3, 0x2e, 0x41, 0xdf, 0x89, 0xec, 0x30, 0xbd, 0x5b, 0xdc, 0x7f, 0xc7,
	0xbf, 0xbc, 0x84, 0x13, 0x85, 0xf6, 0xf9, 0x43, 0x19, 0x0c, 0x93, 0x73, 0xdd, 0xb2, 0xf0, 0x8c,
	0xed, 0xb2, 0xb8, 0xff, 0xa0, 0x29, 0x72, 0x97, 0x88, 0x60, 0x3e, 0xd9, 0xb6, 0xe7, 0x73, 0x93,
	0x88, 0x48, 0x11, 0xb2, 0xc6, 0x6f, 0x52, 0x90, 0xe5, 0xe6, 0xaf, 0x0e, 0xbd, 0x07, 0x50, 0xe0,
	0xdb, 0xa2, 0xd3, 0x29, 0x76, 0x0f, 0x79, 0x2e, 0xe8, 0x1a, 0x34, 0x96, 0xce, 0x1c, 0x7b, 0x1e,
	0x0b, 0xb8, 0x22, 0x95, 0xc9, 0x58, 0xda, 0xa4, 0xde, 0x1d, 0x0b, 0xb6, 0x02, 0xb1, 0xbf, 0xd0,
	0x50, 0xdb, 0x04, 0xc0, 0x8e, 0x63, 0x3b, 0xe3, 0x89, 0x6d, 0x60, 0x16, 0x65, 0x19, 0xad, 0xc0,
	0x24, 0x6d, 0xdb, 0xc0, 0x34, 0x7b, 0xf0, 0xe9, 0x39, 0x76, 0x5d, 0x7d, 0xca, 0x63, 0xac, 0xa0,
	0x95, 0x98, 0xf0, 0x88, 0xcb, 0x1a, 0x7f, 0x4c, 0xc1, 0xfa, 0xd0, 0x3b, 0x9d, 0x9b, 0x24, 0xb8,
	0x29, 0xd7, 0x9b, 0x11, 0x74, 0x1f, 0xf2, 0x17, 0xfa, 0xc2, 0xb4, 0x02, 0x7a, 0x72, 0x6c, 0xdc,
	0x35, 0xd0, 0x7b, 0x20, 0x0a, 0x53, 0x2d, 0xc5, 0x6e, 0xb0, 0x12, 0xf5, 0x31, 0x4d, 0xcc, 0xd2,
	0xcc, 0x24, 0x38, 0x8c, 0x65, 0x26, 0x2e, 0x95, 0x5c, 0x68, 0x80, 0x04, 0xcc, 0x65, 0x57, 0x38,
	0xa6, 0xb5, 0x8a, 0x51, 0x56, 0xdc, 0xaf, 0x37, 0x79, 0x21, 0x6b, 0xca, 0x42, 0xd6, 0x1c, 0xc9,
	0x42, 0x76, 0x90, 0x7f, 0xfe, 0xef, 0xed, 0x95, 0x5f, 0xff, 0x67, 0x5b, 0xd1, 0x54, 0xae, 0xcf,
	0x3d, 0x80, 0x02, 0xd0, 0x8f, 0xe1, 0x4e, 0xc4, 0x59, 0xc6, 0x2e, 0xd1, 0x09, 0x66, 0x64, 0x53,
	0xa3, 0x49, 0x2e, 0x33, 0xa4, 0x08, 0x6d, 0x2d, 0xec, 0x31, 0x4c, 0xd4, 0xf8, 0x25, 0xd4, 0x39,
	0x30, 0x91, 0xa7, 0x6f, 0x42, 0xd6, 0x61, 0xff, 0x44, 0xc0, 0x05, 0xee, 0x9c, 0x80, 0xd6, 0x04,
	0x96, 0xc6, 0x52, 0xe8, 0xcc, 0xe1, 0xa8, 0xab, 0x06, 0x67, 0xe1, 0xb1, 0xf4, 0x17, 0x05, 0xd6,
	0x86, 0x44, 0x77, 0x88, 0x60, 0x97, 0x1b, 0x08, 0xee, 0x40, 0xb9, 0xe1, 0x1d, 0xa4, 0xae, 0x7f,
	0x07, 0xe9, 0xd7, 0xb9, 0x83, 0xc6, 0x33, 0xb8, 0x27, 0x78, 0x5b, 0xda, 0xfd, 0x47, 0x31, 0xd2,
	0xee, 0xfb, 0xa4, 0xc5, 0xa1, 0xb7, 0x61, 0xec, 0xf7, 0x0a, 0x94, 0x06, 0xd4, 0x57, 0x65, 0xd2,
	0x79, 0x85, 0x2f, 0x5f, 0xab, 0xc4, 0x5e, 0xe2, 0x4d, 0xe9, 0xdb, 0x78, 0xd3, 0x1c, 0x10, 0x07,
	0x46, 0x76, 0xd8, 0x84, 0x9c, 0xc3, 0xff, 0x0a, 0x46, 0xfc, 0x5a, 0x11, 0x86, 0x69, 0x12, 0x74,
	0xed, 0xa4, 0xdd, 0xf8, 0x97, 0x02, 0x45, 0x61, 0xe2, 0xaa, 0xb0, 0x0e, 0x72, 0x52, 0x2a, 0x92,
	0x93, 0x36, 0x01, 0xe4, 0xb9, 0x4d, 0x83, 0x1d, 0x3a, 0xad, 0x15, 0x84, 0xa4, 0x6b, 0x24, 0x78,
	0xd8, 0xea, 0xf5, 0x3d, 0x2c, 0xf3, 0x5a, 0x1e, 0xf6, 0x29, 0xac, 0x45, 0xb8, 0x64, 0x27, 0x7c,
	0x14, 0xf3, 0xad, 0x3b, 0x31, 0x26, 0x6f, 0xeb, 0x55, 0x7f, 0x93, 0x4c, 0xd2, 0x7b, 0xf4, 0x5c,
	0x84, 0x60, 0xf5, 0x42, 0x17, 0x2c, 0xe6, 0x35, 0xf6, 0x3f, 0x46, 0x55, 0xea, 0x6a, 0xaa, 0xbe,
	0xac, 0x84, 0x18, 0xa3, 0x4a, 0x1c, 0xe1, 0x11, 0x64, 0x5d, 0xf6, 0x2f, 0x91, 0x2a, 0x0e, 0xd2,
	0x04, 0xe4, 0x26, 0x54, 0xfd, 0x2a, 0xcb, 0x02, 0x90, 0x36, 0x60, 0x5c, 0xf7, 0x4d, 0x97, 0xdb,
	0x78, 0xf3, 0x9b, 0x59, 0x6e, 0x7e, 0xdf, 0xf7, 0xb9, 0xc8, 0x46, 0x9b, 0x35, 0x9e, 0x8d, 0x62,
	0x64, 0x04, 0xb1, 0x92, 0x8b, 0xc4, 0xca, 0x16, 0x40, 0x50, 0xa6, 0x59, 0xc1, 0x4d, 0x6b, 0x21,
	0x09, 0xaa, 0x43, 0x5e, 0xb6, 0xc1, 0xac, 0x77, 0x4d, 0x6b, 0xfe, 0x98, 0x92, 0x44, 0x9d, 0x48,
	0x56, 0x7d, 0xe0, 0xca, 0x54, 0x24, 0xea, 0xfd, 0x7d, 0xc8, 0xf3, 0x26, 0xd6, 0x34, 0x58, 0x8b,
	0x9a, 0xd1, 0x72, 0xac, 0x83, 0x35, 0x99, 0xee, 0x0c, 0x9f, 0xf9, 0x8d, 0x63, 0x89, 0xeb, 0x52,
	0x51, 0x54, 0x97, 0x4a, 0x58, 0x37, 0xca, 0x75, 0x7b, 0xf8, 0x8c, 0x7d, 0x86, 0x58, 0xf8, 0xb3,
	0x58, 0xd3, 0x09, 0x54, 0x24, 0x74, 0xfb, 0xa0, 0xce, 0x74, 0x97, 0xc8, 0xc6, 0x97, 0x79, 0x63,
	0xf5, 0x06, 0xde, 0x58, 0xa1, 0xda, 0xdc, 0x1f, 0x58, 0x71, 0xee, 0x83, 0xca, 0x16, 0x0c, 0xdb,
	0x53, 0x6f, 0x62, 0x8f, 0x6a, 0x87, 0xec, 0x2d, 0x87, 0xd5, 0x5a, 0x52, 0x58, 0xf5, 0x23, 0x0e,
	0xcc, 0x97, 0x45, 0x37, 0x59, 0x36, 0x70, 0x73, 0xb6, 0x2c, 0xf5, 0x59, 0xde, 0x5f, 0xb9, 0xd3,
	0xda, 0x1d, 0xe6, 0xd2, 0x79, 0xde, 0x5b, 0xb9, 0xd3, 0x48, 0x9a, 0x0f, 0xe2, 0xe0, 0xfd, 0x58,
	0xc0, 0x85, 0xb3, 0xbc, 0x8f, 0xba, 0x4d, 0xc4, 0x39, 0xb2, 0xd6, 0x86, 0x0d, 0xf1, 0x6f, 0xd8,
	0xf0, 0x9a, 0xe9, 0x2f, 0x72, 0xcd, 0x3f, 0x2b, 0xb0, 0xd1, 0xd6, 0xad, 0x09, 0xed, 0xb6, 0xa3,
	0x4d, 0xfe, 0x95, 0xe1, 0x1e, 0x8f, 0xc7, 0xd4, 0x72, 0x3c, 0xf6, 0x41, 0x65, 0x90, 0xdb, 0xf6,
	0x23, 0x15, 0xaa, 0x1d, 0x4a, 0x80, 0x1e, 0xdc, 0x11, 0x05, 0x9a, 0x6d, 0x59, 0x6e, 0xf5, 0xdb,
	0xf1, 0xc2, 0xbb, 0xe9, 0x7f, 0xa4, 0x25, 0x1d, 0x2d, 0xa8, 0xc0, 0xef, 0x42, 0xc5, 0xdf, 0x5f,
	0x98, 0xa6, 0xb2, 0x5c, 0x97, 0x93, 0xf4, 0x79, 0x0a, 0xd6, 0xe3, 0x96, 0x58, 0xe5, 0x79, 0xbd,
	0x94, 0x58, 0x87, 0xfc, 0x84, 0x59, 0xc5, 0xbc, 0x22, 0xe7, 0x35, 0x7f, 0xfc, 0x06, 0x0b, 0x72,
	0x28, 0x2d, 0x66, 0x23, 0x69, 0x51, 0xd6, 0xca, 0x5c, 0xa8, 0x56, 0x46, 0xbe, 0xb8, 0xf9, 0xa7,
	0x49, 0x20, 0x08, 0x9a, 0xee, 0x44, 0xf2, 0x2e, 0x6d, 0xba, 0x93, 0xd0, 0xb7, 0x29, 0xf6, 0x1e,
	0x94, 0x79, 0x78, 0x24, 0x17, 0x18, 0x25, 0x5e, 0x60, 0x3a, 0x50, 0x0c, 0xb3, 0x98, 0xba, 0x01,
	0x8b, 0xe0, 0x06, 0x4e, 0x6a, 0x48, 0x27, 0x8d, 0x2e, 0xbe, 0x17, 0xbc, 0x89, 0xf1, 0xf3, 0x6e,
	0x44, 0x63, 0x58, 0xe0, 0xfc, 0xa7, 0xb2, 0x2b, 0x9e, 0xa2, 0xfe, 0xaa, 0x40, 0x6e, 0xa0, 0x2f,
	0xe6, 0xd8, 0x22, 0x6f, 0xed, 0x87, 0xf0, 0x3a, 0x64, 0x4c, 0xcb, 0xc0, 0x9f, 0x31, 0x47, 0xca,
	0x68, 0x7c, 0xd0, 0xf8, 0x5c, 0x61, 0xf7, 0x42, 0x77, 0xae, 0xc9, 0x3b, 0xa5, 0xfd, 0x2b, 0x15,
	0x88, 0xf4, 0x56, 0x0d, 0x51, 0xc3, 0x70, 0x72, 0xfe, 0x4d, 0x7e, 0x0a, 0xd9, 0xa1, 0x7b, 0x0d,
	0x6d, 0xfe, 0x83, 0x98, 0x1b, 0x6f, 0xc4, 0xf7, 0x7e, 0x6b, 0xff, 0xfd, 0x93, 0x02, 0xe5, 0x03,
	0x7d, 0x46, 0xa3, 0x41, 0xac, 0x55, 0x83, 0xdc, 0x29, 0x17, 0xb0, 0xc5, 0xd2, 0x9a, 0x1c, 0xbe,
	0x15, 0xbc, 0x44, 0xf7, 0x7a, 0x29, 0x2f, 0x11, 0xd8, 0x2d, 0x78, 0x79, 0xb8, 0x0e, 0x05, 0xff,
	0x69, 0x11, 0xe5, 0x20, 0x7d, 0x30, 0x1a, 0xa9, 0x2b, 0x0f, 0x0f, 0x21, 0xef, 0xbf, 0x14, 0x16,
	0x21, 0x77, 0x74, 0xdc, 0x1f, 0xfd, 0xa8, 0xf7, 0x54, 0x5d, 0x41, 0x65, 0x28, 0xfc, 0xe4, 0xa4,
	0xa5, 0x8d, 0x3a, 0x5a, 0xef, 0xa9, 0xaa, 0xa0, 0x12, 0xe4, 0x5b, 0xfd, 0xfe, 0x49, 0xab, 0xd7,
	0x7b, 0xaa, 0xa6, 0x50, 0x05, 0xa0, 0x7d, 0x32, 0x1c, 0x1d, 0x1f, 0x75, 0x3f, 0xe9, 0x1c, 0xaa,
	0xe9, 0x87, 0x1f, 0x41, 0x29, 0xfc, 0xb0, 0x47, 0x2d, 0x69, 0x9d, 0xc7, 0x27, 0xbd, 0x96, 0xa6,
	0xae, 0xa0, 0x3c, 0xac, 0x0e, 0x7a, 0xad, 0xbe, 0xaa, 0x20, 0x80, 0xac, 0xd6, 0x79, 0xd2, 0x1d,
	0x76, 0xd4, 0xd4, 0xc3, 0x36, 0x94, 0xc2, 0xed, 0x25, 0x5d, 0xaf, 0xdb, 0xef, 0x8e, 0xba, 0xad,
	0x51, 0xe7, 0x50, 0x5d, 0xa1, 0xd0, 0x56, 0x7b, 0xd4, 0x7d, 0xd2, 0xe1, 0x6b, 0xb7, 0x5b, 0xfd,
	0x76, 0xa7, 0xd7, 0x39, 0x54, 0x53, 0x74, 0xa6, 0xdd, 0x3b, 0x1e, 0xd2, 0x75, 0xf7, 0xff, 0x97,
	0x85, 0xb2, 0xb0, 0x82, 0x9d, 0x9f, 0x9b, 0x13, 0x8c, 0x46, 0x50, 0x8d, 0xbe, 0x3e, 0xb8, 0x68,
	0xf3, 0x92, 0x77, 0x40, 0x5e, 0xcd, 0xea, 0x8d, 0xe8, 0x23, 0x5c, 0xe2, 0x4b, 0xc7, 0x11, 0x14,
	0x43, 0x9f, 0xe7, 0x57, 0x59, 0xdc, 0x8e, 0x59, 0x5c, 0x7a, 0x03, 0xf8, 0x01, 0x64, 0x06, 0xfa,
	0xa2, 0x6b, 0xa1, 0x7a, 0x14, 0x19, 0xfe, 0xe0, 0xad, 0xdf, 0x4f, 0x9c, 0x63, 0xfa, 0xdf, 0x87,
	0x6c, 0xd7, 0x65, 0xcd, 0x6f, 0x2d, 0x0a, 0x0a, 0x5e, 0xe7, 0x13, 0xd5, 0x05, 0xd5, 0x8f, 0xa1,
	0xfa, 0x18, 0xd3, 0x2e, 0xf2, 0xd8, 0xef, 0xce, 0x2e, 0xb7, 0xb3, 0xbc, 0xc5, 0xa0, 0xa7, 0x7b,
	0x02, 0xeb, 0x31, 0x43, 0xbc, 0xef, 0xda, 0xbc, 0xcc, 0x1a, 0x9b, 0x8e, 0xf3, 0xb3, 0xdc, 0xb7,
	0x69, 0x50, 0x8d, 0x56, 0x33, 0x17, 0x3d, 0x88, 0x99, 0x0c, 0x77, 0x32, 0xf1, 0x2b, 0x4c, 0xac,
	0x9b, 0x1d, 0x28, 0x1c, 0x2d, 0x64, 0xea, 0x7f, 0x90, 0xb4, 0x03, 0x11, 0xed, 0xf5, 0xe5, 0xc9,
	0x50, 0xde, 0xea, 0x41, 0x41, 0x44, 0xe2, 0xf1, 0x19, 0x6a, 0xc4, 0xde, 0x3f, 0x1c, 0xac, 0x13,
	0xdc, 0x9a, 0x4c, 0x68, 0x1a, 0x97, 0x7b, 0x8b, 0x59, 0x8b, 0x46, 0xfb, 0xc7, 0x50, 0xe6, 0x4a,
	0xe2, 0x9d, 0x04, 0xbd, 0xea, 0x49, 0xb7, 0xbe, 0x26, 0x27, 0x85, 0xb8, 0x7b, 0x88, 0x5a, 0x50,
	0x6a, 0xcf, 0x6c, 0xd7, 0xd7, 0x7f, 0xc5, 0x8b, 0x4c, 0x7d, 0x23, 0xa6, 0xce, 0x14, 0x0d, 0xf4,
	0x3d, 0x48, 0x0f, 0xf4, 0x05, 0xda, 0x8c, 0x6a, 0x8e, 0x1c, 0xdd, 0x72, 0xcf, 0xb0, 0x23, 0x8f,
	0x71, 0x57, 0x4e, 0x07, 0x13, 0xf4, 0x04, 0x07, 0x1f, 0x3f, 0x7f, 0xb1, 0xa5, 0xfc, 0xf3, 0xc5,
	0x96, 0xf2, 0xdf, 0x17, 0x5b, 0xca, 0xef, 0x5e, 0x6e, 0x29, 0x7f, 0x7f, 0xb9, 0xa5, 0x3c, 0x7f,
	0xb9, 0xa5, 0x40, 0xc5, 0xb4, 0x9b, 0xa7, 0xe4, 0xcc, 0x15, 0xe7, 0x3f, 0x28, 0xf2, 0x10, 0x18,
	0xd0, 0x34, 0x39, 0x50, 0x3e, 0x11, 0xaf, 0x74, 0xa7, 0x59, 0x96, 0x37, 0xbf, 0xf1, 0xff, 0x00,
	0x00, 0x00, 0xff, 0xff, 0xef, 0x1f, 0x47, 0xc3, 0x0d, 0x1c, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// EscrowServiceClient is the client API for EscrowService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type EscrowServiceClient interface {
	// buyer submit contracts to escrow after buyer and seller agreed contract
	// one contract is one buyer to one seller, and is one escrow in escrow service
	// buyer can submit multiple contracts in one request
	// return same number of results as request contracts
	SubmitContracts(ctx context.Context, in *EscrowContractRequest, opts ...grpc.CallOption) (*SignedSubmitContractResult, error)
	StartEscrow(ctx context.Context, in *EscrowContractRequest, opts ...grpc.CallOption) (*SignedStartEscrowResult, error)
	// after submit contract, buyer request to pay in
	// escrow will transfer contract amount from buyer wallet to escrow wallet
	PayIn(ctx context.Context, in *SignedPayinRequest, opts ...grpc.CallOption) (*SignedPayinResult, error)
	// seller use this to check if a contract is paid in
	IsPaid(ctx context.Context, in *SignedContractID, opts ...grpc.CallOption) (*SignedPayinStatus, error)
	// check escrow pay out to seller status of a contract
	GetPayOutStatus(ctx context.Context, in *SignedContractID, opts ...grpc.CallOption) (*SignedPayoutStatus, error)
	//get the payout status in batch
	GetPayOutStatusBatch(ctx context.Context, in *SignedContractIDBatch, opts ...grpc.CallOption) (*SignedPayoutStatusBatch, error)
	// auth request to cancel the contract
	// escrow will cancel the left payments to seller
	CancelContracts(ctx context.Context, in *SignedCancelRequest, opts ...grpc.CallOption) (*SignedCancelContractResult, error)
	// seller query what new payments to receive
	MyPayment(ctx context.Context, in *SignedPayoutAddress, opts ...grpc.CallOption) (*SignedPaymentResult, error)
	// query balance and create account if account not exist
	BalanceOf(ctx context.Context, in *ledger.SignedCreateAccountRequest, opts ...grpc.CallOption) (*SignedBalanceResult, error)
	// Creates a channel on the ledger and returns the ID of the ledger
	CreateChannel(ctx context.Context, in *ledger.SignedChannelCommit, opts ...grpc.CallOption) (*ledger.ChannelID, error)
	// Closes a channel on the ledger.
	CloseChannel(ctx context.Context, in *ledger.SignedChannelState, opts ...grpc.CallOption) (*ledger.ChannelClosed, error)
	//use escrow as proxy to do the payment
	Pay(ctx context.Context, in *ledger.SignedTransferRequest, opts ...grpc.CallOption) (*ledger.TransferResult, error)
}

type escrowServiceClient struct {
	cc *grpc.ClientConn
}

func NewEscrowServiceClient(cc *grpc.ClientConn) EscrowServiceClient {
	return &escrowServiceClient{cc}
}

func (c *escrowServiceClient) SubmitContracts(ctx context.Context, in *EscrowContractRequest, opts ...grpc.CallOption) (*SignedSubmitContractResult, error) {
	out := new(SignedSubmitContractResult)
	err := c.cc.Invoke(ctx, "/escrow.EscrowService/SubmitContracts", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *escrowServiceClient) StartEscrow(ctx context.Context, in *EscrowContractRequest, opts ...grpc.CallOption) (*SignedStartEscrowResult, error) {
	out := new(SignedStartEscrowResult)
	err := c.cc.Invoke(ctx, "/escrow.EscrowService/StartEscrow", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *escrowServiceClient) PayIn(ctx context.Context, in *SignedPayinRequest, opts ...grpc.CallOption) (*SignedPayinResult, error) {
	out := new(SignedPayinResult)
	err := c.cc.Invoke(ctx, "/escrow.EscrowService/PayIn", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *escrowServiceClient) IsPaid(ctx context.Context, in *SignedContractID, opts ...grpc.CallOption) (*SignedPayinStatus, error) {
	out := new(SignedPayinStatus)
	err := c.cc.Invoke(ctx, "/escrow.EscrowService/IsPaid", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *escrowServiceClient) GetPayOutStatus(ctx context.Context, in *SignedContractID, opts ...grpc.CallOption) (*SignedPayoutStatus, error) {
	out := new(SignedPayoutStatus)
	err := c.cc.Invoke(ctx, "/escrow.EscrowService/GetPayOutStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *escrowServiceClient) GetPayOutStatusBatch(ctx context.Context, in *SignedContractIDBatch, opts ...grpc.CallOption) (*SignedPayoutStatusBatch, error) {
	out := new(SignedPayoutStatusBatch)
	err := c.cc.Invoke(ctx, "/escrow.EscrowService/GetPayOutStatusBatch", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *escrowServiceClient) CancelContracts(ctx context.Context, in *SignedCancelRequest, opts ...grpc.CallOption) (*SignedCancelContractResult, error) {
	out := new(SignedCancelContractResult)
	err := c.cc.Invoke(ctx, "/escrow.EscrowService/CancelContracts", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *escrowServiceClient) MyPayment(ctx context.Context, in *SignedPayoutAddress, opts ...grpc.CallOption) (*SignedPaymentResult, error) {
	out := new(SignedPaymentResult)
	err := c.cc.Invoke(ctx, "/escrow.EscrowService/MyPayment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *escrowServiceClient) BalanceOf(ctx context.Context, in *ledger.SignedCreateAccountRequest, opts ...grpc.CallOption) (*SignedBalanceResult, error) {
	out := new(SignedBalanceResult)
	err := c.cc.Invoke(ctx, "/escrow.EscrowService/BalanceOf", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *escrowServiceClient) CreateChannel(ctx context.Context, in *ledger.SignedChannelCommit, opts ...grpc.CallOption) (*ledger.ChannelID, error) {
	out := new(ledger.ChannelID)
	err := c.cc.Invoke(ctx, "/escrow.EscrowService/CreateChannel", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *escrowServiceClient) CloseChannel(ctx context.Context, in *ledger.SignedChannelState, opts ...grpc.CallOption) (*ledger.ChannelClosed, error) {
	out := new(ledger.ChannelClosed)
	err := c.cc.Invoke(ctx, "/escrow.EscrowService/CloseChannel", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *escrowServiceClient) Pay(ctx context.Context, in *ledger.SignedTransferRequest, opts ...grpc.CallOption) (*ledger.TransferResult, error) {
	out := new(ledger.TransferResult)
	err := c.cc.Invoke(ctx, "/escrow.EscrowService/Pay", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// EscrowServiceServer is the server API for EscrowService service.
type EscrowServiceServer interface {
	// buyer submit contracts to escrow after buyer and seller agreed contract
	// one contract is one buyer to one seller, and is one escrow in escrow service
	// buyer can submit multiple contracts in one request
	// return same number of results as request contracts
	SubmitContracts(context.Context, *EscrowContractRequest) (*SignedSubmitContractResult, error)
	StartEscrow(context.Context, *EscrowContractRequest) (*SignedStartEscrowResult, error)
	// after submit contract, buyer request to pay in
	// escrow will transfer contract amount from buyer wallet to escrow wallet
	PayIn(context.Context, *SignedPayinRequest) (*SignedPayinResult, error)
	// seller use this to check if a contract is paid in
	IsPaid(context.Context, *SignedContractID) (*SignedPayinStatus, error)
	// check escrow pay out to seller status of a contract
	GetPayOutStatus(context.Context, *SignedContractID) (*SignedPayoutStatus, error)
	//get the payout status in batch
	GetPayOutStatusBatch(context.Context, *SignedContractIDBatch) (*SignedPayoutStatusBatch, error)
	// auth request to cancel the contract
	// escrow will cancel the left payments to seller
	CancelContracts(context.Context, *SignedCancelRequest) (*SignedCancelContractResult, error)
	// seller query what new payments to receive
	MyPayment(context.Context, *SignedPayoutAddress) (*SignedPaymentResult, error)
	// query balance and create account if account not exist
	BalanceOf(context.Context, *ledger.SignedCreateAccountRequest) (*SignedBalanceResult, error)
	// Creates a channel on the ledger and returns the ID of the ledger
	CreateChannel(context.Context, *ledger.SignedChannelCommit) (*ledger.ChannelID, error)
	// Closes a channel on the ledger.
	CloseChannel(context.Context, *ledger.SignedChannelState) (*ledger.ChannelClosed, error)
	//use escrow as proxy to do the payment
	Pay(context.Context, *ledger.SignedTransferRequest) (*ledger.TransferResult, error)
}

// UnimplementedEscrowServiceServer can be embedded to have forward compatible implementations.
type UnimplementedEscrowServiceServer struct {
}

func (*UnimplementedEscrowServiceServer) SubmitContracts(ctx context.Context, req *EscrowContractRequest) (*SignedSubmitContractResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SubmitContracts not implemented")
}
func (*UnimplementedEscrowServiceServer) StartEscrow(ctx context.Context, req *EscrowContractRequest) (*SignedStartEscrowResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StartEscrow not implemented")
}
func (*UnimplementedEscrowServiceServer) PayIn(ctx context.Context, req *SignedPayinRequest) (*SignedPayinResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PayIn not implemented")
}
func (*UnimplementedEscrowServiceServer) IsPaid(ctx context.Context, req *SignedContractID) (*SignedPayinStatus, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IsPaid not implemented")
}
func (*UnimplementedEscrowServiceServer) GetPayOutStatus(ctx context.Context, req *SignedContractID) (*SignedPayoutStatus, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPayOutStatus not implemented")
}
func (*UnimplementedEscrowServiceServer) GetPayOutStatusBatch(ctx context.Context, req *SignedContractIDBatch) (*SignedPayoutStatusBatch, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPayOutStatusBatch not implemented")
}
func (*UnimplementedEscrowServiceServer) CancelContracts(ctx context.Context, req *SignedCancelRequest) (*SignedCancelContractResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CancelContracts not implemented")
}
func (*UnimplementedEscrowServiceServer) MyPayment(ctx context.Context, req *SignedPayoutAddress) (*SignedPaymentResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MyPayment not implemented")
}
func (*UnimplementedEscrowServiceServer) BalanceOf(ctx context.Context, req *ledger.SignedCreateAccountRequest) (*SignedBalanceResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BalanceOf not implemented")
}
func (*UnimplementedEscrowServiceServer) CreateChannel(ctx context.Context, req *ledger.SignedChannelCommit) (*ledger.ChannelID, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateChannel not implemented")
}
func (*UnimplementedEscrowServiceServer) CloseChannel(ctx context.Context, req *ledger.SignedChannelState) (*ledger.ChannelClosed, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CloseChannel not implemented")
}
func (*UnimplementedEscrowServiceServer) Pay(ctx context.Context, req *ledger.SignedTransferRequest) (*ledger.TransferResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Pay not implemented")
}

func RegisterEscrowServiceServer(s *grpc.Server, srv EscrowServiceServer) {
	s.RegisterService(&_EscrowService_serviceDesc, srv)
}

func _EscrowService_SubmitContracts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EscrowContractRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EscrowServiceServer).SubmitContracts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/escrow.EscrowService/SubmitContracts",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EscrowServiceServer).SubmitContracts(ctx, req.(*EscrowContractRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EscrowService_StartEscrow_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EscrowContractRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EscrowServiceServer).StartEscrow(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/escrow.EscrowService/StartEscrow",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EscrowServiceServer).StartEscrow(ctx, req.(*EscrowContractRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EscrowService_PayIn_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SignedPayinRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EscrowServiceServer).PayIn(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/escrow.EscrowService/PayIn",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EscrowServiceServer).PayIn(ctx, req.(*SignedPayinRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EscrowService_IsPaid_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SignedContractID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EscrowServiceServer).IsPaid(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/escrow.EscrowService/IsPaid",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EscrowServiceServer).IsPaid(ctx, req.(*SignedContractID))
	}
	return interceptor(ctx, in, info, handler)
}

func _EscrowService_GetPayOutStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SignedContractID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EscrowServiceServer).GetPayOutStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/escrow.EscrowService/GetPayOutStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EscrowServiceServer).GetPayOutStatus(ctx, req.(*SignedContractID))
	}
	return interceptor(ctx, in, info, handler)
}

func _EscrowService_GetPayOutStatusBatch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SignedContractIDBatch)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EscrowServiceServer).GetPayOutStatusBatch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/escrow.EscrowService/GetPayOutStatusBatch",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EscrowServiceServer).GetPayOutStatusBatch(ctx, req.(*SignedContractIDBatch))
	}
	return interceptor(ctx, in, info, handler)
}

func _EscrowService_CancelContracts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SignedCancelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EscrowServiceServer).CancelContracts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/escrow.EscrowService/CancelContracts",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EscrowServiceServer).CancelContracts(ctx, req.(*SignedCancelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EscrowService_MyPayment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SignedPayoutAddress)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EscrowServiceServer).MyPayment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/escrow.EscrowService/MyPayment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EscrowServiceServer).MyPayment(ctx, req.(*SignedPayoutAddress))
	}
	return interceptor(ctx, in, info, handler)
}

func _EscrowService_BalanceOf_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ledger.SignedCreateAccountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EscrowServiceServer).BalanceOf(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/escrow.EscrowService/BalanceOf",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EscrowServiceServer).BalanceOf(ctx, req.(*ledger.SignedCreateAccountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EscrowService_CreateChannel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ledger.SignedChannelCommit)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EscrowServiceServer).CreateChannel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/escrow.EscrowService/CreateChannel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EscrowServiceServer).CreateChannel(ctx, req.(*ledger.SignedChannelCommit))
	}
	return interceptor(ctx, in, info, handler)
}

func _EscrowService_CloseChannel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ledger.SignedChannelState)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EscrowServiceServer).CloseChannel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/escrow.EscrowService/CloseChannel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EscrowServiceServer).CloseChannel(ctx, req.(*ledger.SignedChannelState))
	}
	return interceptor(ctx, in, info, handler)
}

func _EscrowService_Pay_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ledger.SignedTransferRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EscrowServiceServer).Pay(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/escrow.EscrowService/Pay",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EscrowServiceServer).Pay(ctx, req.(*ledger.SignedTransferRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _EscrowService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "escrow.EscrowService",
	HandlerType: (*EscrowServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SubmitContracts",
			Handler:    _EscrowService_SubmitContracts_Handler,
		},
		{
			MethodName: "StartEscrow",
			Handler:    _EscrowService_StartEscrow_Handler,
		},
		{
			MethodName: "PayIn",
			Handler:    _EscrowService_PayIn_Handler,
		},
		{
			MethodName: "IsPaid",
			Handler:    _EscrowService_IsPaid_Handler,
		},
		{
			MethodName: "GetPayOutStatus",
			Handler:    _EscrowService_GetPayOutStatus_Handler,
		},
		{
			MethodName: "GetPayOutStatusBatch",
			Handler:    _EscrowService_GetPayOutStatusBatch_Handler,
		},
		{
			MethodName: "CancelContracts",
			Handler:    _EscrowService_CancelContracts_Handler,
		},
		{
			MethodName: "MyPayment",
			Handler:    _EscrowService_MyPayment_Handler,
		},
		{
			MethodName: "BalanceOf",
			Handler:    _EscrowService_BalanceOf_Handler,
		},
		{
			MethodName: "CreateChannel",
			Handler:    _EscrowService_CreateChannel_Handler,
		},
		{
			MethodName: "CloseChannel",
			Handler:    _EscrowService_CloseChannel_Handler,
		},
		{
			MethodName: "Pay",
			Handler:    _EscrowService_Pay_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "protos/escrow/escrow.proto",
}

func (m *ContractID) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ContractID) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ContractID) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintEscrow(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.ContractId) > 0 {
		i -= len(m.ContractId)
		copy(dAtA[i:], m.ContractId)
		i = encodeVarintEscrow(dAtA, i, uint64(len(m.ContractId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ContractIDBatch) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ContractIDBatch) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ContractIDBatch) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintEscrow(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.ContractId) > 0 {
		for iNdEx := len(m.ContractId) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.ContractId[iNdEx])
			copy(dAtA[i:], m.ContractId[iNdEx])
			i = encodeVarintEscrow(dAtA, i, uint64(len(m.ContractId[iNdEx])))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *SignedContractID) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SignedContractID) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SignedContractID) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Signature) > 0 {
		i -= len(m.Signature)
		copy(dAtA[i:], m.Signature)
		i = encodeVarintEscrow(dAtA, i, uint64(len(m.Signature)))
		i--
		dAtA[i] = 0x12
	}
	if m.Data != nil {
		{
			size, err := m.Data.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintEscrow(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *SignedContractIDBatch) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SignedContractIDBatch) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SignedContractIDBatch) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Signature) > 0 {
		i -= len(m.Signature)
		copy(dAtA[i:], m.Signature)
		i = encodeVarintEscrow(dAtA, i, uint64(len(m.Signature)))
		i--
		dAtA[i] = 0x12
	}
	if m.Data != nil {
		{
			size, err := m.Data.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintEscrow(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *EscrowContract) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EscrowContract) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EscrowContract) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.ContingentAmount != 0 {
		i = encodeVarintEscrow(dAtA, i, uint64(m.ContingentAmount))
		i--
		dAtA[i] = 0x70
	}
	if m.Type != 0 {
		i = encodeVarintEscrow(dAtA, i, uint64(m.Type))
		i--
		dAtA[i] = 0x68
	}
	if m.CustomizePayoutPeriod != 0 {
		i = encodeVarintEscrow(dAtA, i, uint64(m.CustomizePayoutPeriod))
		i--
		dAtA[i] = 0x60
	}
	if len(m.Reference) > 0 {
		i -= len(m.Reference)
		copy(dAtA[i:], m.Reference)
		i = encodeVarintEscrow(dAtA, i, uint64(len(m.Reference)))
		i--
		dAtA[i] = 0x5a
	}
	if m.NumPayouts != 0 {
		i = encodeVarintEscrow(dAtA, i, uint64(m.NumPayouts))
		i--
		dAtA[i] = 0x50
	}
	if m.PayoutSchedule != 0 {
		i = encodeVarintEscrow(dAtA, i, uint64(m.PayoutSchedule))
		i--
		dAtA[i] = 0x48
	}
	if m.TokenType != 0 {
		i = encodeVarintEscrow(dAtA, i, uint64(m.TokenType))
		i--
		dAtA[i] = 0x40
	}
	if m.WithholdAmount != 0 {
		i = encodeVarintEscrow(dAtA, i, uint64(m.WithholdAmount))
		i--
		dAtA[i] = 0x38
	}
	if m.CollateralAmount != 0 {
		i = encodeVarintEscrow(dAtA, i, uint64(m.CollateralAmount))
		i--
		dAtA[i] = 0x30
	}
	if m.Amount != 0 {
		i = encodeVarintEscrow(dAtA, i, uint64(m.Amount))
		i--
		dAtA[i] = 0x28
	}
	if len(m.AuthAddress) > 0 {
		i -= len(m.AuthAddress)
		copy(dAtA[i:], m.AuthAddress)
		i = encodeVarintEscrow(dAtA, i, uint64(len(m.AuthAddress)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.SellerAddress) > 0 {
		i -= len(m.SellerAddress)
		copy(dAtA[i:], m.SellerAddress)
		i = encodeVarintEscrow(dAtA, i, uint64(len(m.SellerAddress)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.BuyerAddress) > 0 {
		i -= len(m.BuyerAddress)
		copy(dAtA[i:], m.BuyerAddress)
		i = encodeVarintEscrow(dAtA, i, uint64(len(m.BuyerAddress)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.ContractId) > 0 {
		i -= len(m.ContractId)
		copy(dAtA[i:], m.ContractId)
		i = encodeVarintEscrow(dAtA, i, uint64(len(m.ContractId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *SignedEscrowContract) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SignedEscrowContract) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SignedEscrowContract) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.SellerSignature) > 0 {
		i -= len(m.SellerSignature)
		copy(dAtA[i:], m.SellerSignature)
		i = encodeVarintEscrow(dAtA, i, uint64(len(m.SellerSignature)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.BuyerSignature) > 0 {
		i -= len(m.BuyerSignature)
		copy(dAtA[i:], m.BuyerSignature)
		i = encodeVarintEscrow(dAtA, i, uint64(len(m.BuyerSignature)))
		i--
		dAtA[i] = 0x12
	}
	if m.Contract != nil {
		{
			size, err := m.Contract.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintEscrow(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *EscrowContractRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EscrowContractRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EscrowContractRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.BuyerChannel != nil {
		{
			size, err := m.BuyerChannel.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintEscrow(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Contract) > 0 {
		for iNdEx := len(m.Contract) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Contract[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintEscrow(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *Escrow) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Escrow) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Escrow) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.ErrorMessage) > 0 {
		i -= len(m.ErrorMessage)
		copy(dAtA[i:], m.ErrorMessage)
		i = encodeVarintEscrow(dAtA, i, uint64(len(m.ErrorMessage)))
		i--
		dAtA[i] = 0x42
	}
	if m.ErrorCode != 0 {
		i = encodeVarintEscrow(dAtA, i, uint64(m.ErrorCode))
		i--
		dAtA[i] = 0x38
	}
	if m.CollateralAmount != 0 {
		i = encodeVarintEscrow(dAtA, i, uint64(m.CollateralAmount))
		i--
		dAtA[i] = 0x30
	}
	if m.Amount != 0 {
		i = encodeVarintEscrow(dAtA, i, uint64(m.Amount))
		i--
		dAtA[i] = 0x28
	}
	if len(m.ToAddress) > 0 {
		i -= len(m.ToAddress)
		copy(dAtA[i:], m.ToAddress)
		i = encodeVarintEscrow(dAtA, i, uint64(len(m.ToAddress)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.FromAddress) > 0 {
		i -= len(m.FromAddress)
		copy(dAtA[i:], m.FromAddress)
		i = encodeVarintEscrow(dAtA, i, uint64(len(m.FromAddress)))
		i--
		dAtA[i] = 0x1a
	}
	if m.EscrowId != 0 {
		i = encodeVarintEscrow(dAtA, i, uint64(m.EscrowId))
		i--
		dAtA[i] = 0x10
	}
	if len(m.ContractId) > 0 {
		i -= len(m.ContractId)
		copy(dAtA[i:], m.ContractId)
		i = encodeVarintEscrow(dAtA, i, uint64(len(m.ContractId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *SubmitContractResult) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SubmitContractResult) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SubmitContractResult) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.BuyerChannelState != nil {
		{
			size, err := m.BuyerChannelState.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintEscrow(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	n6, err6 := github_com_tron_us_protobuf_types.StdTimeMarshalTo(m.EscrowSignedTime, dAtA[i-github_com_tron_us_protobuf_types.SizeOfStdTime(m.EscrowSignedTime):])
	if err6 != nil {
		return 0, err6
	}
	i -= n6
	i = encodeVarintEscrow(dAtA, i, uint64(n6))
	i--
	dAtA[i] = 0x22
	if len(m.EscrowAddress) > 0 {
		i -= len(m.EscrowAddress)
		copy(dAtA[i:], m.EscrowAddress)
		i = encodeVarintEscrow(dAtA, i, uint64(len(m.EscrowAddress)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Escrow) > 0 {
		for iNdEx := len(m.Escrow) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Escrow[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintEscrow(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.PayinId) > 0 {
		i -= len(m.PayinId)
		copy(dAtA[i:], m.PayinId)
		i = encodeVarintEscrow(dAtA, i, uint64(len(m.PayinId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *SignedSubmitContractResult) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SignedSubmitContractResult) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SignedSubmitContractResult) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.EscrowSignature) > 0 {
		i -= len(m.EscrowSignature)
		copy(dAtA[i:], m.EscrowSignature)
		i = encodeVarintEscrow(dAtA, i, uint64(len(m.EscrowSignature)))
		i--
		dAtA[i] = 0x12
	}
	if m.Result != nil {
		{
			size, err := m.Result.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintEscrow(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *StartEscrowResult) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *StartEscrowResult) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *StartEscrowResult) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	n8, err8 := github_com_tron_us_protobuf_types.StdTimeMarshalTo(m.EscrowSignedTime, dAtA[i-github_com_tron_us_protobuf_types.SizeOfStdTime(m.EscrowSignedTime):])
	if err8 != nil {
		return 0, err8
	}
	i -= n8
	i = encodeVarintEscrow(dAtA, i, uint64(n8))
	i--
	dAtA[i] = 0x1a
	if len(m.EscrowAddress) > 0 {
		i -= len(m.EscrowAddress)
		copy(dAtA[i:], m.EscrowAddress)
		i = encodeVarintEscrow(dAtA, i, uint64(len(m.EscrowAddress)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Escrow) > 0 {
		for iNdEx := len(m.Escrow) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Escrow[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintEscrow(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *SignedStartEscrowResult) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SignedStartEscrowResult) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SignedStartEscrowResult) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.EscrowSignature) > 0 {
		i -= len(m.EscrowSignature)
		copy(dAtA[i:], m.EscrowSignature)
		i = encodeVarintEscrow(dAtA, i, uint64(len(m.EscrowSignature)))
		i--
		dAtA[i] = 0x12
	}
	if m.Result != nil {
		{
			size, err := m.Result.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintEscrow(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *PayinRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PayinRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PayinRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.BuyerChannelState != nil {
		{
			size, err := m.BuyerChannelState.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintEscrow(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if len(m.BuyerAddress) > 0 {
		i -= len(m.BuyerAddress)
		copy(dAtA[i:], m.BuyerAddress)
		i = encodeVarintEscrow(dAtA, i, uint64(len(m.BuyerAddress)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.PayinId) > 0 {
		i -= len(m.PayinId)
		copy(dAtA[i:], m.PayinId)
		i = encodeVarintEscrow(dAtA, i, uint64(len(m.PayinId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *SignedPayinRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SignedPayinRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SignedPayinRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.BuyerSignature) > 0 {
		i -= len(m.BuyerSignature)
		copy(dAtA[i:], m.BuyerSignature)
		i = encodeVarintEscrow(dAtA, i, uint64(len(m.BuyerSignature)))
		i--
		dAtA[i] = 0x12
	}
	if m.Request != nil {
		{
			size, err := m.Request.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintEscrow(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *PayinResult) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PayinResult) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PayinResult) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	n12, err12 := github_com_tron_us_protobuf_types.StdTimeMarshalTo(m.EscrowSignedTime, dAtA[i-github_com_tron_us_protobuf_types.SizeOfStdTime(m.EscrowSignedTime):])
	if err12 != nil {
		return 0, err12
	}
	i -= n12
	i = encodeVarintEscrow(dAtA, i, uint64(n12))
	i--
	dAtA[i] = 0x2a
	if len(m.EscrowAddress) > 0 {
		i -= len(m.EscrowAddress)
		copy(dAtA[i:], m.EscrowAddress)
		i = encodeVarintEscrow(dAtA, i, uint64(len(m.EscrowAddress)))
		i--
		dAtA[i] = 0x22
	}
	if m.ChannelId != 0 {
		i = encodeVarintEscrow(dAtA, i, uint64(m.ChannelId))
		i--
		dAtA[i] = 0x18
	}
	if m.Amount != 0 {
		i = encodeVarintEscrow(dAtA, i, uint64(m.Amount))
		i--
		dAtA[i] = 0x10
	}
	if len(m.PayinId) > 0 {
		i -= len(m.PayinId)
		copy(dAtA[i:], m.PayinId)
		i = encodeVarintEscrow(dAtA, i, uint64(len(m.PayinId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *SignedPayinResult) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SignedPayinResult) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SignedPayinResult) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.EscrowSignature) > 0 {
		i -= len(m.EscrowSignature)
		copy(dAtA[i:], m.EscrowSignature)
		i = encodeVarintEscrow(dAtA, i, uint64(len(m.EscrowSignature)))
		i--
		dAtA[i] = 0x12
	}
	if m.Result != nil {
		{
			size, err := m.Result.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintEscrow(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *PayinStatus) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PayinStatus) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PayinStatus) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	n14, err14 := github_com_tron_us_protobuf_types.StdTimeMarshalTo(m.EscrowSignedTime, dAtA[i-github_com_tron_us_protobuf_types.SizeOfStdTime(m.EscrowSignedTime):])
	if err14 != nil {
		return 0, err14
	}
	i -= n14
	i = encodeVarintEscrow(dAtA, i, uint64(n14))
	i--
	dAtA[i] = 0x22
	if len(m.EscrowAddress) > 0 {
		i -= len(m.EscrowAddress)
		copy(dAtA[i:], m.EscrowAddress)
		i = encodeVarintEscrow(dAtA, i, uint64(len(m.EscrowAddress)))
		i--
		dAtA[i] = 0x1a
	}
	if m.ChannelId != 0 {
		i = encodeVarintEscrow(dAtA, i, uint64(m.ChannelId))
		i--
		dAtA[i] = 0x10
	}
	if m.Paid {
		i--
		if m.Paid {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *SignedPayinStatus) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SignedPayinStatus) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SignedPayinStatus) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.EscrowSignature) > 0 {
		i -= len(m.EscrowSignature)
		copy(dAtA[i:], m.EscrowSignature)
		i = encodeVarintEscrow(dAtA, i, uint64(len(m.EscrowSignature)))
		i--
		dAtA[i] = 0x12
	}
	if m.Status != nil {
		{
			size, err := m.Status.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintEscrow(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *PayoutStatus) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PayoutStatus) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PayoutStatus) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.ErrorMsg) > 0 {
		i -= len(m.ErrorMsg)
		copy(dAtA[i:], m.ErrorMsg)
		i = encodeVarintEscrow(dAtA, i, uint64(len(m.ErrorMsg)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x9a
	}
	n16, err16 := github_com_tron_us_protobuf_types.StdTimeMarshalTo(m.EscrowSignTime, dAtA[i-github_com_tron_us_protobuf_types.SizeOfStdTime(m.EscrowSignTime):])
	if err16 != nil {
		return 0, err16
	}
	i -= n16
	i = encodeVarintEscrow(dAtA, i, uint64(n16))
	i--
	dAtA[i] = 0x1
	i--
	dAtA[i] = 0x92
	if len(m.EscrowAddress) > 0 {
		i -= len(m.EscrowAddress)
		copy(dAtA[i:], m.EscrowAddress)
		i = encodeVarintEscrow(dAtA, i, uint64(len(m.EscrowAddress)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x8a
	}
	n17, err17 := github_com_tron_us_protobuf_types.StdTimeMarshalTo(m.NextPayoutTime, dAtA[i-github_com_tron_us_protobuf_types.SizeOfStdTime(m.NextPayoutTime):])
	if err17 != nil {
		return 0, err17
	}
	i -= n17
	i = encodeVarintEscrow(dAtA, i, uint64(n17))
	i--
	dAtA[i] = 0x1
	i--
	dAtA[i] = 0x82
	n18, err18 := github_com_tron_us_protobuf_types.StdTimeMarshalTo(m.LastPayoutTime, dAtA[i-github_com_tron_us_protobuf_types.SizeOfStdTime(m.LastPayoutTime):])
	if err18 != nil {
		return 0, err18
	}
	i -= n18
	i = encodeVarintEscrow(dAtA, i, uint64(n18))
	i--
	dAtA[i] = 0x7a
	if m.NextAmount != 0 {
		i = encodeVarintEscrow(dAtA, i, uint64(m.NextAmount))
		i--
		dAtA[i] = 0x70
	}
	if m.NumLeft != 0 {
		i = encodeVarintEscrow(dAtA, i, uint64(m.NumLeft))
		i--
		dAtA[i] = 0x68
	}
	if m.LeftAmount != 0 {
		i = encodeVarintEscrow(dAtA, i, uint64(m.LeftAmount))
		i--
		dAtA[i] = 0x60
	}
	if m.NumPaid != 0 {
		i = encodeVarintEscrow(dAtA, i, uint64(m.NumPaid))
		i--
		dAtA[i] = 0x58
	}
	if m.PaidAmount != 0 {
		i = encodeVarintEscrow(dAtA, i, uint64(m.PaidAmount))
		i--
		dAtA[i] = 0x50
	}
	if m.Withhold != 0 {
		i = encodeVarintEscrow(dAtA, i, uint64(m.Withhold))
		i--
		dAtA[i] = 0x48
	}
	if m.Collateral != 0 {
		i = encodeVarintEscrow(dAtA, i, uint64(m.Collateral))
		i--
		dAtA[i] = 0x40
	}
	if m.Amount != 0 {
		i = encodeVarintEscrow(dAtA, i, uint64(m.Amount))
		i--
		dAtA[i] = 0x38
	}
	if m.Status != 0 {
		i = encodeVarintEscrow(dAtA, i, uint64(m.Status))
		i--
		dAtA[i] = 0x30
	}
	if len(m.AuthAddress) > 0 {
		i -= len(m.AuthAddress)
		copy(dAtA[i:], m.AuthAddress)
		i = encodeVarintEscrow(dAtA, i, uint64(len(m.AuthAddress)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.ToAddress) > 0 {
		i -= len(m.ToAddress)
		copy(dAtA[i:], m.ToAddress)
		i = encodeVarintEscrow(dAtA, i, uint64(len(m.ToAddress)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.FromAddress) > 0 {
		i -= len(m.FromAddress)
		copy(dAtA[i:], m.FromAddress)
		i = encodeVarintEscrow(dAtA, i, uint64(len(m.FromAddress)))
		i--
		dAtA[i] = 0x1a
	}
	if m.EscrowId != 0 {
		i = encodeVarintEscrow(dAtA, i, uint64(m.EscrowId))
		i--
		dAtA[i] = 0x10
	}
	if len(m.ContractId) > 0 {
		i -= len(m.ContractId)
		copy(dAtA[i:], m.ContractId)
		i = encodeVarintEscrow(dAtA, i, uint64(len(m.ContractId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *SignedPayoutStatus) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SignedPayoutStatus) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SignedPayoutStatus) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.EscrowSignature) > 0 {
		i -= len(m.EscrowSignature)
		copy(dAtA[i:], m.EscrowSignature)
		i = encodeVarintEscrow(dAtA, i, uint64(len(m.EscrowSignature)))
		i--
		dAtA[i] = 0x12
	}
	if m.Status != nil {
		{
			size, err := m.Status.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintEscrow(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *SignedPayoutStatusBatch) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SignedPayoutStatusBatch) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SignedPayoutStatusBatch) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.EscrowSignature) > 0 {
		i -= len(m.EscrowSignature)
		copy(dAtA[i:], m.EscrowSignature)
		i = encodeVarintEscrow(dAtA, i, uint64(len(m.EscrowSignature)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Status) > 0 {
		for iNdEx := len(m.Status) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Status[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintEscrow(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *CancelContractRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CancelContractRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CancelContractRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	n20, err20 := github_com_tron_us_protobuf_types.StdTimeMarshalTo(m.AuthSignedTime, dAtA[i-github_com_tron_us_protobuf_types.SizeOfStdTime(m.AuthSignedTime):])
	if err20 != nil {
		return 0, err20
	}
	i -= n20
	i = encodeVarintEscrow(dAtA, i, uint64(n20))
	i--
	dAtA[i] = 0x1a
	if len(m.AuthAddress) > 0 {
		i -= len(m.AuthAddress)
		copy(dAtA[i:], m.AuthAddress)
		i = encodeVarintEscrow(dAtA, i, uint64(len(m.AuthAddress)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.ContractId) > 0 {
		i -= len(m.ContractId)
		copy(dAtA[i:], m.ContractId)
		i = encodeVarintEscrow(dAtA, i, uint64(len(m.ContractId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *SignedCancelRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SignedCancelRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SignedCancelRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.AuthSignature) > 0 {
		i -= len(m.AuthSignature)
		copy(dAtA[i:], m.AuthSignature)
		i = encodeVarintEscrow(dAtA, i, uint64(len(m.AuthSignature)))
		i--
		dAtA[i] = 0x12
	}
	if m.Request != nil {
		{
			size, err := m.Request.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintEscrow(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *CancelContractResult) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CancelContractResult) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CancelContractResult) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Reference) > 0 {
		i -= len(m.Reference)
		copy(dAtA[i:], m.Reference)
		i = encodeVarintEscrow(dAtA, i, uint64(len(m.Reference)))
		i--
		dAtA[i] = 0x42
	}
	if m.Paid {
		i--
		if m.Paid {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x38
	}
	if m.Amount != 0 {
		i = encodeVarintEscrow(dAtA, i, uint64(m.Amount))
		i--
		dAtA[i] = 0x30
	}
	n22, err22 := github_com_tron_us_protobuf_types.StdTimeMarshalTo(m.EscrowSignedTime, dAtA[i-github_com_tron_us_protobuf_types.SizeOfStdTime(m.EscrowSignedTime):])
	if err22 != nil {
		return 0, err22
	}
	i -= n22
	i = encodeVarintEscrow(dAtA, i, uint64(n22))
	i--
	dAtA[i] = 0x2a
	if len(m.EscrowAddress) > 0 {
		i -= len(m.EscrowAddress)
		copy(dAtA[i:], m.EscrowAddress)
		i = encodeVarintEscrow(dAtA, i, uint64(len(m.EscrowAddress)))
		i--
		dAtA[i] = 0x22
	}
	if m.Canceled {
		i--
		if m.Canceled {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x18
	}
	if m.EscrowId != 0 {
		i = encodeVarintEscrow(dAtA, i, uint64(m.EscrowId))
		i--
		dAtA[i] = 0x10
	}
	if len(m.ContractId) > 0 {
		i -= len(m.ContractId)
		copy(dAtA[i:], m.ContractId)
		i = encodeVarintEscrow(dAtA, i, uint64(len(m.ContractId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *SignedCancelContractResult) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SignedCancelContractResult) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SignedCancelContractResult) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.EscrowSignature) > 0 {
		i -= len(m.EscrowSignature)
		copy(dAtA[i:], m.EscrowSignature)
		i = encodeVarintEscrow(dAtA, i, uint64(len(m.EscrowSignature)))
		i--
		dAtA[i] = 0x12
	}
	if m.Result != nil {
		{
			size, err := m.Result.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintEscrow(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *PayoutAddress) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PayoutAddress) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PayoutAddress) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	n24, err24 := github_com_tron_us_protobuf_types.StdTimeMarshalTo(m.SignedTime, dAtA[i-github_com_tron_us_protobuf_types.SizeOfStdTime(m.SignedTime):])
	if err24 != nil {
		return 0, err24
	}
	i -= n24
	i = encodeVarintEscrow(dAtA, i, uint64(n24))
	i--
	dAtA[i] = 0x12
	if len(m.ToAddress) > 0 {
		i -= len(m.ToAddress)
		copy(dAtA[i:], m.ToAddress)
		i = encodeVarintEscrow(dAtA, i, uint64(len(m.ToAddress)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *SignedPayoutAddress) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SignedPayoutAddress) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SignedPayoutAddress) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Signature) > 0 {
		i -= len(m.Signature)
		copy(dAtA[i:], m.Signature)
		i = encodeVarintEscrow(dAtA, i, uint64(len(m.Signature)))
		i--
		dAtA[i] = 0x12
	}
	if m.Address != nil {
		{
			size, err := m.Address.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintEscrow(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Payment) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Payment) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Payment) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Index != 0 {
		i = encodeVarintEscrow(dAtA, i, uint64(m.Index))
		i--
		dAtA[i] = 0x30
	}
	if m.Amount != 0 {
		i = encodeVarintEscrow(dAtA, i, uint64(m.Amount))
		i--
		dAtA[i] = 0x28
	}
	if len(m.ToAddress) > 0 {
		i -= len(m.ToAddress)
		copy(dAtA[i:], m.ToAddress)
		i = encodeVarintEscrow(dAtA, i, uint64(len(m.ToAddress)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.FromAddress) > 0 {
		i -= len(m.FromAddress)
		copy(dAtA[i:], m.FromAddress)
		i = encodeVarintEscrow(dAtA, i, uint64(len(m.FromAddress)))
		i--
		dAtA[i] = 0x1a
	}
	if m.EscrowId != 0 {
		i = encodeVarintEscrow(dAtA, i, uint64(m.EscrowId))
		i--
		dAtA[i] = 0x10
	}
	if len(m.ContractId) > 0 {
		i -= len(m.ContractId)
		copy(dAtA[i:], m.ContractId)
		i = encodeVarintEscrow(dAtA, i, uint64(len(m.ContractId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *PaymentResult) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PaymentResult) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PaymentResult) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	n26, err26 := github_com_tron_us_protobuf_types.StdTimeMarshalTo(m.EscrowSignedTime, dAtA[i-github_com_tron_us_protobuf_types.SizeOfStdTime(m.EscrowSignedTime):])
	if err26 != nil {
		return 0, err26
	}
	i -= n26
	i = encodeVarintEscrow(dAtA, i, uint64(n26))
	i--
	dAtA[i] = 0x1a
	if len(m.EscrowAddress) > 0 {
		i -= len(m.EscrowAddress)
		copy(dAtA[i:], m.EscrowAddress)
		i = encodeVarintEscrow(dAtA, i, uint64(len(m.EscrowAddress)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Payment) > 0 {
		for iNdEx := len(m.Payment) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Payment[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintEscrow(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *SignedPaymentResult) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SignedPaymentResult) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SignedPaymentResult) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.EscrowSignature) > 0 {
		i -= len(m.EscrowSignature)
		copy(dAtA[i:], m.EscrowSignature)
		i = encodeVarintEscrow(dAtA, i, uint64(len(m.EscrowSignature)))
		i--
		dAtA[i] = 0x12
	}
	if m.Result != nil {
		{
			size, err := m.Result.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintEscrow(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *BalanceResult) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BalanceResult) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BalanceResult) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	n28, err28 := github_com_tron_us_protobuf_types.StdTimeMarshalTo(m.EscrowSignedTime, dAtA[i-github_com_tron_us_protobuf_types.SizeOfStdTime(m.EscrowSignedTime):])
	if err28 != nil {
		return 0, err28
	}
	i -= n28
	i = encodeVarintEscrow(dAtA, i, uint64(n28))
	i--
	dAtA[i] = 0x1a
	if len(m.EscrowAddress) > 0 {
		i -= len(m.EscrowAddress)
		copy(dAtA[i:], m.EscrowAddress)
		i = encodeVarintEscrow(dAtA, i, uint64(len(m.EscrowAddress)))
		i--
		dAtA[i] = 0x12
	}
	if m.Balance != 0 {
		i = encodeVarintEscrow(dAtA, i, uint64(m.Balance))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *SignedBalanceResult) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SignedBalanceResult) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SignedBalanceResult) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.EscrowSignature) > 0 {
		i -= len(m.EscrowSignature)
		copy(dAtA[i:], m.EscrowSignature)
		i = encodeVarintEscrow(dAtA, i, uint64(len(m.EscrowSignature)))
		i--
		dAtA[i] = 0x12
	}
	if m.Result != nil {
		{
			size, err := m.Result.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintEscrow(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintEscrow(dAtA []byte, offset int, v uint64) int {
	offset -= sovEscrow(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *ContractID) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ContractId)
	if l > 0 {
		n += 1 + l + sovEscrow(uint64(l))
	}
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovEscrow(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ContractIDBatch) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.ContractId) > 0 {
		for _, s := range m.ContractId {
			l = len(s)
			n += 1 + l + sovEscrow(uint64(l))
		}
	}
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovEscrow(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *SignedContractID) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Data != nil {
		l = m.Data.Size()
		n += 1 + l + sovEscrow(uint64(l))
	}
	l = len(m.Signature)
	if l > 0 {
		n += 1 + l + sovEscrow(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *SignedContractIDBatch) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Data != nil {
		l = m.Data.Size()
		n += 1 + l + sovEscrow(uint64(l))
	}
	l = len(m.Signature)
	if l > 0 {
		n += 1 + l + sovEscrow(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *EscrowContract) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ContractId)
	if l > 0 {
		n += 1 + l + sovEscrow(uint64(l))
	}
	l = len(m.BuyerAddress)
	if l > 0 {
		n += 1 + l + sovEscrow(uint64(l))
	}
	l = len(m.SellerAddress)
	if l > 0 {
		n += 1 + l + sovEscrow(uint64(l))
	}
	l = len(m.AuthAddress)
	if l > 0 {
		n += 1 + l + sovEscrow(uint64(l))
	}
	if m.Amount != 0 {
		n += 1 + sovEscrow(uint64(m.Amount))
	}
	if m.CollateralAmount != 0 {
		n += 1 + sovEscrow(uint64(m.CollateralAmount))
	}
	if m.WithholdAmount != 0 {
		n += 1 + sovEscrow(uint64(m.WithholdAmount))
	}
	if m.TokenType != 0 {
		n += 1 + sovEscrow(uint64(m.TokenType))
	}
	if m.PayoutSchedule != 0 {
		n += 1 + sovEscrow(uint64(m.PayoutSchedule))
	}
	if m.NumPayouts != 0 {
		n += 1 + sovEscrow(uint64(m.NumPayouts))
	}
	l = len(m.Reference)
	if l > 0 {
		n += 1 + l + sovEscrow(uint64(l))
	}
	if m.CustomizePayoutPeriod != 0 {
		n += 1 + sovEscrow(uint64(m.CustomizePayoutPeriod))
	}
	if m.Type != 0 {
		n += 1 + sovEscrow(uint64(m.Type))
	}
	if m.ContingentAmount != 0 {
		n += 1 + sovEscrow(uint64(m.ContingentAmount))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *SignedEscrowContract) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Contract != nil {
		l = m.Contract.Size()
		n += 1 + l + sovEscrow(uint64(l))
	}
	l = len(m.BuyerSignature)
	if l > 0 {
		n += 1 + l + sovEscrow(uint64(l))
	}
	l = len(m.SellerSignature)
	if l > 0 {
		n += 1 + l + sovEscrow(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *EscrowContractRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Contract) > 0 {
		for _, e := range m.Contract {
			l = e.Size()
			n += 1 + l + sovEscrow(uint64(l))
		}
	}
	if m.BuyerChannel != nil {
		l = m.BuyerChannel.Size()
		n += 1 + l + sovEscrow(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Escrow) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ContractId)
	if l > 0 {
		n += 1 + l + sovEscrow(uint64(l))
	}
	if m.EscrowId != 0 {
		n += 1 + sovEscrow(uint64(m.EscrowId))
	}
	l = len(m.FromAddress)
	if l > 0 {
		n += 1 + l + sovEscrow(uint64(l))
	}
	l = len(m.ToAddress)
	if l > 0 {
		n += 1 + l + sovEscrow(uint64(l))
	}
	if m.Amount != 0 {
		n += 1 + sovEscrow(uint64(m.Amount))
	}
	if m.CollateralAmount != 0 {
		n += 1 + sovEscrow(uint64(m.CollateralAmount))
	}
	if m.ErrorCode != 0 {
		n += 1 + sovEscrow(uint64(m.ErrorCode))
	}
	l = len(m.ErrorMessage)
	if l > 0 {
		n += 1 + l + sovEscrow(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *SubmitContractResult) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.PayinId)
	if l > 0 {
		n += 1 + l + sovEscrow(uint64(l))
	}
	if len(m.Escrow) > 0 {
		for _, e := range m.Escrow {
			l = e.Size()
			n += 1 + l + sovEscrow(uint64(l))
		}
	}
	l = len(m.EscrowAddress)
	if l > 0 {
		n += 1 + l + sovEscrow(uint64(l))
	}
	l = github_com_tron_us_protobuf_types.SizeOfStdTime(m.EscrowSignedTime)
	n += 1 + l + sovEscrow(uint64(l))
	if m.BuyerChannelState != nil {
		l = m.BuyerChannelState.Size()
		n += 1 + l + sovEscrow(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *SignedSubmitContractResult) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Result != nil {
		l = m.Result.Size()
		n += 1 + l + sovEscrow(uint64(l))
	}
	l = len(m.EscrowSignature)
	if l > 0 {
		n += 1 + l + sovEscrow(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *StartEscrowResult) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Escrow) > 0 {
		for _, e := range m.Escrow {
			l = e.Size()
			n += 1 + l + sovEscrow(uint64(l))
		}
	}
	l = len(m.EscrowAddress)
	if l > 0 {
		n += 1 + l + sovEscrow(uint64(l))
	}
	l = github_com_tron_us_protobuf_types.SizeOfStdTime(m.EscrowSignedTime)
	n += 1 + l + sovEscrow(uint64(l))
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *SignedStartEscrowResult) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Result != nil {
		l = m.Result.Size()
		n += 1 + l + sovEscrow(uint64(l))
	}
	l = len(m.EscrowSignature)
	if l > 0 {
		n += 1 + l + sovEscrow(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *PayinRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.PayinId)
	if l > 0 {
		n += 1 + l + sovEscrow(uint64(l))
	}
	l = len(m.BuyerAddress)
	if l > 0 {
		n += 1 + l + sovEscrow(uint64(l))
	}
	if m.BuyerChannelState != nil {
		l = m.BuyerChannelState.Size()
		n += 1 + l + sovEscrow(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *SignedPayinRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Request != nil {
		l = m.Request.Size()
		n += 1 + l + sovEscrow(uint64(l))
	}
	l = len(m.BuyerSignature)
	if l > 0 {
		n += 1 + l + sovEscrow(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *PayinResult) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.PayinId)
	if l > 0 {
		n += 1 + l + sovEscrow(uint64(l))
	}
	if m.Amount != 0 {
		n += 1 + sovEscrow(uint64(m.Amount))
	}
	if m.ChannelId != 0 {
		n += 1 + sovEscrow(uint64(m.ChannelId))
	}
	l = len(m.EscrowAddress)
	if l > 0 {
		n += 1 + l + sovEscrow(uint64(l))
	}
	l = github_com_tron_us_protobuf_types.SizeOfStdTime(m.EscrowSignedTime)
	n += 1 + l + sovEscrow(uint64(l))
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *SignedPayinResult) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Result != nil {
		l = m.Result.Size()
		n += 1 + l + sovEscrow(uint64(l))
	}
	l = len(m.EscrowSignature)
	if l > 0 {
		n += 1 + l + sovEscrow(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *PayinStatus) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Paid {
		n += 2
	}
	if m.ChannelId != 0 {
		n += 1 + sovEscrow(uint64(m.ChannelId))
	}
	l = len(m.EscrowAddress)
	if l > 0 {
		n += 1 + l + sovEscrow(uint64(l))
	}
	l = github_com_tron_us_protobuf_types.SizeOfStdTime(m.EscrowSignedTime)
	n += 1 + l + sovEscrow(uint64(l))
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *SignedPayinStatus) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Status != nil {
		l = m.Status.Size()
		n += 1 + l + sovEscrow(uint64(l))
	}
	l = len(m.EscrowSignature)
	if l > 0 {
		n += 1 + l + sovEscrow(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *PayoutStatus) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ContractId)
	if l > 0 {
		n += 1 + l + sovEscrow(uint64(l))
	}
	if m.EscrowId != 0 {
		n += 1 + sovEscrow(uint64(m.EscrowId))
	}
	l = len(m.FromAddress)
	if l > 0 {
		n += 1 + l + sovEscrow(uint64(l))
	}
	l = len(m.ToAddress)
	if l > 0 {
		n += 1 + l + sovEscrow(uint64(l))
	}
	l = len(m.AuthAddress)
	if l > 0 {
		n += 1 + l + sovEscrow(uint64(l))
	}
	if m.Status != 0 {
		n += 1 + sovEscrow(uint64(m.Status))
	}
	if m.Amount != 0 {
		n += 1 + sovEscrow(uint64(m.Amount))
	}
	if m.Collateral != 0 {
		n += 1 + sovEscrow(uint64(m.Collateral))
	}
	if m.Withhold != 0 {
		n += 1 + sovEscrow(uint64(m.Withhold))
	}
	if m.PaidAmount != 0 {
		n += 1 + sovEscrow(uint64(m.PaidAmount))
	}
	if m.NumPaid != 0 {
		n += 1 + sovEscrow(uint64(m.NumPaid))
	}
	if m.LeftAmount != 0 {
		n += 1 + sovEscrow(uint64(m.LeftAmount))
	}
	if m.NumLeft != 0 {
		n += 1 + sovEscrow(uint64(m.NumLeft))
	}
	if m.NextAmount != 0 {
		n += 1 + sovEscrow(uint64(m.NextAmount))
	}
	l = github_com_tron_us_protobuf_types.SizeOfStdTime(m.LastPayoutTime)
	n += 1 + l + sovEscrow(uint64(l))
	l = github_com_tron_us_protobuf_types.SizeOfStdTime(m.NextPayoutTime)
	n += 2 + l + sovEscrow(uint64(l))
	l = len(m.EscrowAddress)
	if l > 0 {
		n += 2 + l + sovEscrow(uint64(l))
	}
	l = github_com_tron_us_protobuf_types.SizeOfStdTime(m.EscrowSignTime)
	n += 2 + l + sovEscrow(uint64(l))
	l = len(m.ErrorMsg)
	if l > 0 {
		n += 2 + l + sovEscrow(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *SignedPayoutStatus) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Status != nil {
		l = m.Status.Size()
		n += 1 + l + sovEscrow(uint64(l))
	}
	l = len(m.EscrowSignature)
	if l > 0 {
		n += 1 + l + sovEscrow(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *SignedPayoutStatusBatch) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Status) > 0 {
		for _, e := range m.Status {
			l = e.Size()
			n += 1 + l + sovEscrow(uint64(l))
		}
	}
	l = len(m.EscrowSignature)
	if l > 0 {
		n += 1 + l + sovEscrow(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *CancelContractRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ContractId)
	if l > 0 {
		n += 1 + l + sovEscrow(uint64(l))
	}
	l = len(m.AuthAddress)
	if l > 0 {
		n += 1 + l + sovEscrow(uint64(l))
	}
	l = github_com_tron_us_protobuf_types.SizeOfStdTime(m.AuthSignedTime)
	n += 1 + l + sovEscrow(uint64(l))
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *SignedCancelRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Request != nil {
		l = m.Request.Size()
		n += 1 + l + sovEscrow(uint64(l))
	}
	l = len(m.AuthSignature)
	if l > 0 {
		n += 1 + l + sovEscrow(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *CancelContractResult) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ContractId)
	if l > 0 {
		n += 1 + l + sovEscrow(uint64(l))
	}
	if m.EscrowId != 0 {
		n += 1 + sovEscrow(uint64(m.EscrowId))
	}
	if m.Canceled {
		n += 2
	}
	l = len(m.EscrowAddress)
	if l > 0 {
		n += 1 + l + sovEscrow(uint64(l))
	}
	l = github_com_tron_us_protobuf_types.SizeOfStdTime(m.EscrowSignedTime)
	n += 1 + l + sovEscrow(uint64(l))
	if m.Amount != 0 {
		n += 1 + sovEscrow(uint64(m.Amount))
	}
	if m.Paid {
		n += 2
	}
	l = len(m.Reference)
	if l > 0 {
		n += 1 + l + sovEscrow(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *SignedCancelContractResult) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Result != nil {
		l = m.Result.Size()
		n += 1 + l + sovEscrow(uint64(l))
	}
	l = len(m.EscrowSignature)
	if l > 0 {
		n += 1 + l + sovEscrow(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *PayoutAddress) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ToAddress)
	if l > 0 {
		n += 1 + l + sovEscrow(uint64(l))
	}
	l = github_com_tron_us_protobuf_types.SizeOfStdTime(m.SignedTime)
	n += 1 + l + sovEscrow(uint64(l))
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *SignedPayoutAddress) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Address != nil {
		l = m.Address.Size()
		n += 1 + l + sovEscrow(uint64(l))
	}
	l = len(m.Signature)
	if l > 0 {
		n += 1 + l + sovEscrow(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Payment) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ContractId)
	if l > 0 {
		n += 1 + l + sovEscrow(uint64(l))
	}
	if m.EscrowId != 0 {
		n += 1 + sovEscrow(uint64(m.EscrowId))
	}
	l = len(m.FromAddress)
	if l > 0 {
		n += 1 + l + sovEscrow(uint64(l))
	}
	l = len(m.ToAddress)
	if l > 0 {
		n += 1 + l + sovEscrow(uint64(l))
	}
	if m.Amount != 0 {
		n += 1 + sovEscrow(uint64(m.Amount))
	}
	if m.Index != 0 {
		n += 1 + sovEscrow(uint64(m.Index))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *PaymentResult) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Payment) > 0 {
		for _, e := range m.Payment {
			l = e.Size()
			n += 1 + l + sovEscrow(uint64(l))
		}
	}
	l = len(m.EscrowAddress)
	if l > 0 {
		n += 1 + l + sovEscrow(uint64(l))
	}
	l = github_com_tron_us_protobuf_types.SizeOfStdTime(m.EscrowSignedTime)
	n += 1 + l + sovEscrow(uint64(l))
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *SignedPaymentResult) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Result != nil {
		l = m.Result.Size()
		n += 1 + l + sovEscrow(uint64(l))
	}
	l = len(m.EscrowSignature)
	if l > 0 {
		n += 1 + l + sovEscrow(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *BalanceResult) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Balance != 0 {
		n += 1 + sovEscrow(uint64(m.Balance))
	}
	l = len(m.EscrowAddress)
	if l > 0 {
		n += 1 + l + sovEscrow(uint64(l))
	}
	l = github_com_tron_us_protobuf_types.SizeOfStdTime(m.EscrowSignedTime)
	n += 1 + l + sovEscrow(uint64(l))
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *SignedBalanceResult) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Result != nil {
		l = m.Result.Size()
		n += 1 + l + sovEscrow(uint64(l))
	}
	l = len(m.EscrowSignature)
	if l > 0 {
		n += 1 + l + sovEscrow(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovEscrow(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozEscrow(x uint64) (n int) {
	return sovEscrow(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *ContractID) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEscrow
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ContractID: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ContractID: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ContractId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEscrow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEscrow
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEscrow
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ContractId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEscrow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthEscrow
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthEscrow
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = append(m.Address[:0], dAtA[iNdEx:postIndex]...)
			if m.Address == nil {
				m.Address = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEscrow(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthEscrow
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthEscrow
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ContractIDBatch) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEscrow
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ContractIDBatch: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ContractIDBatch: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ContractId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEscrow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEscrow
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEscrow
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ContractId = append(m.ContractId, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEscrow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthEscrow
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthEscrow
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = append(m.Address[:0], dAtA[iNdEx:postIndex]...)
			if m.Address == nil {
				m.Address = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEscrow(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthEscrow
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthEscrow
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SignedContractID) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEscrow
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SignedContractID: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SignedContractID: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEscrow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEscrow
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEscrow
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Data == nil {
				m.Data = &ContractID{}
			}
			if err := m.Data.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Signature", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEscrow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthEscrow
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthEscrow
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Signature = append(m.Signature[:0], dAtA[iNdEx:postIndex]...)
			if m.Signature == nil {
				m.Signature = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEscrow(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthEscrow
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthEscrow
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SignedContractIDBatch) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEscrow
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SignedContractIDBatch: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SignedContractIDBatch: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEscrow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEscrow
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEscrow
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Data == nil {
				m.Data = &ContractIDBatch{}
			}
			if err := m.Data.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Signature", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEscrow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthEscrow
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthEscrow
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Signature = append(m.Signature[:0], dAtA[iNdEx:postIndex]...)
			if m.Signature == nil {
				m.Signature = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEscrow(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthEscrow
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthEscrow
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EscrowContract) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEscrow
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EscrowContract: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EscrowContract: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ContractId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEscrow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEscrow
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEscrow
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ContractId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BuyerAddress", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEscrow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthEscrow
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthEscrow
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BuyerAddress = append(m.BuyerAddress[:0], dAtA[iNdEx:postIndex]...)
			if m.BuyerAddress == nil {
				m.BuyerAddress = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SellerAddress", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEscrow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthEscrow
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthEscrow
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SellerAddress = append(m.SellerAddress[:0], dAtA[iNdEx:postIndex]...)
			if m.SellerAddress == nil {
				m.SellerAddress = []byte{}
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AuthAddress", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEscrow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthEscrow
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthEscrow
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AuthAddress = append(m.AuthAddress[:0], dAtA[iNdEx:postIndex]...)
			if m.AuthAddress == nil {
				m.AuthAddress = []byte{}
			}
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			m.Amount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEscrow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Amount |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CollateralAmount", wireType)
			}
			m.CollateralAmount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEscrow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CollateralAmount |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field WithholdAmount", wireType)
			}
			m.WithholdAmount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEscrow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.WithholdAmount |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TokenType", wireType)
			}
			m.TokenType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEscrow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TokenType |= TokenType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PayoutSchedule", wireType)
			}
			m.PayoutSchedule = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEscrow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PayoutSchedule |= Schedule(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NumPayouts", wireType)
			}
			m.NumPayouts = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEscrow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NumPayouts |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Reference", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEscrow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthEscrow
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthEscrow
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Reference = append(m.Reference[:0], dAtA[iNdEx:postIndex]...)
			if m.Reference == nil {
				m.Reference = []byte{}
			}
			iNdEx = postIndex
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CustomizePayoutPeriod", wireType)
			}
			m.CustomizePayoutPeriod = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEscrow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CustomizePayoutPeriod |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 13:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEscrow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= ContractType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 14:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ContingentAmount", wireType)
			}
			m.ContingentAmount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEscrow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ContingentAmount |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipEscrow(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthEscrow
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthEscrow
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SignedEscrowContract) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEscrow
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SignedEscrowContract: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SignedEscrowContract: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Contract", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEscrow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEscrow
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEscrow
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Contract == nil {
				m.Contract = &EscrowContract{}
			}
			if err := m.Contract.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BuyerSignature", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEscrow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthEscrow
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthEscrow
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BuyerSignature = append(m.BuyerSignature[:0], dAtA[iNdEx:postIndex]...)
			if m.BuyerSignature == nil {
				m.BuyerSignature = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SellerSignature", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEscrow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthEscrow
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthEscrow
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SellerSignature = append(m.SellerSignature[:0], dAtA[iNdEx:postIndex]...)
			if m.SellerSignature == nil {
				m.SellerSignature = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEscrow(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthEscrow
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthEscrow
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EscrowContractRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEscrow
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EscrowContractRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EscrowContractRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Contract", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEscrow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEscrow
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEscrow
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Contract = append(m.Contract, &SignedEscrowContract{})
			if err := m.Contract[len(m.Contract)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BuyerChannel", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEscrow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEscrow
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEscrow
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.BuyerChannel == nil {
				m.BuyerChannel = &ledger.SignedChannelCommit{}
			}
			if err := m.BuyerChannel.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEscrow(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthEscrow
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthEscrow
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Escrow) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEscrow
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Escrow: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Escrow: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ContractId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEscrow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEscrow
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEscrow
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ContractId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EscrowId", wireType)
			}
			m.EscrowId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEscrow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EscrowId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FromAddress", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEscrow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthEscrow
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthEscrow
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FromAddress = append(m.FromAddress[:0], dAtA[iNdEx:postIndex]...)
			if m.FromAddress == nil {
				m.FromAddress = []byte{}
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ToAddress", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEscrow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthEscrow
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthEscrow
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ToAddress = append(m.ToAddress[:0], dAtA[iNdEx:postIndex]...)
			if m.ToAddress == nil {
				m.ToAddress = []byte{}
			}
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			m.Amount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEscrow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Amount |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CollateralAmount", wireType)
			}
			m.CollateralAmount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEscrow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CollateralAmount |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ErrorCode", wireType)
			}
			m.ErrorCode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEscrow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ErrorCode |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ErrorMessage", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEscrow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEscrow
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEscrow
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ErrorMessage = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEscrow(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthEscrow
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthEscrow
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SubmitContractResult) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEscrow
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SubmitContractResult: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SubmitContractResult: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PayinId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEscrow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEscrow
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEscrow
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PayinId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Escrow", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEscrow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEscrow
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEscrow
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Escrow = append(m.Escrow, &Escrow{})
			if err := m.Escrow[len(m.Escrow)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EscrowAddress", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEscrow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthEscrow
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthEscrow
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EscrowAddress = append(m.EscrowAddress[:0], dAtA[iNdEx:postIndex]...)
			if m.EscrowAddress == nil {
				m.EscrowAddress = []byte{}
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EscrowSignedTime", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEscrow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEscrow
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEscrow
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_tron_us_protobuf_types.StdTimeUnmarshal(&m.EscrowSignedTime, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BuyerChannelState", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEscrow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEscrow
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEscrow
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.BuyerChannelState == nil {
				m.BuyerChannelState = &ledger.SignedChannelState{}
			}
			if err := m.BuyerChannelState.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEscrow(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthEscrow
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthEscrow
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SignedSubmitContractResult) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEscrow
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SignedSubmitContractResult: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SignedSubmitContractResult: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Result", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEscrow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEscrow
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEscrow
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Result == nil {
				m.Result = &SubmitContractResult{}
			}
			if err := m.Result.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EscrowSignature", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEscrow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthEscrow
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthEscrow
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EscrowSignature = append(m.EscrowSignature[:0], dAtA[iNdEx:postIndex]...)
			if m.EscrowSignature == nil {
				m.EscrowSignature = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEscrow(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthEscrow
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthEscrow
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *StartEscrowResult) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEscrow
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: StartEscrowResult: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: StartEscrowResult: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Escrow", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEscrow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEscrow
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEscrow
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Escrow = append(m.Escrow, &Escrow{})
			if err := m.Escrow[len(m.Escrow)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EscrowAddress", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEscrow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthEscrow
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthEscrow
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EscrowAddress = append(m.EscrowAddress[:0], dAtA[iNdEx:postIndex]...)
			if m.EscrowAddress == nil {
				m.EscrowAddress = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EscrowSignedTime", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEscrow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEscrow
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEscrow
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_tron_us_protobuf_types.StdTimeUnmarshal(&m.EscrowSignedTime, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEscrow(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthEscrow
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthEscrow
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SignedStartEscrowResult) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEscrow
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SignedStartEscrowResult: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SignedStartEscrowResult: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Result", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEscrow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEscrow
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEscrow
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Result == nil {
				m.Result = &StartEscrowResult{}
			}
			if err := m.Result.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EscrowSignature", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEscrow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthEscrow
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthEscrow
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EscrowSignature = append(m.EscrowSignature[:0], dAtA[iNdEx:postIndex]...)
			if m.EscrowSignature == nil {
				m.EscrowSignature = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEscrow(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthEscrow
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthEscrow
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PayinRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEscrow
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PayinRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PayinRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PayinId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEscrow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEscrow
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEscrow
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PayinId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BuyerAddress", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEscrow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthEscrow
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthEscrow
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BuyerAddress = append(m.BuyerAddress[:0], dAtA[iNdEx:postIndex]...)
			if m.BuyerAddress == nil {
				m.BuyerAddress = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BuyerChannelState", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEscrow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEscrow
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEscrow
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.BuyerChannelState == nil {
				m.BuyerChannelState = &ledger.SignedChannelState{}
			}
			if err := m.BuyerChannelState.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEscrow(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthEscrow
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthEscrow
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SignedPayinRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEscrow
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SignedPayinRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SignedPayinRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Request", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEscrow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEscrow
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEscrow
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Request == nil {
				m.Request = &PayinRequest{}
			}
			if err := m.Request.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BuyerSignature", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEscrow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthEscrow
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthEscrow
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BuyerSignature = append(m.BuyerSignature[:0], dAtA[iNdEx:postIndex]...)
			if m.BuyerSignature == nil {
				m.BuyerSignature = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEscrow(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthEscrow
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthEscrow
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PayinResult) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEscrow
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PayinResult: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PayinResult: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PayinId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEscrow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEscrow
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEscrow
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PayinId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			m.Amount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEscrow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Amount |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChannelId", wireType)
			}
			m.ChannelId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEscrow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChannelId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EscrowAddress", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEscrow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthEscrow
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthEscrow
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EscrowAddress = append(m.EscrowAddress[:0], dAtA[iNdEx:postIndex]...)
			if m.EscrowAddress == nil {
				m.EscrowAddress = []byte{}
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EscrowSignedTime", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEscrow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEscrow
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEscrow
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_tron_us_protobuf_types.StdTimeUnmarshal(&m.EscrowSignedTime, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEscrow(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthEscrow
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthEscrow
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SignedPayinResult) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEscrow
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SignedPayinResult: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SignedPayinResult: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Result", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEscrow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEscrow
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEscrow
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Result == nil {
				m.Result = &PayinResult{}
			}
			if err := m.Result.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EscrowSignature", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEscrow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthEscrow
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthEscrow
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EscrowSignature = append(m.EscrowSignature[:0], dAtA[iNdEx:postIndex]...)
			if m.EscrowSignature == nil {
				m.EscrowSignature = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEscrow(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthEscrow
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthEscrow
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PayinStatus) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEscrow
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PayinStatus: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PayinStatus: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Paid", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEscrow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Paid = bool(v != 0)
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChannelId", wireType)
			}
			m.ChannelId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEscrow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChannelId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EscrowAddress", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEscrow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthEscrow
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthEscrow
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EscrowAddress = append(m.EscrowAddress[:0], dAtA[iNdEx:postIndex]...)
			if m.EscrowAddress == nil {
				m.EscrowAddress = []byte{}
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EscrowSignedTime", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEscrow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEscrow
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEscrow
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_tron_us_protobuf_types.StdTimeUnmarshal(&m.EscrowSignedTime, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEscrow(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthEscrow
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthEscrow
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SignedPayinStatus) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEscrow
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SignedPayinStatus: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SignedPayinStatus: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEscrow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEscrow
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEscrow
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Status == nil {
				m.Status = &PayinStatus{}
			}
			if err := m.Status.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EscrowSignature", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEscrow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthEscrow
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthEscrow
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EscrowSignature = append(m.EscrowSignature[:0], dAtA[iNdEx:postIndex]...)
			if m.EscrowSignature == nil {
				m.EscrowSignature = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEscrow(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthEscrow
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthEscrow
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PayoutStatus) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEscrow
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PayoutStatus: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PayoutStatus: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ContractId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEscrow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEscrow
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEscrow
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ContractId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EscrowId", wireType)
			}
			m.EscrowId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEscrow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EscrowId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FromAddress", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEscrow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthEscrow
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthEscrow
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FromAddress = append(m.FromAddress[:0], dAtA[iNdEx:postIndex]...)
			if m.FromAddress == nil {
				m.FromAddress = []byte{}
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ToAddress", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEscrow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthEscrow
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthEscrow
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ToAddress = append(m.ToAddress[:0], dAtA[iNdEx:postIndex]...)
			if m.ToAddress == nil {
				m.ToAddress = []byte{}
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AuthAddress", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEscrow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthEscrow
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthEscrow
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AuthAddress = append(m.AuthAddress[:0], dAtA[iNdEx:postIndex]...)
			if m.AuthAddress == nil {
				m.AuthAddress = []byte{}
			}
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEscrow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= EscrowStatus(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			m.Amount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEscrow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Amount |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Collateral", wireType)
			}
			m.Collateral = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEscrow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Collateral |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Withhold", wireType)
			}
			m.Withhold = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEscrow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Withhold |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PaidAmount", wireType)
			}
			m.PaidAmount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEscrow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PaidAmount |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NumPaid", wireType)
			}
			m.NumPaid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEscrow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NumPaid |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LeftAmount", wireType)
			}
			m.LeftAmount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEscrow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LeftAmount |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 13:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NumLeft", wireType)
			}
			m.NumLeft = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEscrow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NumLeft |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 14:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NextAmount", wireType)
			}
			m.NextAmount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEscrow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NextAmount |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 15:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastPayoutTime", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEscrow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEscrow
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEscrow
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_tron_us_protobuf_types.StdTimeUnmarshal(&m.LastPayoutTime, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 16:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NextPayoutTime", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEscrow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEscrow
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEscrow
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_tron_us_protobuf_types.StdTimeUnmarshal(&m.NextPayoutTime, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 17:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EscrowAddress", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEscrow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthEscrow
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthEscrow
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EscrowAddress = append(m.EscrowAddress[:0], dAtA[iNdEx:postIndex]...)
			if m.EscrowAddress == nil {
				m.EscrowAddress = []byte{}
			}
			iNdEx = postIndex
		case 18:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EscrowSignTime", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEscrow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEscrow
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEscrow
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_tron_us_protobuf_types.StdTimeUnmarshal(&m.EscrowSignTime, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 19:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ErrorMsg", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEscrow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEscrow
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEscrow
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ErrorMsg = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEscrow(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthEscrow
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthEscrow
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SignedPayoutStatus) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEscrow
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SignedPayoutStatus: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SignedPayoutStatus: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEscrow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEscrow
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEscrow
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Status == nil {
				m.Status = &PayoutStatus{}
			}
			if err := m.Status.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EscrowSignature", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEscrow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthEscrow
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthEscrow
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EscrowSignature = append(m.EscrowSignature[:0], dAtA[iNdEx:postIndex]...)
			if m.EscrowSignature == nil {
				m.EscrowSignature = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEscrow(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthEscrow
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthEscrow
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SignedPayoutStatusBatch) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEscrow
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SignedPayoutStatusBatch: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SignedPayoutStatusBatch: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEscrow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEscrow
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEscrow
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Status = append(m.Status, &PayoutStatus{})
			if err := m.Status[len(m.Status)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EscrowSignature", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEscrow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthEscrow
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthEscrow
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EscrowSignature = append(m.EscrowSignature[:0], dAtA[iNdEx:postIndex]...)
			if m.EscrowSignature == nil {
				m.EscrowSignature = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEscrow(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthEscrow
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthEscrow
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CancelContractRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEscrow
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CancelContractRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CancelContractRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ContractId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEscrow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEscrow
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEscrow
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ContractId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AuthAddress", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEscrow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthEscrow
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthEscrow
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AuthAddress = append(m.AuthAddress[:0], dAtA[iNdEx:postIndex]...)
			if m.AuthAddress == nil {
				m.AuthAddress = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AuthSignedTime", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEscrow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEscrow
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEscrow
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_tron_us_protobuf_types.StdTimeUnmarshal(&m.AuthSignedTime, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEscrow(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthEscrow
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthEscrow
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SignedCancelRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEscrow
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SignedCancelRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SignedCancelRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Request", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEscrow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEscrow
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEscrow
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Request == nil {
				m.Request = &CancelContractRequest{}
			}
			if err := m.Request.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AuthSignature", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEscrow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthEscrow
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthEscrow
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AuthSignature = append(m.AuthSignature[:0], dAtA[iNdEx:postIndex]...)
			if m.AuthSignature == nil {
				m.AuthSignature = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEscrow(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthEscrow
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthEscrow
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CancelContractResult) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEscrow
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CancelContractResult: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CancelContractResult: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ContractId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEscrow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEscrow
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEscrow
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ContractId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EscrowId", wireType)
			}
			m.EscrowId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEscrow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EscrowId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Canceled", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEscrow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Canceled = bool(v != 0)
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EscrowAddress", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEscrow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthEscrow
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthEscrow
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EscrowAddress = append(m.EscrowAddress[:0], dAtA[iNdEx:postIndex]...)
			if m.EscrowAddress == nil {
				m.EscrowAddress = []byte{}
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EscrowSignedTime", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEscrow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEscrow
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEscrow
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_tron_us_protobuf_types.StdTimeUnmarshal(&m.EscrowSignedTime, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			m.Amount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEscrow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Amount |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Paid", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEscrow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Paid = bool(v != 0)
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Reference", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEscrow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEscrow
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEscrow
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Reference = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEscrow(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthEscrow
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthEscrow
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SignedCancelContractResult) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEscrow
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SignedCancelContractResult: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SignedCancelContractResult: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Result", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEscrow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEscrow
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEscrow
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Result == nil {
				m.Result = &CancelContractResult{}
			}
			if err := m.Result.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EscrowSignature", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEscrow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthEscrow
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthEscrow
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EscrowSignature = append(m.EscrowSignature[:0], dAtA[iNdEx:postIndex]...)
			if m.EscrowSignature == nil {
				m.EscrowSignature = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEscrow(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthEscrow
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthEscrow
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PayoutAddress) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEscrow
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PayoutAddress: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PayoutAddress: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ToAddress", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEscrow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthEscrow
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthEscrow
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ToAddress = append(m.ToAddress[:0], dAtA[iNdEx:postIndex]...)
			if m.ToAddress == nil {
				m.ToAddress = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SignedTime", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEscrow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEscrow
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEscrow
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_tron_us_protobuf_types.StdTimeUnmarshal(&m.SignedTime, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEscrow(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthEscrow
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthEscrow
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SignedPayoutAddress) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEscrow
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SignedPayoutAddress: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SignedPayoutAddress: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEscrow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEscrow
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEscrow
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Address == nil {
				m.Address = &PayoutAddress{}
			}
			if err := m.Address.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Signature", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEscrow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthEscrow
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthEscrow
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Signature = append(m.Signature[:0], dAtA[iNdEx:postIndex]...)
			if m.Signature == nil {
				m.Signature = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEscrow(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthEscrow
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthEscrow
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Payment) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEscrow
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Payment: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Payment: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ContractId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEscrow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEscrow
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEscrow
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ContractId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EscrowId", wireType)
			}
			m.EscrowId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEscrow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EscrowId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FromAddress", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEscrow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthEscrow
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthEscrow
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FromAddress = append(m.FromAddress[:0], dAtA[iNdEx:postIndex]...)
			if m.FromAddress == nil {
				m.FromAddress = []byte{}
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ToAddress", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEscrow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthEscrow
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthEscrow
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ToAddress = append(m.ToAddress[:0], dAtA[iNdEx:postIndex]...)
			if m.ToAddress == nil {
				m.ToAddress = []byte{}
			}
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			m.Amount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEscrow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Amount |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Index", wireType)
			}
			m.Index = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEscrow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Index |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipEscrow(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthEscrow
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthEscrow
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PaymentResult) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEscrow
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PaymentResult: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PaymentResult: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Payment", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEscrow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEscrow
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEscrow
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Payment = append(m.Payment, &Payment{})
			if err := m.Payment[len(m.Payment)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EscrowAddress", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEscrow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthEscrow
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthEscrow
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EscrowAddress = append(m.EscrowAddress[:0], dAtA[iNdEx:postIndex]...)
			if m.EscrowAddress == nil {
				m.EscrowAddress = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EscrowSignedTime", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEscrow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEscrow
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEscrow
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_tron_us_protobuf_types.StdTimeUnmarshal(&m.EscrowSignedTime, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEscrow(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthEscrow
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthEscrow
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SignedPaymentResult) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEscrow
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SignedPaymentResult: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SignedPaymentResult: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Result", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEscrow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEscrow
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEscrow
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Result == nil {
				m.Result = &PaymentResult{}
			}
			if err := m.Result.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EscrowSignature", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEscrow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthEscrow
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthEscrow
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EscrowSignature = append(m.EscrowSignature[:0], dAtA[iNdEx:postIndex]...)
			if m.EscrowSignature == nil {
				m.EscrowSignature = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEscrow(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthEscrow
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthEscrow
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BalanceResult) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEscrow
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BalanceResult: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BalanceResult: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Balance", wireType)
			}
			m.Balance = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEscrow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Balance |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EscrowAddress", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEscrow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthEscrow
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthEscrow
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EscrowAddress = append(m.EscrowAddress[:0], dAtA[iNdEx:postIndex]...)
			if m.EscrowAddress == nil {
				m.EscrowAddress = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EscrowSignedTime", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEscrow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEscrow
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEscrow
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_tron_us_protobuf_types.StdTimeUnmarshal(&m.EscrowSignedTime, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEscrow(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthEscrow
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthEscrow
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SignedBalanceResult) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEscrow
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SignedBalanceResult: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SignedBalanceResult: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Result", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEscrow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEscrow
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEscrow
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Result == nil {
				m.Result = &BalanceResult{}
			}
			if err := m.Result.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EscrowSignature", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEscrow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthEscrow
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthEscrow
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EscrowSignature = append(m.EscrowSignature[:0], dAtA[iNdEx:postIndex]...)
			if m.EscrowSignature == nil {
				m.EscrowSignature = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEscrow(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthEscrow
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthEscrow
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipEscrow(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowEscrow
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowEscrow
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowEscrow
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthEscrow
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupEscrow
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthEscrow
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthEscrow        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowEscrow          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupEscrow = fmt.Errorf("proto: unexpected end of group")
)
