// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: protos/guard/guard_admin.proto

package guard

import (
	context "context"
	encoding_binary "encoding/binary"
	fmt "fmt"
	_ "github.com/gogo/protobuf/types"
	golang_proto "github.com/golang/protobuf/proto"
	_ "github.com/tron-us/protobuf/gogoproto"
	proto "github.com/tron-us/protobuf/proto"
	github_com_tron_us_protobuf_types "github.com/tron-us/protobuf/types"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
	time "time"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = golang_proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf
var _ = time.Kitchen

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type RepairNodeDesc_NodeType int32

const (
	RepairNodeDesc_SINGLE_NODE RepairNodeDesc_NodeType = 0
	RepairNodeDesc_KUBERNETES  RepairNodeDesc_NodeType = 1
	RepairNodeDesc_DOCKER      RepairNodeDesc_NodeType = 2
	RepairNodeDesc_VM          RepairNodeDesc_NodeType = 3
	RepairNodeDesc_OTHER       RepairNodeDesc_NodeType = 4
)

var RepairNodeDesc_NodeType_name = map[int32]string{
	0: "SINGLE_NODE",
	1: "KUBERNETES",
	2: "DOCKER",
	3: "VM",
	4: "OTHER",
}

var RepairNodeDesc_NodeType_value = map[string]int32{
	"SINGLE_NODE": 0,
	"KUBERNETES":  1,
	"DOCKER":      2,
	"VM":          3,
	"OTHER":       4,
}

func (x RepairNodeDesc_NodeType) String() string {
	return proto.EnumName(RepairNodeDesc_NodeType_name, int32(x))
}

func (RepairNodeDesc_NodeType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_2d7f1bd32db00455, []int{1, 0}
}

type K8SRepairNodesRequest struct {
	Region               string    `protobuf:"bytes,1,opt,name=region,proto3" json:"region,omitempty" pg:"region"`
	Country              string    `protobuf:"bytes,2,opt,name=country,proto3" json:"country,omitempty" pg:"country"`
	Namespace            string    `protobuf:"bytes,3,opt,name=namespace,proto3" json:"namespace,omitempty" pg:"namespace"`
	Label                string    `protobuf:"bytes,4,opt,name=label,proto3" json:"label,omitempty" pg:"label"`
	ServicePrefix        string    `protobuf:"bytes,5,opt,name=service_prefix,json=servicePrefix,proto3" json:"service_prefix,omitempty" pg:"service_prefix"`
	HostnameSuffix       string    `protobuf:"bytes,6,opt,name=hostname_suffix,json=hostnameSuffix,proto3" json:"hostname_suffix,omitempty" pg:"hostname_suffix"`
	RequesterPid         string    `protobuf:"bytes,7,opt,name=requester_pid,json=requesterPid,proto3" json:"requester_pid,omitempty" pg:"requester_pid"`
	RequestTime          time.Time `protobuf:"bytes,8,opt,name=request_time,json=requestTime,proto3,stdtime" json:"request_time" pg:"request_time"`
	Signature            []byte    `protobuf:"bytes,9,opt,name=signature,proto3" json:"signature,omitempty" pg:"signature"`
	XXX_NoUnkeyedLiteral struct{}  `json:"-" pg:"-"`
	XXX_unrecognized     []byte    `json:"-" pg:"-"`
	XXX_sizecache        int32     `json:"-" pg:"-"`
}

func (m *K8SRepairNodesRequest) Reset()         { *m = K8SRepairNodesRequest{} }
func (m *K8SRepairNodesRequest) String() string { return proto.CompactTextString(m) }
func (*K8SRepairNodesRequest) ProtoMessage()    {}
func (*K8SRepairNodesRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_2d7f1bd32db00455, []int{0}
}
func (m *K8SRepairNodesRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *K8SRepairNodesRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_K8SRepairNodesRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *K8SRepairNodesRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_K8SRepairNodesRequest.Merge(m, src)
}
func (m *K8SRepairNodesRequest) XXX_Size() int {
	return m.Size()
}
func (m *K8SRepairNodesRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_K8SRepairNodesRequest.DiscardUnknown(m)
}

var xxx_messageInfo_K8SRepairNodesRequest proto.InternalMessageInfo

func (m *K8SRepairNodesRequest) GetRegion() string {
	if m != nil {
		return m.Region
	}
	return ""
}

func (m *K8SRepairNodesRequest) GetCountry() string {
	if m != nil {
		return m.Country
	}
	return ""
}

func (m *K8SRepairNodesRequest) GetNamespace() string {
	if m != nil {
		return m.Namespace
	}
	return ""
}

func (m *K8SRepairNodesRequest) GetLabel() string {
	if m != nil {
		return m.Label
	}
	return ""
}

func (m *K8SRepairNodesRequest) GetServicePrefix() string {
	if m != nil {
		return m.ServicePrefix
	}
	return ""
}

func (m *K8SRepairNodesRequest) GetHostnameSuffix() string {
	if m != nil {
		return m.HostnameSuffix
	}
	return ""
}

func (m *K8SRepairNodesRequest) GetRequesterPid() string {
	if m != nil {
		return m.RequesterPid
	}
	return ""
}

func (m *K8SRepairNodesRequest) GetRequestTime() time.Time {
	if m != nil {
		return m.RequestTime
	}
	return time.Time{}
}

func (m *K8SRepairNodesRequest) GetSignature() []byte {
	if m != nil {
		return m.Signature
	}
	return nil
}

func (*K8SRepairNodesRequest) XXX_MessageName() string {
	return "guard.K8sRepairNodesRequest"
}

type RepairNodeDesc struct {
	Region               string                  `protobuf:"bytes,1,opt,name=region,proto3" json:"region,omitempty" pg:"region"`
	Country              string                  `protobuf:"bytes,2,opt,name=country,proto3" json:"country,omitempty" pg:"country"`
	Latitude             float32                 `protobuf:"fixed32,3,opt,name=latitude,proto3" json:"latitude,omitempty" pg:"latitude"`
	Longitude            float32                 `protobuf:"fixed32,4,opt,name=longitude,proto3" json:"longitude,omitempty" pg:"longitude"`
	HostAddress          string                  `protobuf:"bytes,5,opt,name=host_address,json=hostAddress,proto3" json:"host_address,omitempty" pg:"host_address"`
	Name                 string                  `protobuf:"bytes,6,opt,name=name,proto3" json:"name,omitempty" pg:"name"`
	Version              string                  `protobuf:"bytes,7,opt,name=version,proto3" json:"version,omitempty" pg:"version"`
	Type                 RepairNodeDesc_NodeType `protobuf:"varint,8,opt,name=type,proto3,enum=guard.RepairNodeDesc_NodeType" json:"type,omitempty" pg:"type"`
	IsActive             bool                    `protobuf:"varint,9,opt,name=is_active,json=isActive,proto3" json:"is_active,omitempty" pg:"is_active"`
	XXX_NoUnkeyedLiteral struct{}                `json:"-" pg:"-"`
	XXX_unrecognized     []byte                  `json:"-" pg:"-"`
	XXX_sizecache        int32                   `json:"-" pg:"-"`
}

func (m *RepairNodeDesc) Reset()         { *m = RepairNodeDesc{} }
func (m *RepairNodeDesc) String() string { return proto.CompactTextString(m) }
func (*RepairNodeDesc) ProtoMessage()    {}
func (*RepairNodeDesc) Descriptor() ([]byte, []int) {
	return fileDescriptor_2d7f1bd32db00455, []int{1}
}
func (m *RepairNodeDesc) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RepairNodeDesc) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RepairNodeDesc.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RepairNodeDesc) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RepairNodeDesc.Merge(m, src)
}
func (m *RepairNodeDesc) XXX_Size() int {
	return m.Size()
}
func (m *RepairNodeDesc) XXX_DiscardUnknown() {
	xxx_messageInfo_RepairNodeDesc.DiscardUnknown(m)
}

var xxx_messageInfo_RepairNodeDesc proto.InternalMessageInfo

func (m *RepairNodeDesc) GetRegion() string {
	if m != nil {
		return m.Region
	}
	return ""
}

func (m *RepairNodeDesc) GetCountry() string {
	if m != nil {
		return m.Country
	}
	return ""
}

func (m *RepairNodeDesc) GetLatitude() float32 {
	if m != nil {
		return m.Latitude
	}
	return 0
}

func (m *RepairNodeDesc) GetLongitude() float32 {
	if m != nil {
		return m.Longitude
	}
	return 0
}

func (m *RepairNodeDesc) GetHostAddress() string {
	if m != nil {
		return m.HostAddress
	}
	return ""
}

func (m *RepairNodeDesc) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *RepairNodeDesc) GetVersion() string {
	if m != nil {
		return m.Version
	}
	return ""
}

func (m *RepairNodeDesc) GetType() RepairNodeDesc_NodeType {
	if m != nil {
		return m.Type
	}
	return RepairNodeDesc_SINGLE_NODE
}

func (m *RepairNodeDesc) GetIsActive() bool {
	if m != nil {
		return m.IsActive
	}
	return false
}

func (*RepairNodeDesc) XXX_MessageName() string {
	return "guard.RepairNodeDesc"
}

type RepairNodeDescRequest struct {
	Node                 *RepairNodeDesc `protobuf:"bytes,1,opt,name=node,proto3" json:"node,omitempty" pg:"node"`
	RequesterPid         string          `protobuf:"bytes,2,opt,name=requester_pid,json=requesterPid,proto3" json:"requester_pid,omitempty" pg:"requester_pid"`
	RequestTime          time.Time       `protobuf:"bytes,3,opt,name=request_time,json=requestTime,proto3,stdtime" json:"request_time" pg:"request_time"`
	Signature            []byte          `protobuf:"bytes,4,opt,name=signature,proto3" json:"signature,omitempty" pg:"signature"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-" pg:"-"`
	XXX_unrecognized     []byte          `json:"-" pg:"-"`
	XXX_sizecache        int32           `json:"-" pg:"-"`
}

func (m *RepairNodeDescRequest) Reset()         { *m = RepairNodeDescRequest{} }
func (m *RepairNodeDescRequest) String() string { return proto.CompactTextString(m) }
func (*RepairNodeDescRequest) ProtoMessage()    {}
func (*RepairNodeDescRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_2d7f1bd32db00455, []int{2}
}
func (m *RepairNodeDescRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RepairNodeDescRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RepairNodeDescRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RepairNodeDescRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RepairNodeDescRequest.Merge(m, src)
}
func (m *RepairNodeDescRequest) XXX_Size() int {
	return m.Size()
}
func (m *RepairNodeDescRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_RepairNodeDescRequest.DiscardUnknown(m)
}

var xxx_messageInfo_RepairNodeDescRequest proto.InternalMessageInfo

func (m *RepairNodeDescRequest) GetNode() *RepairNodeDesc {
	if m != nil {
		return m.Node
	}
	return nil
}

func (m *RepairNodeDescRequest) GetRequesterPid() string {
	if m != nil {
		return m.RequesterPid
	}
	return ""
}

func (m *RepairNodeDescRequest) GetRequestTime() time.Time {
	if m != nil {
		return m.RequestTime
	}
	return time.Time{}
}

func (m *RepairNodeDescRequest) GetSignature() []byte {
	if m != nil {
		return m.Signature
	}
	return nil
}

func (*RepairNodeDescRequest) XXX_MessageName() string {
	return "guard.RepairNodeDescRequest"
}

type AuthenticateRequest struct {
	RequesterPid         string    `protobuf:"bytes,1,opt,name=requester_pid,json=requesterPid,proto3" json:"requester_pid,omitempty" pg:"requester_pid"`
	RequestTime          time.Time `protobuf:"bytes,2,opt,name=request_time,json=requestTime,proto3,stdtime" json:"request_time" pg:"request_time"`
	Signature            []byte    `protobuf:"bytes,3,opt,name=signature,proto3" json:"signature,omitempty" pg:"signature"`
	XXX_NoUnkeyedLiteral struct{}  `json:"-" pg:"-"`
	XXX_unrecognized     []byte    `json:"-" pg:"-"`
	XXX_sizecache        int32     `json:"-" pg:"-"`
}

func (m *AuthenticateRequest) Reset()         { *m = AuthenticateRequest{} }
func (m *AuthenticateRequest) String() string { return proto.CompactTextString(m) }
func (*AuthenticateRequest) ProtoMessage()    {}
func (*AuthenticateRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_2d7f1bd32db00455, []int{3}
}
func (m *AuthenticateRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AuthenticateRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AuthenticateRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AuthenticateRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AuthenticateRequest.Merge(m, src)
}
func (m *AuthenticateRequest) XXX_Size() int {
	return m.Size()
}
func (m *AuthenticateRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_AuthenticateRequest.DiscardUnknown(m)
}

var xxx_messageInfo_AuthenticateRequest proto.InternalMessageInfo

func (m *AuthenticateRequest) GetRequesterPid() string {
	if m != nil {
		return m.RequesterPid
	}
	return ""
}

func (m *AuthenticateRequest) GetRequestTime() time.Time {
	if m != nil {
		return m.RequestTime
	}
	return time.Time{}
}

func (m *AuthenticateRequest) GetSignature() []byte {
	if m != nil {
		return m.Signature
	}
	return nil
}

func (*AuthenticateRequest) XXX_MessageName() string {
	return "guard.AuthenticateRequest"
}

type RepairNodesResponse struct {
	Nodes                []*RepairNodeDesc `protobuf:"bytes,1,rep,name=nodes,proto3" json:"nodes,omitempty" pg:"nodes"`
	GeneratePid          string            `protobuf:"bytes,2,opt,name=generate_pid,json=generatePid,proto3" json:"generate_pid,omitempty" pg:"generate_pid"`
	GenerateTime         time.Time         `protobuf:"bytes,3,opt,name=generate_time,json=generateTime,proto3,stdtime" json:"generate_time" pg:"generate_time"`
	Signature            []byte            `protobuf:"bytes,4,opt,name=signature,proto3" json:"signature,omitempty" pg:"signature"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-" pg:"-"`
	XXX_unrecognized     []byte            `json:"-" pg:"-"`
	XXX_sizecache        int32             `json:"-" pg:"-"`
}

func (m *RepairNodesResponse) Reset()         { *m = RepairNodesResponse{} }
func (m *RepairNodesResponse) String() string { return proto.CompactTextString(m) }
func (*RepairNodesResponse) ProtoMessage()    {}
func (*RepairNodesResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_2d7f1bd32db00455, []int{4}
}
func (m *RepairNodesResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RepairNodesResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RepairNodesResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RepairNodesResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RepairNodesResponse.Merge(m, src)
}
func (m *RepairNodesResponse) XXX_Size() int {
	return m.Size()
}
func (m *RepairNodesResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_RepairNodesResponse.DiscardUnknown(m)
}

var xxx_messageInfo_RepairNodesResponse proto.InternalMessageInfo

func (m *RepairNodesResponse) GetNodes() []*RepairNodeDesc {
	if m != nil {
		return m.Nodes
	}
	return nil
}

func (m *RepairNodesResponse) GetGeneratePid() string {
	if m != nil {
		return m.GeneratePid
	}
	return ""
}

func (m *RepairNodesResponse) GetGenerateTime() time.Time {
	if m != nil {
		return m.GenerateTime
	}
	return time.Time{}
}

func (m *RepairNodesResponse) GetSignature() []byte {
	if m != nil {
		return m.Signature
	}
	return nil
}

func (*RepairNodesResponse) XXX_MessageName() string {
	return "guard.RepairNodesResponse"
}
func init() {
	proto.RegisterEnum("guard.RepairNodeDesc_NodeType", RepairNodeDesc_NodeType_name, RepairNodeDesc_NodeType_value)
	golang_proto.RegisterEnum("guard.RepairNodeDesc_NodeType", RepairNodeDesc_NodeType_name, RepairNodeDesc_NodeType_value)
	proto.RegisterType((*K8SRepairNodesRequest)(nil), "guard.K8sRepairNodesRequest")
	golang_proto.RegisterType((*K8SRepairNodesRequest)(nil), "guard.K8sRepairNodesRequest")
	proto.RegisterType((*RepairNodeDesc)(nil), "guard.RepairNodeDesc")
	golang_proto.RegisterType((*RepairNodeDesc)(nil), "guard.RepairNodeDesc")
	proto.RegisterType((*RepairNodeDescRequest)(nil), "guard.RepairNodeDescRequest")
	golang_proto.RegisterType((*RepairNodeDescRequest)(nil), "guard.RepairNodeDescRequest")
	proto.RegisterType((*AuthenticateRequest)(nil), "guard.AuthenticateRequest")
	golang_proto.RegisterType((*AuthenticateRequest)(nil), "guard.AuthenticateRequest")
	proto.RegisterType((*RepairNodesResponse)(nil), "guard.RepairNodesResponse")
	golang_proto.RegisterType((*RepairNodesResponse)(nil), "guard.RepairNodesResponse")
}

func init() { proto.RegisterFile("protos/guard/guard_admin.proto", fileDescriptor_2d7f1bd32db00455) }
func init() {
	golang_proto.RegisterFile("protos/guard/guard_admin.proto", fileDescriptor_2d7f1bd32db00455)
}

var fileDescriptor_2d7f1bd32db00455 = []byte{
	// 768 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x95, 0xcf, 0x6f, 0xe3, 0x44,
	0x14, 0xc7, 0x77, 0x9c, 0x1f, 0x9b, 0xbc, 0x34, 0xd9, 0x30, 0x4b, 0x91, 0x65, 0x56, 0x6e, 0x09,
	0x42, 0x14, 0x21, 0x1c, 0x14, 0x2e, 0x1c, 0x40, 0x22, 0xa1, 0x51, 0x59, 0x5a, 0xd2, 0xc8, 0x09,
	0x1c, 0xb8, 0x58, 0x4e, 0x3c, 0x71, 0x47, 0x72, 0x3c, 0xc6, 0x33, 0xae, 0xe8, 0x7f, 0xc1, 0x91,
	0x2b, 0xff, 0x09, 0xc7, 0x9e, 0x56, 0x5c, 0xb9, 0x2c, 0xd0, 0xde, 0xf8, 0x0b, 0x38, 0xa2, 0x99,
	0xb1, 0x93, 0xa6, 0x09, 0x62, 0x41, 0xbd, 0x54, 0xf3, 0xbe, 0xef, 0xfb, 0xc6, 0xef, 0x7d, 0xfa,
	0x34, 0x01, 0x3b, 0x49, 0x99, 0x60, 0xbc, 0x1b, 0x66, 0x7e, 0x1a, 0xe8, 0xbf, 0x9e, 0x1f, 0x2c,
	0x69, 0xec, 0xa8, 0x04, 0xae, 0x28, 0xc9, 0xfa, 0x30, 0xa4, 0xe2, 0x22, 0x9b, 0x39, 0x73, 0xb6,
	0xec, 0x8a, 0x94, 0xc5, 0x1f, 0x64, 0xbc, 0xab, 0x0c, 0xb3, 0x6c, 0xd1, 0x0d, 0x59, 0xc8, 0x54,
	0xa0, 0x4e, 0xba, 0xd0, 0x3a, 0x08, 0x19, 0x0b, 0x23, 0xb2, 0x76, 0x09, 0xba, 0x24, 0x5c, 0xf8,
	0xcb, 0x24, 0x37, 0x98, 0xdb, 0x5f, 0xd6, 0x99, 0xce, 0xaf, 0x06, 0xec, 0x9f, 0x7e, 0xcc, 0x5d,
	0x92, 0xf8, 0x34, 0x1d, 0xb1, 0x80, 0x70, 0x97, 0x7c, 0x97, 0x11, 0x2e, 0xf0, 0x1b, 0x50, 0x4d,
	0x49, 0x48, 0x59, 0x6c, 0xa2, 0x43, 0x74, 0x54, 0x77, 0xf3, 0x08, 0x9b, 0xf0, 0x78, 0xce, 0xb2,
	0x58, 0xa4, 0x57, 0xa6, 0xa1, 0x12, 0x45, 0x88, 0x9f, 0x41, 0x3d, 0xf6, 0x97, 0x84, 0x27, 0xfe,
	0x9c, 0x98, 0x25, 0x95, 0x5b, 0x0b, 0xf8, 0x75, 0xa8, 0x44, 0xfe, 0x8c, 0x44, 0x66, 0x59, 0x65,
	0x74, 0x80, 0xdf, 0x81, 0x16, 0x27, 0xe9, 0x25, 0x9d, 0x13, 0x2f, 0x49, 0xc9, 0x82, 0x7e, 0x6f,
	0x56, 0x54, 0xba, 0x99, 0xab, 0x63, 0x25, 0xe2, 0x77, 0xe1, 0xc9, 0x05, 0xe3, 0x42, 0xde, 0xe6,
	0xf1, 0x6c, 0x21, 0x7d, 0x55, 0xe5, 0x6b, 0x15, 0xf2, 0x44, 0xa9, 0xf8, 0x6d, 0x68, 0xa6, 0x7a,
	0x00, 0x92, 0x7a, 0x09, 0x0d, 0xcc, 0xc7, 0xca, 0xb6, 0xb7, 0x12, 0xc7, 0x34, 0xc0, 0x27, 0x50,
	0xc4, 0x9e, 0x24, 0x65, 0xd6, 0x0e, 0xd1, 0x51, 0xa3, 0x67, 0x39, 0x1a, 0xa3, 0x53, 0x60, 0x74,
	0xa6, 0x05, 0xc6, 0x41, 0xed, 0xfa, 0xe5, 0xc1, 0xa3, 0x1f, 0x7e, 0x3b, 0x40, 0x6e, 0x23, 0xaf,
	0x94, 0x39, 0x39, 0x31, 0xa7, 0x61, 0xec, 0x8b, 0x2c, 0x25, 0x66, 0xfd, 0x10, 0x1d, 0xed, 0xb9,
	0x6b, 0xa1, 0xf3, 0xa7, 0x01, 0xad, 0x35, 0xd8, 0x63, 0xc2, 0xe7, 0xff, 0x03, 0xaa, 0x05, 0xb5,
	0xc8, 0x17, 0x54, 0x64, 0x81, 0x66, 0x6a, 0xb8, 0xab, 0x58, 0x7e, 0x3e, 0x62, 0x71, 0xa8, 0x93,
	0x65, 0x95, 0x5c, 0x0b, 0xf8, 0x2d, 0xd8, 0x93, 0x70, 0x3c, 0x3f, 0x08, 0x52, 0xc2, 0x79, 0x0e,
	0xb6, 0x21, 0xb5, 0xbe, 0x96, 0x30, 0x86, 0xb2, 0x64, 0x97, 0xb3, 0x54, 0x67, 0xd9, 0xca, 0x25,
	0x49, 0xb9, 0xec, 0x51, 0xb3, 0x2b, 0x42, 0xdc, 0x83, 0xb2, 0xb8, 0x4a, 0x34, 0xae, 0x56, 0xcf,
	0x76, 0xf4, 0x1e, 0x6d, 0x4e, 0xe8, 0xc8, 0xc3, 0xf4, 0x2a, 0x21, 0xae, 0xf2, 0xe2, 0x37, 0xa1,
	0x4e, 0xb9, 0xe7, 0xcf, 0x05, 0xbd, 0xd4, 0x84, 0x6a, 0x6e, 0x8d, 0xf2, 0xbe, 0x8a, 0x3b, 0x5f,
	0x42, 0xad, 0xb0, 0xe3, 0x27, 0xd0, 0x98, 0x3c, 0x1f, 0x9d, 0x9c, 0x0d, 0xbd, 0xd1, 0xf9, 0xf1,
	0xb0, 0xfd, 0x08, 0xb7, 0x00, 0x4e, 0xbf, 0x1e, 0x0c, 0xdd, 0xd1, 0x70, 0x3a, 0x9c, 0xb4, 0x11,
	0x06, 0xa8, 0x1e, 0x9f, 0x7f, 0x7e, 0x3a, 0x74, 0xdb, 0x06, 0xae, 0x82, 0xf1, 0xcd, 0x57, 0xed,
	0x12, 0xae, 0x43, 0xe5, 0x7c, 0xfa, 0xc5, 0xd0, 0x6d, 0x97, 0x3b, 0x2f, 0x10, 0xec, 0x6f, 0xb6,
	0x52, 0x2c, 0xf2, 0x7b, 0x50, 0x8e, 0x59, 0x40, 0x14, 0xf1, 0x46, 0x6f, 0x7f, 0x67, 0xdb, 0xae,
	0xb2, 0x6c, 0x6f, 0x8f, 0xf1, 0x0a, 0xdb, 0x53, 0x7a, 0x90, 0xed, 0x29, 0xdf, 0xdf, 0x9e, 0x9f,
	0x10, 0x3c, 0xed, 0x67, 0xe2, 0x82, 0xc4, 0x82, 0xce, 0x7d, 0x41, 0x8a, 0x71, 0xb6, 0x7a, 0x44,
	0xaf, 0xd0, 0xa3, 0xf1, 0x20, 0x3d, 0x96, 0xee, 0xf7, 0xf8, 0x02, 0xc1, 0xd3, 0x8d, 0xa7, 0x83,
	0x27, 0x2c, 0xe6, 0x04, 0xbf, 0x0f, 0x15, 0xc9, 0x93, 0x9b, 0xe8, 0xb0, 0xf4, 0xcf, 0xcc, 0xb5,
	0x47, 0xee, 0x69, 0x48, 0x62, 0x92, 0xfa, 0x82, 0xdc, 0x61, 0xde, 0x28, 0x34, 0x39, 0xce, 0x73,
	0x68, 0xae, 0x2c, 0xff, 0x99, 0xf9, 0xea, 0xf6, 0x7f, 0x87, 0xde, 0x7b, 0x89, 0xe0, 0xb5, 0x13,
	0xd9, 0x6b, 0x5f, 0xbe, 0xcb, 0x13, 0xfd, 0x06, 0xe1, 0x4f, 0xa1, 0xd5, 0x0f, 0x82, 0x3b, 0x83,
	0xe2, 0x67, 0xf9, 0x44, 0x3b, 0x9f, 0x4e, 0xab, 0xb9, 0x9a, 0x97, 0x67, 0x91, 0xc0, 0x9f, 0x40,
	0x73, 0xa3, 0x7c, 0x55, 0xbd, 0x73, 0x5f, 0xef, 0x57, 0x9f, 0x01, 0x3e, 0xa3, 0x5c, 0xf4, 0xa3,
	0xe8, 0x6e, 0x03, 0x56, 0x6e, 0xda, 0xb1, 0x21, 0x96, 0xb5, 0x75, 0xfd, 0xea, 0x3f, 0x33, 0xf8,
	0xec, 0xaf, 0x3f, 0x6c, 0x74, 0x7d, 0x63, 0xa3, 0x5f, 0x6e, 0x6c, 0xf4, 0xfb, 0x8d, 0x8d, 0x7e,
	0xbc, 0xb5, 0xd1, 0xcf, 0xb7, 0x36, 0xba, 0xbe, 0xb5, 0x11, 0x34, 0x29, 0x73, 0x66, 0x62, 0xc1,
	0xf5, 0x05, 0x03, 0x50, 0x28, 0xc6, 0x12, 0xee, 0x18, 0x7d, 0xab, 0x7f, 0x9e, 0x66, 0x55, 0x05,
	0xfb, 0xa3, 0xbf, 0x03, 0x00, 0x00, 0xff, 0xff, 0x01, 0xce, 0xca, 0x67, 0xce, 0x06, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// GuardAdminServiceClient is the client API for GuardAdminService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type GuardAdminServiceClient interface {
	AddRepairNodes(ctx context.Context, in *K8SRepairNodesRequest, opts ...grpc.CallOption) (*Result, error)
	AddRepairNode(ctx context.Context, in *RepairNodeDescRequest, opts ...grpc.CallOption) (*Result, error)
	ListAllRepairNodes(ctx context.Context, in *AuthenticateRequest, opts ...grpc.CallOption) (*RepairNodesResponse, error)
}

type guardAdminServiceClient struct {
	cc *grpc.ClientConn
}

func NewGuardAdminServiceClient(cc *grpc.ClientConn) GuardAdminServiceClient {
	return &guardAdminServiceClient{cc}
}

func (c *guardAdminServiceClient) AddRepairNodes(ctx context.Context, in *K8SRepairNodesRequest, opts ...grpc.CallOption) (*Result, error) {
	out := new(Result)
	err := c.cc.Invoke(ctx, "/guard.GuardAdminService/AddRepairNodes", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *guardAdminServiceClient) AddRepairNode(ctx context.Context, in *RepairNodeDescRequest, opts ...grpc.CallOption) (*Result, error) {
	out := new(Result)
	err := c.cc.Invoke(ctx, "/guard.GuardAdminService/AddRepairNode", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *guardAdminServiceClient) ListAllRepairNodes(ctx context.Context, in *AuthenticateRequest, opts ...grpc.CallOption) (*RepairNodesResponse, error) {
	out := new(RepairNodesResponse)
	err := c.cc.Invoke(ctx, "/guard.GuardAdminService/ListAllRepairNodes", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GuardAdminServiceServer is the server API for GuardAdminService service.
type GuardAdminServiceServer interface {
	AddRepairNodes(context.Context, *K8SRepairNodesRequest) (*Result, error)
	AddRepairNode(context.Context, *RepairNodeDescRequest) (*Result, error)
	ListAllRepairNodes(context.Context, *AuthenticateRequest) (*RepairNodesResponse, error)
}

// UnimplementedGuardAdminServiceServer can be embedded to have forward compatible implementations.
type UnimplementedGuardAdminServiceServer struct {
}

func (*UnimplementedGuardAdminServiceServer) AddRepairNodes(ctx context.Context, req *K8SRepairNodesRequest) (*Result, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddRepairNodes not implemented")
}
func (*UnimplementedGuardAdminServiceServer) AddRepairNode(ctx context.Context, req *RepairNodeDescRequest) (*Result, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddRepairNode not implemented")
}
func (*UnimplementedGuardAdminServiceServer) ListAllRepairNodes(ctx context.Context, req *AuthenticateRequest) (*RepairNodesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListAllRepairNodes not implemented")
}

func RegisterGuardAdminServiceServer(s *grpc.Server, srv GuardAdminServiceServer) {
	s.RegisterService(&_GuardAdminService_serviceDesc, srv)
}

func _GuardAdminService_AddRepairNodes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(K8SRepairNodesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GuardAdminServiceServer).AddRepairNodes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/guard.GuardAdminService/AddRepairNodes",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GuardAdminServiceServer).AddRepairNodes(ctx, req.(*K8SRepairNodesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GuardAdminService_AddRepairNode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RepairNodeDescRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GuardAdminServiceServer).AddRepairNode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/guard.GuardAdminService/AddRepairNode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GuardAdminServiceServer).AddRepairNode(ctx, req.(*RepairNodeDescRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GuardAdminService_ListAllRepairNodes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AuthenticateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GuardAdminServiceServer).ListAllRepairNodes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/guard.GuardAdminService/ListAllRepairNodes",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GuardAdminServiceServer).ListAllRepairNodes(ctx, req.(*AuthenticateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _GuardAdminService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "guard.GuardAdminService",
	HandlerType: (*GuardAdminServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddRepairNodes",
			Handler:    _GuardAdminService_AddRepairNodes_Handler,
		},
		{
			MethodName: "AddRepairNode",
			Handler:    _GuardAdminService_AddRepairNode_Handler,
		},
		{
			MethodName: "ListAllRepairNodes",
			Handler:    _GuardAdminService_ListAllRepairNodes_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "protos/guard/guard_admin.proto",
}

func (m *K8SRepairNodesRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *K8SRepairNodesRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *K8SRepairNodesRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Signature) > 0 {
		i -= len(m.Signature)
		copy(dAtA[i:], m.Signature)
		i = encodeVarintGuardAdmin(dAtA, i, uint64(len(m.Signature)))
		i--
		dAtA[i] = 0x4a
	}
	n1, err1 := github_com_tron_us_protobuf_types.StdTimeMarshalTo(m.RequestTime, dAtA[i-github_com_tron_us_protobuf_types.SizeOfStdTime(m.RequestTime):])
	if err1 != nil {
		return 0, err1
	}
	i -= n1
	i = encodeVarintGuardAdmin(dAtA, i, uint64(n1))
	i--
	dAtA[i] = 0x42
	if len(m.RequesterPid) > 0 {
		i -= len(m.RequesterPid)
		copy(dAtA[i:], m.RequesterPid)
		i = encodeVarintGuardAdmin(dAtA, i, uint64(len(m.RequesterPid)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.HostnameSuffix) > 0 {
		i -= len(m.HostnameSuffix)
		copy(dAtA[i:], m.HostnameSuffix)
		i = encodeVarintGuardAdmin(dAtA, i, uint64(len(m.HostnameSuffix)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.ServicePrefix) > 0 {
		i -= len(m.ServicePrefix)
		copy(dAtA[i:], m.ServicePrefix)
		i = encodeVarintGuardAdmin(dAtA, i, uint64(len(m.ServicePrefix)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Label) > 0 {
		i -= len(m.Label)
		copy(dAtA[i:], m.Label)
		i = encodeVarintGuardAdmin(dAtA, i, uint64(len(m.Label)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Namespace) > 0 {
		i -= len(m.Namespace)
		copy(dAtA[i:], m.Namespace)
		i = encodeVarintGuardAdmin(dAtA, i, uint64(len(m.Namespace)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Country) > 0 {
		i -= len(m.Country)
		copy(dAtA[i:], m.Country)
		i = encodeVarintGuardAdmin(dAtA, i, uint64(len(m.Country)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Region) > 0 {
		i -= len(m.Region)
		copy(dAtA[i:], m.Region)
		i = encodeVarintGuardAdmin(dAtA, i, uint64(len(m.Region)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *RepairNodeDesc) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RepairNodeDesc) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RepairNodeDesc) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.IsActive {
		i--
		if m.IsActive {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x48
	}
	if m.Type != 0 {
		i = encodeVarintGuardAdmin(dAtA, i, uint64(m.Type))
		i--
		dAtA[i] = 0x40
	}
	if len(m.Version) > 0 {
		i -= len(m.Version)
		copy(dAtA[i:], m.Version)
		i = encodeVarintGuardAdmin(dAtA, i, uint64(len(m.Version)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintGuardAdmin(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.HostAddress) > 0 {
		i -= len(m.HostAddress)
		copy(dAtA[i:], m.HostAddress)
		i = encodeVarintGuardAdmin(dAtA, i, uint64(len(m.HostAddress)))
		i--
		dAtA[i] = 0x2a
	}
	if m.Longitude != 0 {
		i -= 4
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(m.Longitude))))
		i--
		dAtA[i] = 0x25
	}
	if m.Latitude != 0 {
		i -= 4
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(m.Latitude))))
		i--
		dAtA[i] = 0x1d
	}
	if len(m.Country) > 0 {
		i -= len(m.Country)
		copy(dAtA[i:], m.Country)
		i = encodeVarintGuardAdmin(dAtA, i, uint64(len(m.Country)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Region) > 0 {
		i -= len(m.Region)
		copy(dAtA[i:], m.Region)
		i = encodeVarintGuardAdmin(dAtA, i, uint64(len(m.Region)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *RepairNodeDescRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RepairNodeDescRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RepairNodeDescRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Signature) > 0 {
		i -= len(m.Signature)
		copy(dAtA[i:], m.Signature)
		i = encodeVarintGuardAdmin(dAtA, i, uint64(len(m.Signature)))
		i--
		dAtA[i] = 0x22
	}
	n2, err2 := github_com_tron_us_protobuf_types.StdTimeMarshalTo(m.RequestTime, dAtA[i-github_com_tron_us_protobuf_types.SizeOfStdTime(m.RequestTime):])
	if err2 != nil {
		return 0, err2
	}
	i -= n2
	i = encodeVarintGuardAdmin(dAtA, i, uint64(n2))
	i--
	dAtA[i] = 0x1a
	if len(m.RequesterPid) > 0 {
		i -= len(m.RequesterPid)
		copy(dAtA[i:], m.RequesterPid)
		i = encodeVarintGuardAdmin(dAtA, i, uint64(len(m.RequesterPid)))
		i--
		dAtA[i] = 0x12
	}
	if m.Node != nil {
		{
			size, err := m.Node.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintGuardAdmin(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *AuthenticateRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AuthenticateRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AuthenticateRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Signature) > 0 {
		i -= len(m.Signature)
		copy(dAtA[i:], m.Signature)
		i = encodeVarintGuardAdmin(dAtA, i, uint64(len(m.Signature)))
		i--
		dAtA[i] = 0x1a
	}
	n4, err4 := github_com_tron_us_protobuf_types.StdTimeMarshalTo(m.RequestTime, dAtA[i-github_com_tron_us_protobuf_types.SizeOfStdTime(m.RequestTime):])
	if err4 != nil {
		return 0, err4
	}
	i -= n4
	i = encodeVarintGuardAdmin(dAtA, i, uint64(n4))
	i--
	dAtA[i] = 0x12
	if len(m.RequesterPid) > 0 {
		i -= len(m.RequesterPid)
		copy(dAtA[i:], m.RequesterPid)
		i = encodeVarintGuardAdmin(dAtA, i, uint64(len(m.RequesterPid)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *RepairNodesResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RepairNodesResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RepairNodesResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Signature) > 0 {
		i -= len(m.Signature)
		copy(dAtA[i:], m.Signature)
		i = encodeVarintGuardAdmin(dAtA, i, uint64(len(m.Signature)))
		i--
		dAtA[i] = 0x22
	}
	n5, err5 := github_com_tron_us_protobuf_types.StdTimeMarshalTo(m.GenerateTime, dAtA[i-github_com_tron_us_protobuf_types.SizeOfStdTime(m.GenerateTime):])
	if err5 != nil {
		return 0, err5
	}
	i -= n5
	i = encodeVarintGuardAdmin(dAtA, i, uint64(n5))
	i--
	dAtA[i] = 0x1a
	if len(m.GeneratePid) > 0 {
		i -= len(m.GeneratePid)
		copy(dAtA[i:], m.GeneratePid)
		i = encodeVarintGuardAdmin(dAtA, i, uint64(len(m.GeneratePid)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Nodes) > 0 {
		for iNdEx := len(m.Nodes) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Nodes[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGuardAdmin(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func encodeVarintGuardAdmin(dAtA []byte, offset int, v uint64) int {
	offset -= sovGuardAdmin(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func NewPopulatedK8SRepairNodesRequest(r randyGuardAdmin, easy bool) *K8SRepairNodesRequest {
	this := &K8SRepairNodesRequest{}
	this.Region = string(randStringGuardAdmin(r))
	this.Country = string(randStringGuardAdmin(r))
	this.Namespace = string(randStringGuardAdmin(r))
	this.Label = string(randStringGuardAdmin(r))
	this.ServicePrefix = string(randStringGuardAdmin(r))
	this.HostnameSuffix = string(randStringGuardAdmin(r))
	this.RequesterPid = string(randStringGuardAdmin(r))
	v1 := github_com_tron_us_protobuf_types.NewPopulatedStdTime(r, easy)
	this.RequestTime = *v1
	v2 := r.Intn(100)
	this.Signature = make([]byte, v2)
	for i := 0; i < v2; i++ {
		this.Signature[i] = byte(r.Intn(256))
	}
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedGuardAdmin(r, 10)
	}
	return this
}

func NewPopulatedRepairNodeDesc(r randyGuardAdmin, easy bool) *RepairNodeDesc {
	this := &RepairNodeDesc{}
	this.Region = string(randStringGuardAdmin(r))
	this.Country = string(randStringGuardAdmin(r))
	this.Latitude = float32(r.Float32())
	if r.Intn(2) == 0 {
		this.Latitude *= -1
	}
	this.Longitude = float32(r.Float32())
	if r.Intn(2) == 0 {
		this.Longitude *= -1
	}
	this.HostAddress = string(randStringGuardAdmin(r))
	this.Name = string(randStringGuardAdmin(r))
	this.Version = string(randStringGuardAdmin(r))
	this.Type = RepairNodeDesc_NodeType([]int32{0, 1, 2, 3, 4}[r.Intn(5)])
	this.IsActive = bool(bool(r.Intn(2) == 0))
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedGuardAdmin(r, 10)
	}
	return this
}

func NewPopulatedRepairNodeDescRequest(r randyGuardAdmin, easy bool) *RepairNodeDescRequest {
	this := &RepairNodeDescRequest{}
	if r.Intn(5) != 0 {
		this.Node = NewPopulatedRepairNodeDesc(r, easy)
	}
	this.RequesterPid = string(randStringGuardAdmin(r))
	v3 := github_com_tron_us_protobuf_types.NewPopulatedStdTime(r, easy)
	this.RequestTime = *v3
	v4 := r.Intn(100)
	this.Signature = make([]byte, v4)
	for i := 0; i < v4; i++ {
		this.Signature[i] = byte(r.Intn(256))
	}
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedGuardAdmin(r, 5)
	}
	return this
}

func NewPopulatedAuthenticateRequest(r randyGuardAdmin, easy bool) *AuthenticateRequest {
	this := &AuthenticateRequest{}
	this.RequesterPid = string(randStringGuardAdmin(r))
	v5 := github_com_tron_us_protobuf_types.NewPopulatedStdTime(r, easy)
	this.RequestTime = *v5
	v6 := r.Intn(100)
	this.Signature = make([]byte, v6)
	for i := 0; i < v6; i++ {
		this.Signature[i] = byte(r.Intn(256))
	}
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedGuardAdmin(r, 4)
	}
	return this
}

func NewPopulatedRepairNodesResponse(r randyGuardAdmin, easy bool) *RepairNodesResponse {
	this := &RepairNodesResponse{}
	if r.Intn(5) != 0 {
		v7 := r.Intn(5)
		this.Nodes = make([]*RepairNodeDesc, v7)
		for i := 0; i < v7; i++ {
			this.Nodes[i] = NewPopulatedRepairNodeDesc(r, easy)
		}
	}
	this.GeneratePid = string(randStringGuardAdmin(r))
	v8 := github_com_tron_us_protobuf_types.NewPopulatedStdTime(r, easy)
	this.GenerateTime = *v8
	v9 := r.Intn(100)
	this.Signature = make([]byte, v9)
	for i := 0; i < v9; i++ {
		this.Signature[i] = byte(r.Intn(256))
	}
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedGuardAdmin(r, 5)
	}
	return this
}

type randyGuardAdmin interface {
	Float32() float32
	Float64() float64
	Int63() int64
	Int31() int32
	Uint32() uint32
	Intn(n int) int
}

func randUTF8RuneGuardAdmin(r randyGuardAdmin) rune {
	ru := r.Intn(62)
	if ru < 10 {
		return rune(ru + 48)
	} else if ru < 36 {
		return rune(ru + 55)
	}
	return rune(ru + 61)
}
func randStringGuardAdmin(r randyGuardAdmin) string {
	v10 := r.Intn(100)
	tmps := make([]rune, v10)
	for i := 0; i < v10; i++ {
		tmps[i] = randUTF8RuneGuardAdmin(r)
	}
	return string(tmps)
}
func randUnrecognizedGuardAdmin(r randyGuardAdmin, maxFieldNumber int) (dAtA []byte) {
	l := r.Intn(5)
	for i := 0; i < l; i++ {
		wire := r.Intn(4)
		if wire == 3 {
			wire = 5
		}
		fieldNumber := maxFieldNumber + r.Intn(100)
		dAtA = randFieldGuardAdmin(dAtA, r, fieldNumber, wire)
	}
	return dAtA
}
func randFieldGuardAdmin(dAtA []byte, r randyGuardAdmin, fieldNumber int, wire int) []byte {
	key := uint32(fieldNumber)<<3 | uint32(wire)
	switch wire {
	case 0:
		dAtA = encodeVarintPopulateGuardAdmin(dAtA, uint64(key))
		v11 := r.Int63()
		if r.Intn(2) == 0 {
			v11 *= -1
		}
		dAtA = encodeVarintPopulateGuardAdmin(dAtA, uint64(v11))
	case 1:
		dAtA = encodeVarintPopulateGuardAdmin(dAtA, uint64(key))
		dAtA = append(dAtA, byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)))
	case 2:
		dAtA = encodeVarintPopulateGuardAdmin(dAtA, uint64(key))
		ll := r.Intn(100)
		dAtA = encodeVarintPopulateGuardAdmin(dAtA, uint64(ll))
		for j := 0; j < ll; j++ {
			dAtA = append(dAtA, byte(r.Intn(256)))
		}
	default:
		dAtA = encodeVarintPopulateGuardAdmin(dAtA, uint64(key))
		dAtA = append(dAtA, byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)))
	}
	return dAtA
}
func encodeVarintPopulateGuardAdmin(dAtA []byte, v uint64) []byte {
	for v >= 1<<7 {
		dAtA = append(dAtA, uint8(uint64(v)&0x7f|0x80))
		v >>= 7
	}
	dAtA = append(dAtA, uint8(v))
	return dAtA
}
func (m *K8SRepairNodesRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Region)
	if l > 0 {
		n += 1 + l + sovGuardAdmin(uint64(l))
	}
	l = len(m.Country)
	if l > 0 {
		n += 1 + l + sovGuardAdmin(uint64(l))
	}
	l = len(m.Namespace)
	if l > 0 {
		n += 1 + l + sovGuardAdmin(uint64(l))
	}
	l = len(m.Label)
	if l > 0 {
		n += 1 + l + sovGuardAdmin(uint64(l))
	}
	l = len(m.ServicePrefix)
	if l > 0 {
		n += 1 + l + sovGuardAdmin(uint64(l))
	}
	l = len(m.HostnameSuffix)
	if l > 0 {
		n += 1 + l + sovGuardAdmin(uint64(l))
	}
	l = len(m.RequesterPid)
	if l > 0 {
		n += 1 + l + sovGuardAdmin(uint64(l))
	}
	l = github_com_tron_us_protobuf_types.SizeOfStdTime(m.RequestTime)
	n += 1 + l + sovGuardAdmin(uint64(l))
	l = len(m.Signature)
	if l > 0 {
		n += 1 + l + sovGuardAdmin(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *RepairNodeDesc) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Region)
	if l > 0 {
		n += 1 + l + sovGuardAdmin(uint64(l))
	}
	l = len(m.Country)
	if l > 0 {
		n += 1 + l + sovGuardAdmin(uint64(l))
	}
	if m.Latitude != 0 {
		n += 5
	}
	if m.Longitude != 0 {
		n += 5
	}
	l = len(m.HostAddress)
	if l > 0 {
		n += 1 + l + sovGuardAdmin(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovGuardAdmin(uint64(l))
	}
	l = len(m.Version)
	if l > 0 {
		n += 1 + l + sovGuardAdmin(uint64(l))
	}
	if m.Type != 0 {
		n += 1 + sovGuardAdmin(uint64(m.Type))
	}
	if m.IsActive {
		n += 2
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *RepairNodeDescRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Node != nil {
		l = m.Node.Size()
		n += 1 + l + sovGuardAdmin(uint64(l))
	}
	l = len(m.RequesterPid)
	if l > 0 {
		n += 1 + l + sovGuardAdmin(uint64(l))
	}
	l = github_com_tron_us_protobuf_types.SizeOfStdTime(m.RequestTime)
	n += 1 + l + sovGuardAdmin(uint64(l))
	l = len(m.Signature)
	if l > 0 {
		n += 1 + l + sovGuardAdmin(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *AuthenticateRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.RequesterPid)
	if l > 0 {
		n += 1 + l + sovGuardAdmin(uint64(l))
	}
	l = github_com_tron_us_protobuf_types.SizeOfStdTime(m.RequestTime)
	n += 1 + l + sovGuardAdmin(uint64(l))
	l = len(m.Signature)
	if l > 0 {
		n += 1 + l + sovGuardAdmin(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *RepairNodesResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Nodes) > 0 {
		for _, e := range m.Nodes {
			l = e.Size()
			n += 1 + l + sovGuardAdmin(uint64(l))
		}
	}
	l = len(m.GeneratePid)
	if l > 0 {
		n += 1 + l + sovGuardAdmin(uint64(l))
	}
	l = github_com_tron_us_protobuf_types.SizeOfStdTime(m.GenerateTime)
	n += 1 + l + sovGuardAdmin(uint64(l))
	l = len(m.Signature)
	if l > 0 {
		n += 1 + l + sovGuardAdmin(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovGuardAdmin(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozGuardAdmin(x uint64) (n int) {
	return sovGuardAdmin(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *K8SRepairNodesRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGuardAdmin
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: K8sRepairNodesRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: K8sRepairNodesRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Region", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuardAdmin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGuardAdmin
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGuardAdmin
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Region = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Country", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuardAdmin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGuardAdmin
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGuardAdmin
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Country = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Namespace", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuardAdmin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGuardAdmin
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGuardAdmin
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Namespace = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Label", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuardAdmin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGuardAdmin
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGuardAdmin
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Label = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ServicePrefix", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuardAdmin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGuardAdmin
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGuardAdmin
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ServicePrefix = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HostnameSuffix", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuardAdmin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGuardAdmin
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGuardAdmin
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.HostnameSuffix = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RequesterPid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuardAdmin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGuardAdmin
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGuardAdmin
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RequesterPid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RequestTime", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuardAdmin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGuardAdmin
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGuardAdmin
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_tron_us_protobuf_types.StdTimeUnmarshal(&m.RequestTime, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Signature", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuardAdmin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthGuardAdmin
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthGuardAdmin
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Signature = append(m.Signature[:0], dAtA[iNdEx:postIndex]...)
			if m.Signature == nil {
				m.Signature = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGuardAdmin(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGuardAdmin
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthGuardAdmin
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RepairNodeDesc) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGuardAdmin
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RepairNodeDesc: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RepairNodeDesc: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Region", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuardAdmin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGuardAdmin
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGuardAdmin
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Region = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Country", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuardAdmin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGuardAdmin
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGuardAdmin
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Country = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field Latitude", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			m.Latitude = float32(math.Float32frombits(v))
		case 4:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field Longitude", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			m.Longitude = float32(math.Float32frombits(v))
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HostAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuardAdmin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGuardAdmin
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGuardAdmin
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.HostAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuardAdmin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGuardAdmin
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGuardAdmin
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Version", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuardAdmin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGuardAdmin
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGuardAdmin
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Version = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuardAdmin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= RepairNodeDesc_NodeType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsActive", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuardAdmin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsActive = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipGuardAdmin(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGuardAdmin
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthGuardAdmin
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RepairNodeDescRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGuardAdmin
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RepairNodeDescRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RepairNodeDescRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Node", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuardAdmin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGuardAdmin
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGuardAdmin
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Node == nil {
				m.Node = &RepairNodeDesc{}
			}
			if err := m.Node.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RequesterPid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuardAdmin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGuardAdmin
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGuardAdmin
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RequesterPid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RequestTime", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuardAdmin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGuardAdmin
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGuardAdmin
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_tron_us_protobuf_types.StdTimeUnmarshal(&m.RequestTime, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Signature", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuardAdmin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthGuardAdmin
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthGuardAdmin
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Signature = append(m.Signature[:0], dAtA[iNdEx:postIndex]...)
			if m.Signature == nil {
				m.Signature = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGuardAdmin(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGuardAdmin
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthGuardAdmin
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AuthenticateRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGuardAdmin
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AuthenticateRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AuthenticateRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RequesterPid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuardAdmin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGuardAdmin
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGuardAdmin
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RequesterPid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RequestTime", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuardAdmin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGuardAdmin
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGuardAdmin
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_tron_us_protobuf_types.StdTimeUnmarshal(&m.RequestTime, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Signature", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuardAdmin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthGuardAdmin
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthGuardAdmin
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Signature = append(m.Signature[:0], dAtA[iNdEx:postIndex]...)
			if m.Signature == nil {
				m.Signature = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGuardAdmin(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGuardAdmin
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthGuardAdmin
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RepairNodesResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGuardAdmin
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RepairNodesResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RepairNodesResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Nodes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuardAdmin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGuardAdmin
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGuardAdmin
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Nodes = append(m.Nodes, &RepairNodeDesc{})
			if err := m.Nodes[len(m.Nodes)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GeneratePid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuardAdmin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGuardAdmin
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGuardAdmin
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GeneratePid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GenerateTime", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuardAdmin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGuardAdmin
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGuardAdmin
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_tron_us_protobuf_types.StdTimeUnmarshal(&m.GenerateTime, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Signature", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuardAdmin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthGuardAdmin
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthGuardAdmin
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Signature = append(m.Signature[:0], dAtA[iNdEx:postIndex]...)
			if m.Signature == nil {
				m.Signature = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGuardAdmin(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGuardAdmin
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthGuardAdmin
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipGuardAdmin(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowGuardAdmin
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowGuardAdmin
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowGuardAdmin
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthGuardAdmin
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupGuardAdmin
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthGuardAdmin
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthGuardAdmin        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowGuardAdmin          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupGuardAdmin = fmt.Errorf("proto: unexpected end of group")
)
