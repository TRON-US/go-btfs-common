// source: protos/escrow/escrow.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

var github_com_tron$us_protobuf_gogoproto_gogo_pb = require('../../github.com/tron-us/protobuf/gogoproto/gogo_pb.js');
goog.object.extend(proto, github_com_tron$us_protobuf_gogoproto_gogo_pb);
var google_protobuf_timestamp_pb = require('google-protobuf/google/protobuf/timestamp_pb.js');
goog.object.extend(proto, google_protobuf_timestamp_pb);
var protos_ledger_ledger_pb = require('../../protos/ledger/ledger_pb.js');
goog.object.extend(proto, protos_ledger_ledger_pb);
goog.exportSymbol('proto.escrow.BalanceResult', null, global);
goog.exportSymbol('proto.escrow.CancelContractRequest', null, global);
goog.exportSymbol('proto.escrow.CancelContractResult', null, global);
goog.exportSymbol('proto.escrow.ContractID', null, global);
goog.exportSymbol('proto.escrow.ContractIDBatch', null, global);
goog.exportSymbol('proto.escrow.ContractType', null, global);
goog.exportSymbol('proto.escrow.Escrow', null, global);
goog.exportSymbol('proto.escrow.EscrowContract', null, global);
goog.exportSymbol('proto.escrow.EscrowContractRequest', null, global);
goog.exportSymbol('proto.escrow.EscrowStatus', null, global);
goog.exportSymbol('proto.escrow.PayinRequest', null, global);
goog.exportSymbol('proto.escrow.PayinResult', null, global);
goog.exportSymbol('proto.escrow.PayinStatus', null, global);
goog.exportSymbol('proto.escrow.Payment', null, global);
goog.exportSymbol('proto.escrow.PaymentResult', null, global);
goog.exportSymbol('proto.escrow.PayoutAddress', null, global);
goog.exportSymbol('proto.escrow.PayoutStatus', null, global);
goog.exportSymbol('proto.escrow.Schedule', null, global);
goog.exportSymbol('proto.escrow.SignedBalanceResult', null, global);
goog.exportSymbol('proto.escrow.SignedCancelContractResult', null, global);
goog.exportSymbol('proto.escrow.SignedCancelRequest', null, global);
goog.exportSymbol('proto.escrow.SignedContractID', null, global);
goog.exportSymbol('proto.escrow.SignedContractIDBatch', null, global);
goog.exportSymbol('proto.escrow.SignedEscrowContract', null, global);
goog.exportSymbol('proto.escrow.SignedPayinRequest', null, global);
goog.exportSymbol('proto.escrow.SignedPayinResult', null, global);
goog.exportSymbol('proto.escrow.SignedPayinStatus', null, global);
goog.exportSymbol('proto.escrow.SignedPaymentResult', null, global);
goog.exportSymbol('proto.escrow.SignedPayoutAddress', null, global);
goog.exportSymbol('proto.escrow.SignedPayoutStatus', null, global);
goog.exportSymbol('proto.escrow.SignedPayoutStatusBatch', null, global);
goog.exportSymbol('proto.escrow.SignedStartEscrowResult', null, global);
goog.exportSymbol('proto.escrow.SignedSubmitContractResult', null, global);
goog.exportSymbol('proto.escrow.StartEscrowResult', null, global);
goog.exportSymbol('proto.escrow.SubmitContractResult', null, global);
goog.exportSymbol('proto.escrow.TokenType', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.escrow.ContractID = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.escrow.ContractID, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.escrow.ContractID.displayName = 'proto.escrow.ContractID';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.escrow.ContractIDBatch = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.escrow.ContractIDBatch.repeatedFields_, null);
};
goog.inherits(proto.escrow.ContractIDBatch, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.escrow.ContractIDBatch.displayName = 'proto.escrow.ContractIDBatch';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.escrow.SignedContractID = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.escrow.SignedContractID, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.escrow.SignedContractID.displayName = 'proto.escrow.SignedContractID';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.escrow.SignedContractIDBatch = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.escrow.SignedContractIDBatch, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.escrow.SignedContractIDBatch.displayName = 'proto.escrow.SignedContractIDBatch';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.escrow.EscrowContract = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.escrow.EscrowContract, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.escrow.EscrowContract.displayName = 'proto.escrow.EscrowContract';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.escrow.SignedEscrowContract = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.escrow.SignedEscrowContract, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.escrow.SignedEscrowContract.displayName = 'proto.escrow.SignedEscrowContract';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.escrow.EscrowContractRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.escrow.EscrowContractRequest.repeatedFields_, null);
};
goog.inherits(proto.escrow.EscrowContractRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.escrow.EscrowContractRequest.displayName = 'proto.escrow.EscrowContractRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.escrow.Escrow = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.escrow.Escrow, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.escrow.Escrow.displayName = 'proto.escrow.Escrow';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.escrow.SubmitContractResult = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.escrow.SubmitContractResult.repeatedFields_, null);
};
goog.inherits(proto.escrow.SubmitContractResult, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.escrow.SubmitContractResult.displayName = 'proto.escrow.SubmitContractResult';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.escrow.SignedSubmitContractResult = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.escrow.SignedSubmitContractResult, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.escrow.SignedSubmitContractResult.displayName = 'proto.escrow.SignedSubmitContractResult';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.escrow.StartEscrowResult = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.escrow.StartEscrowResult.repeatedFields_, null);
};
goog.inherits(proto.escrow.StartEscrowResult, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.escrow.StartEscrowResult.displayName = 'proto.escrow.StartEscrowResult';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.escrow.SignedStartEscrowResult = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.escrow.SignedStartEscrowResult, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.escrow.SignedStartEscrowResult.displayName = 'proto.escrow.SignedStartEscrowResult';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.escrow.PayinRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.escrow.PayinRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.escrow.PayinRequest.displayName = 'proto.escrow.PayinRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.escrow.SignedPayinRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.escrow.SignedPayinRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.escrow.SignedPayinRequest.displayName = 'proto.escrow.SignedPayinRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.escrow.PayinResult = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.escrow.PayinResult, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.escrow.PayinResult.displayName = 'proto.escrow.PayinResult';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.escrow.SignedPayinResult = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.escrow.SignedPayinResult, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.escrow.SignedPayinResult.displayName = 'proto.escrow.SignedPayinResult';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.escrow.PayinStatus = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.escrow.PayinStatus, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.escrow.PayinStatus.displayName = 'proto.escrow.PayinStatus';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.escrow.SignedPayinStatus = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.escrow.SignedPayinStatus, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.escrow.SignedPayinStatus.displayName = 'proto.escrow.SignedPayinStatus';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.escrow.PayoutStatus = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.escrow.PayoutStatus, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.escrow.PayoutStatus.displayName = 'proto.escrow.PayoutStatus';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.escrow.SignedPayoutStatus = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.escrow.SignedPayoutStatus, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.escrow.SignedPayoutStatus.displayName = 'proto.escrow.SignedPayoutStatus';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.escrow.SignedPayoutStatusBatch = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.escrow.SignedPayoutStatusBatch.repeatedFields_, null);
};
goog.inherits(proto.escrow.SignedPayoutStatusBatch, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.escrow.SignedPayoutStatusBatch.displayName = 'proto.escrow.SignedPayoutStatusBatch';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.escrow.CancelContractRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.escrow.CancelContractRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.escrow.CancelContractRequest.displayName = 'proto.escrow.CancelContractRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.escrow.SignedCancelRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.escrow.SignedCancelRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.escrow.SignedCancelRequest.displayName = 'proto.escrow.SignedCancelRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.escrow.CancelContractResult = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.escrow.CancelContractResult, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.escrow.CancelContractResult.displayName = 'proto.escrow.CancelContractResult';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.escrow.SignedCancelContractResult = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.escrow.SignedCancelContractResult, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.escrow.SignedCancelContractResult.displayName = 'proto.escrow.SignedCancelContractResult';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.escrow.PayoutAddress = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.escrow.PayoutAddress, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.escrow.PayoutAddress.displayName = 'proto.escrow.PayoutAddress';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.escrow.SignedPayoutAddress = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.escrow.SignedPayoutAddress, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.escrow.SignedPayoutAddress.displayName = 'proto.escrow.SignedPayoutAddress';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.escrow.Payment = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.escrow.Payment, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.escrow.Payment.displayName = 'proto.escrow.Payment';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.escrow.PaymentResult = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.escrow.PaymentResult.repeatedFields_, null);
};
goog.inherits(proto.escrow.PaymentResult, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.escrow.PaymentResult.displayName = 'proto.escrow.PaymentResult';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.escrow.SignedPaymentResult = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.escrow.SignedPaymentResult, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.escrow.SignedPaymentResult.displayName = 'proto.escrow.SignedPaymentResult';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.escrow.BalanceResult = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.escrow.BalanceResult, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.escrow.BalanceResult.displayName = 'proto.escrow.BalanceResult';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.escrow.SignedBalanceResult = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.escrow.SignedBalanceResult, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.escrow.SignedBalanceResult.displayName = 'proto.escrow.SignedBalanceResult';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.escrow.ContractID.prototype.toObject = function(opt_includeInstance) {
  return proto.escrow.ContractID.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.escrow.ContractID} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.escrow.ContractID.toObject = function(includeInstance, msg) {
  var f, obj = {
    contractId: jspb.Message.getFieldWithDefault(msg, 1, ""),
    address: msg.getAddress_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.escrow.ContractID}
 */
proto.escrow.ContractID.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.escrow.ContractID;
  return proto.escrow.ContractID.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.escrow.ContractID} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.escrow.ContractID}
 */
proto.escrow.ContractID.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setContractId(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setAddress(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.escrow.ContractID.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.escrow.ContractID.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.escrow.ContractID} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.escrow.ContractID.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getContractId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getAddress_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      2,
      f
    );
  }
};


/**
 * optional string contract_id = 1;
 * @return {string}
 */
proto.escrow.ContractID.prototype.getContractId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.escrow.ContractID} returns this
 */
proto.escrow.ContractID.prototype.setContractId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional bytes address = 2;
 * @return {!(string|Uint8Array)}
 */
proto.escrow.ContractID.prototype.getAddress = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * optional bytes address = 2;
 * This is a type-conversion wrapper around `getAddress()`
 * @return {string}
 */
proto.escrow.ContractID.prototype.getAddress_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getAddress()));
};


/**
 * optional bytes address = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getAddress()`
 * @return {!Uint8Array}
 */
proto.escrow.ContractID.prototype.getAddress_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getAddress()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.escrow.ContractID} returns this
 */
proto.escrow.ContractID.prototype.setAddress = function(value) {
  return jspb.Message.setProto3BytesField(this, 2, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.escrow.ContractIDBatch.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.escrow.ContractIDBatch.prototype.toObject = function(opt_includeInstance) {
  return proto.escrow.ContractIDBatch.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.escrow.ContractIDBatch} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.escrow.ContractIDBatch.toObject = function(includeInstance, msg) {
  var f, obj = {
    contractIdList: (f = jspb.Message.getRepeatedField(msg, 1)) == null ? undefined : f,
    address: msg.getAddress_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.escrow.ContractIDBatch}
 */
proto.escrow.ContractIDBatch.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.escrow.ContractIDBatch;
  return proto.escrow.ContractIDBatch.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.escrow.ContractIDBatch} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.escrow.ContractIDBatch}
 */
proto.escrow.ContractIDBatch.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.addContractId(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setAddress(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.escrow.ContractIDBatch.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.escrow.ContractIDBatch.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.escrow.ContractIDBatch} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.escrow.ContractIDBatch.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getContractIdList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      1,
      f
    );
  }
  f = message.getAddress_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      2,
      f
    );
  }
};


/**
 * repeated string contract_id = 1;
 * @return {!Array<string>}
 */
proto.escrow.ContractIDBatch.prototype.getContractIdList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 1));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.escrow.ContractIDBatch} returns this
 */
proto.escrow.ContractIDBatch.prototype.setContractIdList = function(value) {
  return jspb.Message.setField(this, 1, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.escrow.ContractIDBatch} returns this
 */
proto.escrow.ContractIDBatch.prototype.addContractId = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 1, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.escrow.ContractIDBatch} returns this
 */
proto.escrow.ContractIDBatch.prototype.clearContractIdList = function() {
  return this.setContractIdList([]);
};


/**
 * optional bytes address = 2;
 * @return {!(string|Uint8Array)}
 */
proto.escrow.ContractIDBatch.prototype.getAddress = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * optional bytes address = 2;
 * This is a type-conversion wrapper around `getAddress()`
 * @return {string}
 */
proto.escrow.ContractIDBatch.prototype.getAddress_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getAddress()));
};


/**
 * optional bytes address = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getAddress()`
 * @return {!Uint8Array}
 */
proto.escrow.ContractIDBatch.prototype.getAddress_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getAddress()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.escrow.ContractIDBatch} returns this
 */
proto.escrow.ContractIDBatch.prototype.setAddress = function(value) {
  return jspb.Message.setProto3BytesField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.escrow.SignedContractID.prototype.toObject = function(opt_includeInstance) {
  return proto.escrow.SignedContractID.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.escrow.SignedContractID} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.escrow.SignedContractID.toObject = function(includeInstance, msg) {
  var f, obj = {
    data: (f = msg.getData()) && proto.escrow.ContractID.toObject(includeInstance, f),
    signature: msg.getSignature_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.escrow.SignedContractID}
 */
proto.escrow.SignedContractID.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.escrow.SignedContractID;
  return proto.escrow.SignedContractID.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.escrow.SignedContractID} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.escrow.SignedContractID}
 */
proto.escrow.SignedContractID.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.escrow.ContractID;
      reader.readMessage(value,proto.escrow.ContractID.deserializeBinaryFromReader);
      msg.setData(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setSignature(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.escrow.SignedContractID.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.escrow.SignedContractID.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.escrow.SignedContractID} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.escrow.SignedContractID.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getData();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.escrow.ContractID.serializeBinaryToWriter
    );
  }
  f = message.getSignature_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      2,
      f
    );
  }
};


/**
 * optional ContractID data = 1;
 * @return {?proto.escrow.ContractID}
 */
proto.escrow.SignedContractID.prototype.getData = function() {
  return /** @type{?proto.escrow.ContractID} */ (
    jspb.Message.getWrapperField(this, proto.escrow.ContractID, 1));
};


/**
 * @param {?proto.escrow.ContractID|undefined} value
 * @return {!proto.escrow.SignedContractID} returns this
*/
proto.escrow.SignedContractID.prototype.setData = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.escrow.SignedContractID} returns this
 */
proto.escrow.SignedContractID.prototype.clearData = function() {
  return this.setData(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.escrow.SignedContractID.prototype.hasData = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional bytes signature = 2;
 * @return {!(string|Uint8Array)}
 */
proto.escrow.SignedContractID.prototype.getSignature = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * optional bytes signature = 2;
 * This is a type-conversion wrapper around `getSignature()`
 * @return {string}
 */
proto.escrow.SignedContractID.prototype.getSignature_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getSignature()));
};


/**
 * optional bytes signature = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getSignature()`
 * @return {!Uint8Array}
 */
proto.escrow.SignedContractID.prototype.getSignature_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getSignature()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.escrow.SignedContractID} returns this
 */
proto.escrow.SignedContractID.prototype.setSignature = function(value) {
  return jspb.Message.setProto3BytesField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.escrow.SignedContractIDBatch.prototype.toObject = function(opt_includeInstance) {
  return proto.escrow.SignedContractIDBatch.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.escrow.SignedContractIDBatch} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.escrow.SignedContractIDBatch.toObject = function(includeInstance, msg) {
  var f, obj = {
    data: (f = msg.getData()) && proto.escrow.ContractIDBatch.toObject(includeInstance, f),
    signature: msg.getSignature_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.escrow.SignedContractIDBatch}
 */
proto.escrow.SignedContractIDBatch.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.escrow.SignedContractIDBatch;
  return proto.escrow.SignedContractIDBatch.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.escrow.SignedContractIDBatch} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.escrow.SignedContractIDBatch}
 */
proto.escrow.SignedContractIDBatch.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.escrow.ContractIDBatch;
      reader.readMessage(value,proto.escrow.ContractIDBatch.deserializeBinaryFromReader);
      msg.setData(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setSignature(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.escrow.SignedContractIDBatch.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.escrow.SignedContractIDBatch.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.escrow.SignedContractIDBatch} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.escrow.SignedContractIDBatch.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getData();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.escrow.ContractIDBatch.serializeBinaryToWriter
    );
  }
  f = message.getSignature_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      2,
      f
    );
  }
};


/**
 * optional ContractIDBatch data = 1;
 * @return {?proto.escrow.ContractIDBatch}
 */
proto.escrow.SignedContractIDBatch.prototype.getData = function() {
  return /** @type{?proto.escrow.ContractIDBatch} */ (
    jspb.Message.getWrapperField(this, proto.escrow.ContractIDBatch, 1));
};


/**
 * @param {?proto.escrow.ContractIDBatch|undefined} value
 * @return {!proto.escrow.SignedContractIDBatch} returns this
*/
proto.escrow.SignedContractIDBatch.prototype.setData = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.escrow.SignedContractIDBatch} returns this
 */
proto.escrow.SignedContractIDBatch.prototype.clearData = function() {
  return this.setData(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.escrow.SignedContractIDBatch.prototype.hasData = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional bytes signature = 2;
 * @return {!(string|Uint8Array)}
 */
proto.escrow.SignedContractIDBatch.prototype.getSignature = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * optional bytes signature = 2;
 * This is a type-conversion wrapper around `getSignature()`
 * @return {string}
 */
proto.escrow.SignedContractIDBatch.prototype.getSignature_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getSignature()));
};


/**
 * optional bytes signature = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getSignature()`
 * @return {!Uint8Array}
 */
proto.escrow.SignedContractIDBatch.prototype.getSignature_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getSignature()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.escrow.SignedContractIDBatch} returns this
 */
proto.escrow.SignedContractIDBatch.prototype.setSignature = function(value) {
  return jspb.Message.setProto3BytesField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.escrow.EscrowContract.prototype.toObject = function(opt_includeInstance) {
  return proto.escrow.EscrowContract.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.escrow.EscrowContract} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.escrow.EscrowContract.toObject = function(includeInstance, msg) {
  var f, obj = {
    contractId: jspb.Message.getFieldWithDefault(msg, 1, ""),
    buyerAddress: msg.getBuyerAddress_asB64(),
    sellerAddress: msg.getSellerAddress_asB64(),
    authAddress: msg.getAuthAddress_asB64(),
    amount: jspb.Message.getFieldWithDefault(msg, 5, 0),
    collateralAmount: jspb.Message.getFieldWithDefault(msg, 6, 0),
    withholdAmount: jspb.Message.getFieldWithDefault(msg, 7, 0),
    tokenType: jspb.Message.getFieldWithDefault(msg, 8, 0),
    payoutSchedule: jspb.Message.getFieldWithDefault(msg, 9, 0),
    numPayouts: jspb.Message.getFieldWithDefault(msg, 10, 0),
    reference: msg.getReference_asB64(),
    customizePayoutPeriod: jspb.Message.getFieldWithDefault(msg, 12, 0),
    type: jspb.Message.getFieldWithDefault(msg, 13, 0),
    contingentAmount: jspb.Message.getFieldWithDefault(msg, 14, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.escrow.EscrowContract}
 */
proto.escrow.EscrowContract.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.escrow.EscrowContract;
  return proto.escrow.EscrowContract.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.escrow.EscrowContract} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.escrow.EscrowContract}
 */
proto.escrow.EscrowContract.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setContractId(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setBuyerAddress(value);
      break;
    case 3:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setSellerAddress(value);
      break;
    case 4:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setAuthAddress(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setAmount(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setCollateralAmount(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setWithholdAmount(value);
      break;
    case 8:
      var value = /** @type {!proto.escrow.TokenType} */ (reader.readEnum());
      msg.setTokenType(value);
      break;
    case 9:
      var value = /** @type {!proto.escrow.Schedule} */ (reader.readEnum());
      msg.setPayoutSchedule(value);
      break;
    case 10:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setNumPayouts(value);
      break;
    case 11:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setReference(value);
      break;
    case 12:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setCustomizePayoutPeriod(value);
      break;
    case 13:
      var value = /** @type {!proto.escrow.ContractType} */ (reader.readEnum());
      msg.setType(value);
      break;
    case 14:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setContingentAmount(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.escrow.EscrowContract.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.escrow.EscrowContract.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.escrow.EscrowContract} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.escrow.EscrowContract.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getContractId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getBuyerAddress_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      2,
      f
    );
  }
  f = message.getSellerAddress_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      3,
      f
    );
  }
  f = message.getAuthAddress_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      4,
      f
    );
  }
  f = message.getAmount();
  if (f !== 0) {
    writer.writeInt64(
      5,
      f
    );
  }
  f = message.getCollateralAmount();
  if (f !== 0) {
    writer.writeInt64(
      6,
      f
    );
  }
  f = message.getWithholdAmount();
  if (f !== 0) {
    writer.writeInt64(
      7,
      f
    );
  }
  f = message.getTokenType();
  if (f !== 0.0) {
    writer.writeEnum(
      8,
      f
    );
  }
  f = message.getPayoutSchedule();
  if (f !== 0.0) {
    writer.writeEnum(
      9,
      f
    );
  }
  f = message.getNumPayouts();
  if (f !== 0) {
    writer.writeInt32(
      10,
      f
    );
  }
  f = message.getReference_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      11,
      f
    );
  }
  f = message.getCustomizePayoutPeriod();
  if (f !== 0) {
    writer.writeInt32(
      12,
      f
    );
  }
  f = message.getType();
  if (f !== 0.0) {
    writer.writeEnum(
      13,
      f
    );
  }
  f = message.getContingentAmount();
  if (f !== 0) {
    writer.writeInt64(
      14,
      f
    );
  }
};


/**
 * optional string contract_id = 1;
 * @return {string}
 */
proto.escrow.EscrowContract.prototype.getContractId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.escrow.EscrowContract} returns this
 */
proto.escrow.EscrowContract.prototype.setContractId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional bytes buyer_address = 2;
 * @return {!(string|Uint8Array)}
 */
proto.escrow.EscrowContract.prototype.getBuyerAddress = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * optional bytes buyer_address = 2;
 * This is a type-conversion wrapper around `getBuyerAddress()`
 * @return {string}
 */
proto.escrow.EscrowContract.prototype.getBuyerAddress_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getBuyerAddress()));
};


/**
 * optional bytes buyer_address = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getBuyerAddress()`
 * @return {!Uint8Array}
 */
proto.escrow.EscrowContract.prototype.getBuyerAddress_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getBuyerAddress()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.escrow.EscrowContract} returns this
 */
proto.escrow.EscrowContract.prototype.setBuyerAddress = function(value) {
  return jspb.Message.setProto3BytesField(this, 2, value);
};


/**
 * optional bytes seller_address = 3;
 * @return {!(string|Uint8Array)}
 */
proto.escrow.EscrowContract.prototype.getSellerAddress = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * optional bytes seller_address = 3;
 * This is a type-conversion wrapper around `getSellerAddress()`
 * @return {string}
 */
proto.escrow.EscrowContract.prototype.getSellerAddress_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getSellerAddress()));
};


/**
 * optional bytes seller_address = 3;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getSellerAddress()`
 * @return {!Uint8Array}
 */
proto.escrow.EscrowContract.prototype.getSellerAddress_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getSellerAddress()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.escrow.EscrowContract} returns this
 */
proto.escrow.EscrowContract.prototype.setSellerAddress = function(value) {
  return jspb.Message.setProto3BytesField(this, 3, value);
};


/**
 * optional bytes auth_address = 4;
 * @return {!(string|Uint8Array)}
 */
proto.escrow.EscrowContract.prototype.getAuthAddress = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * optional bytes auth_address = 4;
 * This is a type-conversion wrapper around `getAuthAddress()`
 * @return {string}
 */
proto.escrow.EscrowContract.prototype.getAuthAddress_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getAuthAddress()));
};


/**
 * optional bytes auth_address = 4;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getAuthAddress()`
 * @return {!Uint8Array}
 */
proto.escrow.EscrowContract.prototype.getAuthAddress_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getAuthAddress()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.escrow.EscrowContract} returns this
 */
proto.escrow.EscrowContract.prototype.setAuthAddress = function(value) {
  return jspb.Message.setProto3BytesField(this, 4, value);
};


/**
 * optional int64 amount = 5;
 * @return {number}
 */
proto.escrow.EscrowContract.prototype.getAmount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {number} value
 * @return {!proto.escrow.EscrowContract} returns this
 */
proto.escrow.EscrowContract.prototype.setAmount = function(value) {
  return jspb.Message.setProto3IntField(this, 5, value);
};


/**
 * optional int64 collateral_amount = 6;
 * @return {number}
 */
proto.escrow.EscrowContract.prototype.getCollateralAmount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/**
 * @param {number} value
 * @return {!proto.escrow.EscrowContract} returns this
 */
proto.escrow.EscrowContract.prototype.setCollateralAmount = function(value) {
  return jspb.Message.setProto3IntField(this, 6, value);
};


/**
 * optional int64 withhold_amount = 7;
 * @return {number}
 */
proto.escrow.EscrowContract.prototype.getWithholdAmount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 7, 0));
};


/**
 * @param {number} value
 * @return {!proto.escrow.EscrowContract} returns this
 */
proto.escrow.EscrowContract.prototype.setWithholdAmount = function(value) {
  return jspb.Message.setProto3IntField(this, 7, value);
};


/**
 * optional TokenType token_type = 8;
 * @return {!proto.escrow.TokenType}
 */
proto.escrow.EscrowContract.prototype.getTokenType = function() {
  return /** @type {!proto.escrow.TokenType} */ (jspb.Message.getFieldWithDefault(this, 8, 0));
};


/**
 * @param {!proto.escrow.TokenType} value
 * @return {!proto.escrow.EscrowContract} returns this
 */
proto.escrow.EscrowContract.prototype.setTokenType = function(value) {
  return jspb.Message.setProto3EnumField(this, 8, value);
};


/**
 * optional Schedule payout_schedule = 9;
 * @return {!proto.escrow.Schedule}
 */
proto.escrow.EscrowContract.prototype.getPayoutSchedule = function() {
  return /** @type {!proto.escrow.Schedule} */ (jspb.Message.getFieldWithDefault(this, 9, 0));
};


/**
 * @param {!proto.escrow.Schedule} value
 * @return {!proto.escrow.EscrowContract} returns this
 */
proto.escrow.EscrowContract.prototype.setPayoutSchedule = function(value) {
  return jspb.Message.setProto3EnumField(this, 9, value);
};


/**
 * optional int32 num_payouts = 10;
 * @return {number}
 */
proto.escrow.EscrowContract.prototype.getNumPayouts = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 10, 0));
};


/**
 * @param {number} value
 * @return {!proto.escrow.EscrowContract} returns this
 */
proto.escrow.EscrowContract.prototype.setNumPayouts = function(value) {
  return jspb.Message.setProto3IntField(this, 10, value);
};


/**
 * optional bytes reference = 11;
 * @return {!(string|Uint8Array)}
 */
proto.escrow.EscrowContract.prototype.getReference = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 11, ""));
};


/**
 * optional bytes reference = 11;
 * This is a type-conversion wrapper around `getReference()`
 * @return {string}
 */
proto.escrow.EscrowContract.prototype.getReference_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getReference()));
};


/**
 * optional bytes reference = 11;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getReference()`
 * @return {!Uint8Array}
 */
proto.escrow.EscrowContract.prototype.getReference_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getReference()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.escrow.EscrowContract} returns this
 */
proto.escrow.EscrowContract.prototype.setReference = function(value) {
  return jspb.Message.setProto3BytesField(this, 11, value);
};


/**
 * optional int32 customize_payout_period = 12;
 * @return {number}
 */
proto.escrow.EscrowContract.prototype.getCustomizePayoutPeriod = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 12, 0));
};


/**
 * @param {number} value
 * @return {!proto.escrow.EscrowContract} returns this
 */
proto.escrow.EscrowContract.prototype.setCustomizePayoutPeriod = function(value) {
  return jspb.Message.setProto3IntField(this, 12, value);
};


/**
 * optional ContractType type = 13;
 * @return {!proto.escrow.ContractType}
 */
proto.escrow.EscrowContract.prototype.getType = function() {
  return /** @type {!proto.escrow.ContractType} */ (jspb.Message.getFieldWithDefault(this, 13, 0));
};


/**
 * @param {!proto.escrow.ContractType} value
 * @return {!proto.escrow.EscrowContract} returns this
 */
proto.escrow.EscrowContract.prototype.setType = function(value) {
  return jspb.Message.setProto3EnumField(this, 13, value);
};


/**
 * optional int64 contingent_amount = 14;
 * @return {number}
 */
proto.escrow.EscrowContract.prototype.getContingentAmount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 14, 0));
};


/**
 * @param {number} value
 * @return {!proto.escrow.EscrowContract} returns this
 */
proto.escrow.EscrowContract.prototype.setContingentAmount = function(value) {
  return jspb.Message.setProto3IntField(this, 14, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.escrow.SignedEscrowContract.prototype.toObject = function(opt_includeInstance) {
  return proto.escrow.SignedEscrowContract.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.escrow.SignedEscrowContract} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.escrow.SignedEscrowContract.toObject = function(includeInstance, msg) {
  var f, obj = {
    contract: (f = msg.getContract()) && proto.escrow.EscrowContract.toObject(includeInstance, f),
    buyerSignature: msg.getBuyerSignature_asB64(),
    sellerSignature: msg.getSellerSignature_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.escrow.SignedEscrowContract}
 */
proto.escrow.SignedEscrowContract.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.escrow.SignedEscrowContract;
  return proto.escrow.SignedEscrowContract.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.escrow.SignedEscrowContract} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.escrow.SignedEscrowContract}
 */
proto.escrow.SignedEscrowContract.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.escrow.EscrowContract;
      reader.readMessage(value,proto.escrow.EscrowContract.deserializeBinaryFromReader);
      msg.setContract(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setBuyerSignature(value);
      break;
    case 3:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setSellerSignature(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.escrow.SignedEscrowContract.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.escrow.SignedEscrowContract.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.escrow.SignedEscrowContract} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.escrow.SignedEscrowContract.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getContract();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.escrow.EscrowContract.serializeBinaryToWriter
    );
  }
  f = message.getBuyerSignature_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      2,
      f
    );
  }
  f = message.getSellerSignature_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      3,
      f
    );
  }
};


/**
 * optional EscrowContract contract = 1;
 * @return {?proto.escrow.EscrowContract}
 */
proto.escrow.SignedEscrowContract.prototype.getContract = function() {
  return /** @type{?proto.escrow.EscrowContract} */ (
    jspb.Message.getWrapperField(this, proto.escrow.EscrowContract, 1));
};


/**
 * @param {?proto.escrow.EscrowContract|undefined} value
 * @return {!proto.escrow.SignedEscrowContract} returns this
*/
proto.escrow.SignedEscrowContract.prototype.setContract = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.escrow.SignedEscrowContract} returns this
 */
proto.escrow.SignedEscrowContract.prototype.clearContract = function() {
  return this.setContract(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.escrow.SignedEscrowContract.prototype.hasContract = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional bytes buyer_signature = 2;
 * @return {!(string|Uint8Array)}
 */
proto.escrow.SignedEscrowContract.prototype.getBuyerSignature = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * optional bytes buyer_signature = 2;
 * This is a type-conversion wrapper around `getBuyerSignature()`
 * @return {string}
 */
proto.escrow.SignedEscrowContract.prototype.getBuyerSignature_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getBuyerSignature()));
};


/**
 * optional bytes buyer_signature = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getBuyerSignature()`
 * @return {!Uint8Array}
 */
proto.escrow.SignedEscrowContract.prototype.getBuyerSignature_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getBuyerSignature()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.escrow.SignedEscrowContract} returns this
 */
proto.escrow.SignedEscrowContract.prototype.setBuyerSignature = function(value) {
  return jspb.Message.setProto3BytesField(this, 2, value);
};


/**
 * optional bytes seller_signature = 3;
 * @return {!(string|Uint8Array)}
 */
proto.escrow.SignedEscrowContract.prototype.getSellerSignature = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * optional bytes seller_signature = 3;
 * This is a type-conversion wrapper around `getSellerSignature()`
 * @return {string}
 */
proto.escrow.SignedEscrowContract.prototype.getSellerSignature_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getSellerSignature()));
};


/**
 * optional bytes seller_signature = 3;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getSellerSignature()`
 * @return {!Uint8Array}
 */
proto.escrow.SignedEscrowContract.prototype.getSellerSignature_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getSellerSignature()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.escrow.SignedEscrowContract} returns this
 */
proto.escrow.SignedEscrowContract.prototype.setSellerSignature = function(value) {
  return jspb.Message.setProto3BytesField(this, 3, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.escrow.EscrowContractRequest.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.escrow.EscrowContractRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.escrow.EscrowContractRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.escrow.EscrowContractRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.escrow.EscrowContractRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    contractList: jspb.Message.toObjectList(msg.getContractList(),
    proto.escrow.SignedEscrowContract.toObject, includeInstance),
    buyerChannel: (f = msg.getBuyerChannel()) && protos_ledger_ledger_pb.SignedChannelCommit.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.escrow.EscrowContractRequest}
 */
proto.escrow.EscrowContractRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.escrow.EscrowContractRequest;
  return proto.escrow.EscrowContractRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.escrow.EscrowContractRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.escrow.EscrowContractRequest}
 */
proto.escrow.EscrowContractRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.escrow.SignedEscrowContract;
      reader.readMessage(value,proto.escrow.SignedEscrowContract.deserializeBinaryFromReader);
      msg.addContract(value);
      break;
    case 2:
      var value = new protos_ledger_ledger_pb.SignedChannelCommit;
      reader.readMessage(value,protos_ledger_ledger_pb.SignedChannelCommit.deserializeBinaryFromReader);
      msg.setBuyerChannel(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.escrow.EscrowContractRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.escrow.EscrowContractRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.escrow.EscrowContractRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.escrow.EscrowContractRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getContractList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.escrow.SignedEscrowContract.serializeBinaryToWriter
    );
  }
  f = message.getBuyerChannel();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      protos_ledger_ledger_pb.SignedChannelCommit.serializeBinaryToWriter
    );
  }
};


/**
 * repeated SignedEscrowContract contract = 1;
 * @return {!Array<!proto.escrow.SignedEscrowContract>}
 */
proto.escrow.EscrowContractRequest.prototype.getContractList = function() {
  return /** @type{!Array<!proto.escrow.SignedEscrowContract>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.escrow.SignedEscrowContract, 1));
};


/**
 * @param {!Array<!proto.escrow.SignedEscrowContract>} value
 * @return {!proto.escrow.EscrowContractRequest} returns this
*/
proto.escrow.EscrowContractRequest.prototype.setContractList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.escrow.SignedEscrowContract=} opt_value
 * @param {number=} opt_index
 * @return {!proto.escrow.SignedEscrowContract}
 */
proto.escrow.EscrowContractRequest.prototype.addContract = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.escrow.SignedEscrowContract, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.escrow.EscrowContractRequest} returns this
 */
proto.escrow.EscrowContractRequest.prototype.clearContractList = function() {
  return this.setContractList([]);
};


/**
 * optional ledger.SignedChannelCommit buyer_channel = 2;
 * @return {?proto.ledger.SignedChannelCommit}
 */
proto.escrow.EscrowContractRequest.prototype.getBuyerChannel = function() {
  return /** @type{?proto.ledger.SignedChannelCommit} */ (
    jspb.Message.getWrapperField(this, protos_ledger_ledger_pb.SignedChannelCommit, 2));
};


/**
 * @param {?proto.ledger.SignedChannelCommit|undefined} value
 * @return {!proto.escrow.EscrowContractRequest} returns this
*/
proto.escrow.EscrowContractRequest.prototype.setBuyerChannel = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.escrow.EscrowContractRequest} returns this
 */
proto.escrow.EscrowContractRequest.prototype.clearBuyerChannel = function() {
  return this.setBuyerChannel(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.escrow.EscrowContractRequest.prototype.hasBuyerChannel = function() {
  return jspb.Message.getField(this, 2) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.escrow.Escrow.prototype.toObject = function(opt_includeInstance) {
  return proto.escrow.Escrow.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.escrow.Escrow} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.escrow.Escrow.toObject = function(includeInstance, msg) {
  var f, obj = {
    contractId: jspb.Message.getFieldWithDefault(msg, 1, ""),
    escrowId: jspb.Message.getFieldWithDefault(msg, 2, 0),
    fromAddress: msg.getFromAddress_asB64(),
    toAddress: msg.getToAddress_asB64(),
    amount: jspb.Message.getFieldWithDefault(msg, 5, 0),
    collateralAmount: jspb.Message.getFieldWithDefault(msg, 6, 0),
    errorCode: jspb.Message.getFieldWithDefault(msg, 7, 0),
    errorMessage: jspb.Message.getFieldWithDefault(msg, 8, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.escrow.Escrow}
 */
proto.escrow.Escrow.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.escrow.Escrow;
  return proto.escrow.Escrow.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.escrow.Escrow} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.escrow.Escrow}
 */
proto.escrow.Escrow.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setContractId(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setEscrowId(value);
      break;
    case 3:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setFromAddress(value);
      break;
    case 4:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setToAddress(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setAmount(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setCollateralAmount(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setErrorCode(value);
      break;
    case 8:
      var value = /** @type {string} */ (reader.readString());
      msg.setErrorMessage(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.escrow.Escrow.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.escrow.Escrow.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.escrow.Escrow} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.escrow.Escrow.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getContractId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getEscrowId();
  if (f !== 0) {
    writer.writeInt64(
      2,
      f
    );
  }
  f = message.getFromAddress_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      3,
      f
    );
  }
  f = message.getToAddress_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      4,
      f
    );
  }
  f = message.getAmount();
  if (f !== 0) {
    writer.writeInt64(
      5,
      f
    );
  }
  f = message.getCollateralAmount();
  if (f !== 0) {
    writer.writeInt64(
      6,
      f
    );
  }
  f = message.getErrorCode();
  if (f !== 0) {
    writer.writeInt32(
      7,
      f
    );
  }
  f = message.getErrorMessage();
  if (f.length > 0) {
    writer.writeString(
      8,
      f
    );
  }
};


/**
 * optional string contract_id = 1;
 * @return {string}
 */
proto.escrow.Escrow.prototype.getContractId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.escrow.Escrow} returns this
 */
proto.escrow.Escrow.prototype.setContractId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional int64 escrow_id = 2;
 * @return {number}
 */
proto.escrow.Escrow.prototype.getEscrowId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.escrow.Escrow} returns this
 */
proto.escrow.Escrow.prototype.setEscrowId = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional bytes from_address = 3;
 * @return {!(string|Uint8Array)}
 */
proto.escrow.Escrow.prototype.getFromAddress = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * optional bytes from_address = 3;
 * This is a type-conversion wrapper around `getFromAddress()`
 * @return {string}
 */
proto.escrow.Escrow.prototype.getFromAddress_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getFromAddress()));
};


/**
 * optional bytes from_address = 3;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getFromAddress()`
 * @return {!Uint8Array}
 */
proto.escrow.Escrow.prototype.getFromAddress_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getFromAddress()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.escrow.Escrow} returns this
 */
proto.escrow.Escrow.prototype.setFromAddress = function(value) {
  return jspb.Message.setProto3BytesField(this, 3, value);
};


/**
 * optional bytes to_address = 4;
 * @return {!(string|Uint8Array)}
 */
proto.escrow.Escrow.prototype.getToAddress = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * optional bytes to_address = 4;
 * This is a type-conversion wrapper around `getToAddress()`
 * @return {string}
 */
proto.escrow.Escrow.prototype.getToAddress_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getToAddress()));
};


/**
 * optional bytes to_address = 4;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getToAddress()`
 * @return {!Uint8Array}
 */
proto.escrow.Escrow.prototype.getToAddress_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getToAddress()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.escrow.Escrow} returns this
 */
proto.escrow.Escrow.prototype.setToAddress = function(value) {
  return jspb.Message.setProto3BytesField(this, 4, value);
};


/**
 * optional int64 amount = 5;
 * @return {number}
 */
proto.escrow.Escrow.prototype.getAmount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {number} value
 * @return {!proto.escrow.Escrow} returns this
 */
proto.escrow.Escrow.prototype.setAmount = function(value) {
  return jspb.Message.setProto3IntField(this, 5, value);
};


/**
 * optional int64 collateral_amount = 6;
 * @return {number}
 */
proto.escrow.Escrow.prototype.getCollateralAmount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/**
 * @param {number} value
 * @return {!proto.escrow.Escrow} returns this
 */
proto.escrow.Escrow.prototype.setCollateralAmount = function(value) {
  return jspb.Message.setProto3IntField(this, 6, value);
};


/**
 * optional int32 error_code = 7;
 * @return {number}
 */
proto.escrow.Escrow.prototype.getErrorCode = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 7, 0));
};


/**
 * @param {number} value
 * @return {!proto.escrow.Escrow} returns this
 */
proto.escrow.Escrow.prototype.setErrorCode = function(value) {
  return jspb.Message.setProto3IntField(this, 7, value);
};


/**
 * optional string error_message = 8;
 * @return {string}
 */
proto.escrow.Escrow.prototype.getErrorMessage = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 8, ""));
};


/**
 * @param {string} value
 * @return {!proto.escrow.Escrow} returns this
 */
proto.escrow.Escrow.prototype.setErrorMessage = function(value) {
  return jspb.Message.setProto3StringField(this, 8, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.escrow.SubmitContractResult.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.escrow.SubmitContractResult.prototype.toObject = function(opt_includeInstance) {
  return proto.escrow.SubmitContractResult.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.escrow.SubmitContractResult} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.escrow.SubmitContractResult.toObject = function(includeInstance, msg) {
  var f, obj = {
    payinId: jspb.Message.getFieldWithDefault(msg, 1, ""),
    escrowList: jspb.Message.toObjectList(msg.getEscrowList(),
    proto.escrow.Escrow.toObject, includeInstance),
    escrowAddress: msg.getEscrowAddress_asB64(),
    escrowSignedTime: (f = msg.getEscrowSignedTime()) && google_protobuf_timestamp_pb.Timestamp.toObject(includeInstance, f),
    buyerChannelState: (f = msg.getBuyerChannelState()) && protos_ledger_ledger_pb.SignedChannelState.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.escrow.SubmitContractResult}
 */
proto.escrow.SubmitContractResult.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.escrow.SubmitContractResult;
  return proto.escrow.SubmitContractResult.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.escrow.SubmitContractResult} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.escrow.SubmitContractResult}
 */
proto.escrow.SubmitContractResult.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setPayinId(value);
      break;
    case 2:
      var value = new proto.escrow.Escrow;
      reader.readMessage(value,proto.escrow.Escrow.deserializeBinaryFromReader);
      msg.addEscrow(value);
      break;
    case 3:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setEscrowAddress(value);
      break;
    case 4:
      var value = new google_protobuf_timestamp_pb.Timestamp;
      reader.readMessage(value,google_protobuf_timestamp_pb.Timestamp.deserializeBinaryFromReader);
      msg.setEscrowSignedTime(value);
      break;
    case 5:
      var value = new protos_ledger_ledger_pb.SignedChannelState;
      reader.readMessage(value,protos_ledger_ledger_pb.SignedChannelState.deserializeBinaryFromReader);
      msg.setBuyerChannelState(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.escrow.SubmitContractResult.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.escrow.SubmitContractResult.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.escrow.SubmitContractResult} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.escrow.SubmitContractResult.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPayinId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getEscrowList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.escrow.Escrow.serializeBinaryToWriter
    );
  }
  f = message.getEscrowAddress_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      3,
      f
    );
  }
  f = message.getEscrowSignedTime();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      google_protobuf_timestamp_pb.Timestamp.serializeBinaryToWriter
    );
  }
  f = message.getBuyerChannelState();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      protos_ledger_ledger_pb.SignedChannelState.serializeBinaryToWriter
    );
  }
};


/**
 * optional string payin_id = 1;
 * @return {string}
 */
proto.escrow.SubmitContractResult.prototype.getPayinId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.escrow.SubmitContractResult} returns this
 */
proto.escrow.SubmitContractResult.prototype.setPayinId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * repeated Escrow escrow = 2;
 * @return {!Array<!proto.escrow.Escrow>}
 */
proto.escrow.SubmitContractResult.prototype.getEscrowList = function() {
  return /** @type{!Array<!proto.escrow.Escrow>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.escrow.Escrow, 2));
};


/**
 * @param {!Array<!proto.escrow.Escrow>} value
 * @return {!proto.escrow.SubmitContractResult} returns this
*/
proto.escrow.SubmitContractResult.prototype.setEscrowList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.escrow.Escrow=} opt_value
 * @param {number=} opt_index
 * @return {!proto.escrow.Escrow}
 */
proto.escrow.SubmitContractResult.prototype.addEscrow = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.escrow.Escrow, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.escrow.SubmitContractResult} returns this
 */
proto.escrow.SubmitContractResult.prototype.clearEscrowList = function() {
  return this.setEscrowList([]);
};


/**
 * optional bytes escrow_address = 3;
 * @return {!(string|Uint8Array)}
 */
proto.escrow.SubmitContractResult.prototype.getEscrowAddress = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * optional bytes escrow_address = 3;
 * This is a type-conversion wrapper around `getEscrowAddress()`
 * @return {string}
 */
proto.escrow.SubmitContractResult.prototype.getEscrowAddress_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getEscrowAddress()));
};


/**
 * optional bytes escrow_address = 3;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getEscrowAddress()`
 * @return {!Uint8Array}
 */
proto.escrow.SubmitContractResult.prototype.getEscrowAddress_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getEscrowAddress()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.escrow.SubmitContractResult} returns this
 */
proto.escrow.SubmitContractResult.prototype.setEscrowAddress = function(value) {
  return jspb.Message.setProto3BytesField(this, 3, value);
};


/**
 * optional google.protobuf.Timestamp escrow_signed_time = 4;
 * @return {?proto.google.protobuf.Timestamp}
 */
proto.escrow.SubmitContractResult.prototype.getEscrowSignedTime = function() {
  return /** @type{?proto.google.protobuf.Timestamp} */ (
    jspb.Message.getWrapperField(this, google_protobuf_timestamp_pb.Timestamp, 4));
};


/**
 * @param {?proto.google.protobuf.Timestamp|undefined} value
 * @return {!proto.escrow.SubmitContractResult} returns this
*/
proto.escrow.SubmitContractResult.prototype.setEscrowSignedTime = function(value) {
  return jspb.Message.setWrapperField(this, 4, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.escrow.SubmitContractResult} returns this
 */
proto.escrow.SubmitContractResult.prototype.clearEscrowSignedTime = function() {
  return this.setEscrowSignedTime(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.escrow.SubmitContractResult.prototype.hasEscrowSignedTime = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional ledger.SignedChannelState buyer_channel_state = 5;
 * @return {?proto.ledger.SignedChannelState}
 */
proto.escrow.SubmitContractResult.prototype.getBuyerChannelState = function() {
  return /** @type{?proto.ledger.SignedChannelState} */ (
    jspb.Message.getWrapperField(this, protos_ledger_ledger_pb.SignedChannelState, 5));
};


/**
 * @param {?proto.ledger.SignedChannelState|undefined} value
 * @return {!proto.escrow.SubmitContractResult} returns this
*/
proto.escrow.SubmitContractResult.prototype.setBuyerChannelState = function(value) {
  return jspb.Message.setWrapperField(this, 5, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.escrow.SubmitContractResult} returns this
 */
proto.escrow.SubmitContractResult.prototype.clearBuyerChannelState = function() {
  return this.setBuyerChannelState(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.escrow.SubmitContractResult.prototype.hasBuyerChannelState = function() {
  return jspb.Message.getField(this, 5) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.escrow.SignedSubmitContractResult.prototype.toObject = function(opt_includeInstance) {
  return proto.escrow.SignedSubmitContractResult.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.escrow.SignedSubmitContractResult} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.escrow.SignedSubmitContractResult.toObject = function(includeInstance, msg) {
  var f, obj = {
    result: (f = msg.getResult()) && proto.escrow.SubmitContractResult.toObject(includeInstance, f),
    escrowSignature: msg.getEscrowSignature_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.escrow.SignedSubmitContractResult}
 */
proto.escrow.SignedSubmitContractResult.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.escrow.SignedSubmitContractResult;
  return proto.escrow.SignedSubmitContractResult.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.escrow.SignedSubmitContractResult} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.escrow.SignedSubmitContractResult}
 */
proto.escrow.SignedSubmitContractResult.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.escrow.SubmitContractResult;
      reader.readMessage(value,proto.escrow.SubmitContractResult.deserializeBinaryFromReader);
      msg.setResult(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setEscrowSignature(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.escrow.SignedSubmitContractResult.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.escrow.SignedSubmitContractResult.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.escrow.SignedSubmitContractResult} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.escrow.SignedSubmitContractResult.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getResult();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.escrow.SubmitContractResult.serializeBinaryToWriter
    );
  }
  f = message.getEscrowSignature_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      2,
      f
    );
  }
};


/**
 * optional SubmitContractResult result = 1;
 * @return {?proto.escrow.SubmitContractResult}
 */
proto.escrow.SignedSubmitContractResult.prototype.getResult = function() {
  return /** @type{?proto.escrow.SubmitContractResult} */ (
    jspb.Message.getWrapperField(this, proto.escrow.SubmitContractResult, 1));
};


/**
 * @param {?proto.escrow.SubmitContractResult|undefined} value
 * @return {!proto.escrow.SignedSubmitContractResult} returns this
*/
proto.escrow.SignedSubmitContractResult.prototype.setResult = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.escrow.SignedSubmitContractResult} returns this
 */
proto.escrow.SignedSubmitContractResult.prototype.clearResult = function() {
  return this.setResult(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.escrow.SignedSubmitContractResult.prototype.hasResult = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional bytes escrow_signature = 2;
 * @return {!(string|Uint8Array)}
 */
proto.escrow.SignedSubmitContractResult.prototype.getEscrowSignature = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * optional bytes escrow_signature = 2;
 * This is a type-conversion wrapper around `getEscrowSignature()`
 * @return {string}
 */
proto.escrow.SignedSubmitContractResult.prototype.getEscrowSignature_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getEscrowSignature()));
};


/**
 * optional bytes escrow_signature = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getEscrowSignature()`
 * @return {!Uint8Array}
 */
proto.escrow.SignedSubmitContractResult.prototype.getEscrowSignature_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getEscrowSignature()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.escrow.SignedSubmitContractResult} returns this
 */
proto.escrow.SignedSubmitContractResult.prototype.setEscrowSignature = function(value) {
  return jspb.Message.setProto3BytesField(this, 2, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.escrow.StartEscrowResult.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.escrow.StartEscrowResult.prototype.toObject = function(opt_includeInstance) {
  return proto.escrow.StartEscrowResult.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.escrow.StartEscrowResult} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.escrow.StartEscrowResult.toObject = function(includeInstance, msg) {
  var f, obj = {
    escrowList: jspb.Message.toObjectList(msg.getEscrowList(),
    proto.escrow.Escrow.toObject, includeInstance),
    escrowAddress: msg.getEscrowAddress_asB64(),
    escrowSignedTime: (f = msg.getEscrowSignedTime()) && google_protobuf_timestamp_pb.Timestamp.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.escrow.StartEscrowResult}
 */
proto.escrow.StartEscrowResult.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.escrow.StartEscrowResult;
  return proto.escrow.StartEscrowResult.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.escrow.StartEscrowResult} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.escrow.StartEscrowResult}
 */
proto.escrow.StartEscrowResult.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.escrow.Escrow;
      reader.readMessage(value,proto.escrow.Escrow.deserializeBinaryFromReader);
      msg.addEscrow(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setEscrowAddress(value);
      break;
    case 3:
      var value = new google_protobuf_timestamp_pb.Timestamp;
      reader.readMessage(value,google_protobuf_timestamp_pb.Timestamp.deserializeBinaryFromReader);
      msg.setEscrowSignedTime(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.escrow.StartEscrowResult.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.escrow.StartEscrowResult.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.escrow.StartEscrowResult} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.escrow.StartEscrowResult.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getEscrowList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.escrow.Escrow.serializeBinaryToWriter
    );
  }
  f = message.getEscrowAddress_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      2,
      f
    );
  }
  f = message.getEscrowSignedTime();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      google_protobuf_timestamp_pb.Timestamp.serializeBinaryToWriter
    );
  }
};


/**
 * repeated Escrow escrow = 1;
 * @return {!Array<!proto.escrow.Escrow>}
 */
proto.escrow.StartEscrowResult.prototype.getEscrowList = function() {
  return /** @type{!Array<!proto.escrow.Escrow>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.escrow.Escrow, 1));
};


/**
 * @param {!Array<!proto.escrow.Escrow>} value
 * @return {!proto.escrow.StartEscrowResult} returns this
*/
proto.escrow.StartEscrowResult.prototype.setEscrowList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.escrow.Escrow=} opt_value
 * @param {number=} opt_index
 * @return {!proto.escrow.Escrow}
 */
proto.escrow.StartEscrowResult.prototype.addEscrow = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.escrow.Escrow, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.escrow.StartEscrowResult} returns this
 */
proto.escrow.StartEscrowResult.prototype.clearEscrowList = function() {
  return this.setEscrowList([]);
};


/**
 * optional bytes escrow_address = 2;
 * @return {!(string|Uint8Array)}
 */
proto.escrow.StartEscrowResult.prototype.getEscrowAddress = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * optional bytes escrow_address = 2;
 * This is a type-conversion wrapper around `getEscrowAddress()`
 * @return {string}
 */
proto.escrow.StartEscrowResult.prototype.getEscrowAddress_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getEscrowAddress()));
};


/**
 * optional bytes escrow_address = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getEscrowAddress()`
 * @return {!Uint8Array}
 */
proto.escrow.StartEscrowResult.prototype.getEscrowAddress_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getEscrowAddress()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.escrow.StartEscrowResult} returns this
 */
proto.escrow.StartEscrowResult.prototype.setEscrowAddress = function(value) {
  return jspb.Message.setProto3BytesField(this, 2, value);
};


/**
 * optional google.protobuf.Timestamp escrow_signed_time = 3;
 * @return {?proto.google.protobuf.Timestamp}
 */
proto.escrow.StartEscrowResult.prototype.getEscrowSignedTime = function() {
  return /** @type{?proto.google.protobuf.Timestamp} */ (
    jspb.Message.getWrapperField(this, google_protobuf_timestamp_pb.Timestamp, 3));
};


/**
 * @param {?proto.google.protobuf.Timestamp|undefined} value
 * @return {!proto.escrow.StartEscrowResult} returns this
*/
proto.escrow.StartEscrowResult.prototype.setEscrowSignedTime = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.escrow.StartEscrowResult} returns this
 */
proto.escrow.StartEscrowResult.prototype.clearEscrowSignedTime = function() {
  return this.setEscrowSignedTime(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.escrow.StartEscrowResult.prototype.hasEscrowSignedTime = function() {
  return jspb.Message.getField(this, 3) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.escrow.SignedStartEscrowResult.prototype.toObject = function(opt_includeInstance) {
  return proto.escrow.SignedStartEscrowResult.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.escrow.SignedStartEscrowResult} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.escrow.SignedStartEscrowResult.toObject = function(includeInstance, msg) {
  var f, obj = {
    result: (f = msg.getResult()) && proto.escrow.StartEscrowResult.toObject(includeInstance, f),
    escrowSignature: msg.getEscrowSignature_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.escrow.SignedStartEscrowResult}
 */
proto.escrow.SignedStartEscrowResult.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.escrow.SignedStartEscrowResult;
  return proto.escrow.SignedStartEscrowResult.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.escrow.SignedStartEscrowResult} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.escrow.SignedStartEscrowResult}
 */
proto.escrow.SignedStartEscrowResult.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.escrow.StartEscrowResult;
      reader.readMessage(value,proto.escrow.StartEscrowResult.deserializeBinaryFromReader);
      msg.setResult(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setEscrowSignature(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.escrow.SignedStartEscrowResult.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.escrow.SignedStartEscrowResult.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.escrow.SignedStartEscrowResult} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.escrow.SignedStartEscrowResult.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getResult();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.escrow.StartEscrowResult.serializeBinaryToWriter
    );
  }
  f = message.getEscrowSignature_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      2,
      f
    );
  }
};


/**
 * optional StartEscrowResult result = 1;
 * @return {?proto.escrow.StartEscrowResult}
 */
proto.escrow.SignedStartEscrowResult.prototype.getResult = function() {
  return /** @type{?proto.escrow.StartEscrowResult} */ (
    jspb.Message.getWrapperField(this, proto.escrow.StartEscrowResult, 1));
};


/**
 * @param {?proto.escrow.StartEscrowResult|undefined} value
 * @return {!proto.escrow.SignedStartEscrowResult} returns this
*/
proto.escrow.SignedStartEscrowResult.prototype.setResult = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.escrow.SignedStartEscrowResult} returns this
 */
proto.escrow.SignedStartEscrowResult.prototype.clearResult = function() {
  return this.setResult(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.escrow.SignedStartEscrowResult.prototype.hasResult = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional bytes escrow_signature = 2;
 * @return {!(string|Uint8Array)}
 */
proto.escrow.SignedStartEscrowResult.prototype.getEscrowSignature = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * optional bytes escrow_signature = 2;
 * This is a type-conversion wrapper around `getEscrowSignature()`
 * @return {string}
 */
proto.escrow.SignedStartEscrowResult.prototype.getEscrowSignature_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getEscrowSignature()));
};


/**
 * optional bytes escrow_signature = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getEscrowSignature()`
 * @return {!Uint8Array}
 */
proto.escrow.SignedStartEscrowResult.prototype.getEscrowSignature_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getEscrowSignature()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.escrow.SignedStartEscrowResult} returns this
 */
proto.escrow.SignedStartEscrowResult.prototype.setEscrowSignature = function(value) {
  return jspb.Message.setProto3BytesField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.escrow.PayinRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.escrow.PayinRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.escrow.PayinRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.escrow.PayinRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    payinId: jspb.Message.getFieldWithDefault(msg, 1, ""),
    buyerAddress: msg.getBuyerAddress_asB64(),
    buyerChannelState: (f = msg.getBuyerChannelState()) && protos_ledger_ledger_pb.SignedChannelState.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.escrow.PayinRequest}
 */
proto.escrow.PayinRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.escrow.PayinRequest;
  return proto.escrow.PayinRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.escrow.PayinRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.escrow.PayinRequest}
 */
proto.escrow.PayinRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setPayinId(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setBuyerAddress(value);
      break;
    case 3:
      var value = new protos_ledger_ledger_pb.SignedChannelState;
      reader.readMessage(value,protos_ledger_ledger_pb.SignedChannelState.deserializeBinaryFromReader);
      msg.setBuyerChannelState(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.escrow.PayinRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.escrow.PayinRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.escrow.PayinRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.escrow.PayinRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPayinId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getBuyerAddress_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      2,
      f
    );
  }
  f = message.getBuyerChannelState();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      protos_ledger_ledger_pb.SignedChannelState.serializeBinaryToWriter
    );
  }
};


/**
 * optional string payin_id = 1;
 * @return {string}
 */
proto.escrow.PayinRequest.prototype.getPayinId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.escrow.PayinRequest} returns this
 */
proto.escrow.PayinRequest.prototype.setPayinId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional bytes buyer_address = 2;
 * @return {!(string|Uint8Array)}
 */
proto.escrow.PayinRequest.prototype.getBuyerAddress = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * optional bytes buyer_address = 2;
 * This is a type-conversion wrapper around `getBuyerAddress()`
 * @return {string}
 */
proto.escrow.PayinRequest.prototype.getBuyerAddress_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getBuyerAddress()));
};


/**
 * optional bytes buyer_address = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getBuyerAddress()`
 * @return {!Uint8Array}
 */
proto.escrow.PayinRequest.prototype.getBuyerAddress_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getBuyerAddress()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.escrow.PayinRequest} returns this
 */
proto.escrow.PayinRequest.prototype.setBuyerAddress = function(value) {
  return jspb.Message.setProto3BytesField(this, 2, value);
};


/**
 * optional ledger.SignedChannelState buyer_channel_state = 3;
 * @return {?proto.ledger.SignedChannelState}
 */
proto.escrow.PayinRequest.prototype.getBuyerChannelState = function() {
  return /** @type{?proto.ledger.SignedChannelState} */ (
    jspb.Message.getWrapperField(this, protos_ledger_ledger_pb.SignedChannelState, 3));
};


/**
 * @param {?proto.ledger.SignedChannelState|undefined} value
 * @return {!proto.escrow.PayinRequest} returns this
*/
proto.escrow.PayinRequest.prototype.setBuyerChannelState = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.escrow.PayinRequest} returns this
 */
proto.escrow.PayinRequest.prototype.clearBuyerChannelState = function() {
  return this.setBuyerChannelState(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.escrow.PayinRequest.prototype.hasBuyerChannelState = function() {
  return jspb.Message.getField(this, 3) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.escrow.SignedPayinRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.escrow.SignedPayinRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.escrow.SignedPayinRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.escrow.SignedPayinRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    request: (f = msg.getRequest()) && proto.escrow.PayinRequest.toObject(includeInstance, f),
    buyerSignature: msg.getBuyerSignature_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.escrow.SignedPayinRequest}
 */
proto.escrow.SignedPayinRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.escrow.SignedPayinRequest;
  return proto.escrow.SignedPayinRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.escrow.SignedPayinRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.escrow.SignedPayinRequest}
 */
proto.escrow.SignedPayinRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.escrow.PayinRequest;
      reader.readMessage(value,proto.escrow.PayinRequest.deserializeBinaryFromReader);
      msg.setRequest(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setBuyerSignature(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.escrow.SignedPayinRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.escrow.SignedPayinRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.escrow.SignedPayinRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.escrow.SignedPayinRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRequest();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.escrow.PayinRequest.serializeBinaryToWriter
    );
  }
  f = message.getBuyerSignature_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      2,
      f
    );
  }
};


/**
 * optional PayinRequest request = 1;
 * @return {?proto.escrow.PayinRequest}
 */
proto.escrow.SignedPayinRequest.prototype.getRequest = function() {
  return /** @type{?proto.escrow.PayinRequest} */ (
    jspb.Message.getWrapperField(this, proto.escrow.PayinRequest, 1));
};


/**
 * @param {?proto.escrow.PayinRequest|undefined} value
 * @return {!proto.escrow.SignedPayinRequest} returns this
*/
proto.escrow.SignedPayinRequest.prototype.setRequest = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.escrow.SignedPayinRequest} returns this
 */
proto.escrow.SignedPayinRequest.prototype.clearRequest = function() {
  return this.setRequest(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.escrow.SignedPayinRequest.prototype.hasRequest = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional bytes buyer_signature = 2;
 * @return {!(string|Uint8Array)}
 */
proto.escrow.SignedPayinRequest.prototype.getBuyerSignature = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * optional bytes buyer_signature = 2;
 * This is a type-conversion wrapper around `getBuyerSignature()`
 * @return {string}
 */
proto.escrow.SignedPayinRequest.prototype.getBuyerSignature_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getBuyerSignature()));
};


/**
 * optional bytes buyer_signature = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getBuyerSignature()`
 * @return {!Uint8Array}
 */
proto.escrow.SignedPayinRequest.prototype.getBuyerSignature_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getBuyerSignature()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.escrow.SignedPayinRequest} returns this
 */
proto.escrow.SignedPayinRequest.prototype.setBuyerSignature = function(value) {
  return jspb.Message.setProto3BytesField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.escrow.PayinResult.prototype.toObject = function(opt_includeInstance) {
  return proto.escrow.PayinResult.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.escrow.PayinResult} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.escrow.PayinResult.toObject = function(includeInstance, msg) {
  var f, obj = {
    payinId: jspb.Message.getFieldWithDefault(msg, 1, ""),
    amount: jspb.Message.getFieldWithDefault(msg, 2, 0),
    channelId: jspb.Message.getFieldWithDefault(msg, 3, 0),
    escrowAddress: msg.getEscrowAddress_asB64(),
    escrowSignedTime: (f = msg.getEscrowSignedTime()) && google_protobuf_timestamp_pb.Timestamp.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.escrow.PayinResult}
 */
proto.escrow.PayinResult.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.escrow.PayinResult;
  return proto.escrow.PayinResult.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.escrow.PayinResult} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.escrow.PayinResult}
 */
proto.escrow.PayinResult.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setPayinId(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setAmount(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setChannelId(value);
      break;
    case 4:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setEscrowAddress(value);
      break;
    case 5:
      var value = new google_protobuf_timestamp_pb.Timestamp;
      reader.readMessage(value,google_protobuf_timestamp_pb.Timestamp.deserializeBinaryFromReader);
      msg.setEscrowSignedTime(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.escrow.PayinResult.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.escrow.PayinResult.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.escrow.PayinResult} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.escrow.PayinResult.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPayinId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getAmount();
  if (f !== 0) {
    writer.writeInt64(
      2,
      f
    );
  }
  f = message.getChannelId();
  if (f !== 0) {
    writer.writeInt64(
      3,
      f
    );
  }
  f = message.getEscrowAddress_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      4,
      f
    );
  }
  f = message.getEscrowSignedTime();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      google_protobuf_timestamp_pb.Timestamp.serializeBinaryToWriter
    );
  }
};


/**
 * optional string payin_id = 1;
 * @return {string}
 */
proto.escrow.PayinResult.prototype.getPayinId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.escrow.PayinResult} returns this
 */
proto.escrow.PayinResult.prototype.setPayinId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional int64 amount = 2;
 * @return {number}
 */
proto.escrow.PayinResult.prototype.getAmount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.escrow.PayinResult} returns this
 */
proto.escrow.PayinResult.prototype.setAmount = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional int64 channel_id = 3;
 * @return {number}
 */
proto.escrow.PayinResult.prototype.getChannelId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.escrow.PayinResult} returns this
 */
proto.escrow.PayinResult.prototype.setChannelId = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional bytes escrow_address = 4;
 * @return {!(string|Uint8Array)}
 */
proto.escrow.PayinResult.prototype.getEscrowAddress = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * optional bytes escrow_address = 4;
 * This is a type-conversion wrapper around `getEscrowAddress()`
 * @return {string}
 */
proto.escrow.PayinResult.prototype.getEscrowAddress_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getEscrowAddress()));
};


/**
 * optional bytes escrow_address = 4;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getEscrowAddress()`
 * @return {!Uint8Array}
 */
proto.escrow.PayinResult.prototype.getEscrowAddress_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getEscrowAddress()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.escrow.PayinResult} returns this
 */
proto.escrow.PayinResult.prototype.setEscrowAddress = function(value) {
  return jspb.Message.setProto3BytesField(this, 4, value);
};


/**
 * optional google.protobuf.Timestamp escrow_signed_time = 5;
 * @return {?proto.google.protobuf.Timestamp}
 */
proto.escrow.PayinResult.prototype.getEscrowSignedTime = function() {
  return /** @type{?proto.google.protobuf.Timestamp} */ (
    jspb.Message.getWrapperField(this, google_protobuf_timestamp_pb.Timestamp, 5));
};


/**
 * @param {?proto.google.protobuf.Timestamp|undefined} value
 * @return {!proto.escrow.PayinResult} returns this
*/
proto.escrow.PayinResult.prototype.setEscrowSignedTime = function(value) {
  return jspb.Message.setWrapperField(this, 5, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.escrow.PayinResult} returns this
 */
proto.escrow.PayinResult.prototype.clearEscrowSignedTime = function() {
  return this.setEscrowSignedTime(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.escrow.PayinResult.prototype.hasEscrowSignedTime = function() {
  return jspb.Message.getField(this, 5) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.escrow.SignedPayinResult.prototype.toObject = function(opt_includeInstance) {
  return proto.escrow.SignedPayinResult.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.escrow.SignedPayinResult} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.escrow.SignedPayinResult.toObject = function(includeInstance, msg) {
  var f, obj = {
    result: (f = msg.getResult()) && proto.escrow.PayinResult.toObject(includeInstance, f),
    escrowSignature: msg.getEscrowSignature_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.escrow.SignedPayinResult}
 */
proto.escrow.SignedPayinResult.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.escrow.SignedPayinResult;
  return proto.escrow.SignedPayinResult.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.escrow.SignedPayinResult} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.escrow.SignedPayinResult}
 */
proto.escrow.SignedPayinResult.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.escrow.PayinResult;
      reader.readMessage(value,proto.escrow.PayinResult.deserializeBinaryFromReader);
      msg.setResult(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setEscrowSignature(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.escrow.SignedPayinResult.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.escrow.SignedPayinResult.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.escrow.SignedPayinResult} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.escrow.SignedPayinResult.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getResult();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.escrow.PayinResult.serializeBinaryToWriter
    );
  }
  f = message.getEscrowSignature_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      2,
      f
    );
  }
};


/**
 * optional PayinResult result = 1;
 * @return {?proto.escrow.PayinResult}
 */
proto.escrow.SignedPayinResult.prototype.getResult = function() {
  return /** @type{?proto.escrow.PayinResult} */ (
    jspb.Message.getWrapperField(this, proto.escrow.PayinResult, 1));
};


/**
 * @param {?proto.escrow.PayinResult|undefined} value
 * @return {!proto.escrow.SignedPayinResult} returns this
*/
proto.escrow.SignedPayinResult.prototype.setResult = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.escrow.SignedPayinResult} returns this
 */
proto.escrow.SignedPayinResult.prototype.clearResult = function() {
  return this.setResult(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.escrow.SignedPayinResult.prototype.hasResult = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional bytes escrow_signature = 2;
 * @return {!(string|Uint8Array)}
 */
proto.escrow.SignedPayinResult.prototype.getEscrowSignature = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * optional bytes escrow_signature = 2;
 * This is a type-conversion wrapper around `getEscrowSignature()`
 * @return {string}
 */
proto.escrow.SignedPayinResult.prototype.getEscrowSignature_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getEscrowSignature()));
};


/**
 * optional bytes escrow_signature = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getEscrowSignature()`
 * @return {!Uint8Array}
 */
proto.escrow.SignedPayinResult.prototype.getEscrowSignature_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getEscrowSignature()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.escrow.SignedPayinResult} returns this
 */
proto.escrow.SignedPayinResult.prototype.setEscrowSignature = function(value) {
  return jspb.Message.setProto3BytesField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.escrow.PayinStatus.prototype.toObject = function(opt_includeInstance) {
  return proto.escrow.PayinStatus.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.escrow.PayinStatus} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.escrow.PayinStatus.toObject = function(includeInstance, msg) {
  var f, obj = {
    paid: jspb.Message.getBooleanFieldWithDefault(msg, 1, false),
    channelId: jspb.Message.getFieldWithDefault(msg, 2, 0),
    escrowAddress: msg.getEscrowAddress_asB64(),
    escrowSignedTime: (f = msg.getEscrowSignedTime()) && google_protobuf_timestamp_pb.Timestamp.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.escrow.PayinStatus}
 */
proto.escrow.PayinStatus.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.escrow.PayinStatus;
  return proto.escrow.PayinStatus.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.escrow.PayinStatus} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.escrow.PayinStatus}
 */
proto.escrow.PayinStatus.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setPaid(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setChannelId(value);
      break;
    case 3:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setEscrowAddress(value);
      break;
    case 4:
      var value = new google_protobuf_timestamp_pb.Timestamp;
      reader.readMessage(value,google_protobuf_timestamp_pb.Timestamp.deserializeBinaryFromReader);
      msg.setEscrowSignedTime(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.escrow.PayinStatus.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.escrow.PayinStatus.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.escrow.PayinStatus} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.escrow.PayinStatus.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPaid();
  if (f) {
    writer.writeBool(
      1,
      f
    );
  }
  f = message.getChannelId();
  if (f !== 0) {
    writer.writeInt64(
      2,
      f
    );
  }
  f = message.getEscrowAddress_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      3,
      f
    );
  }
  f = message.getEscrowSignedTime();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      google_protobuf_timestamp_pb.Timestamp.serializeBinaryToWriter
    );
  }
};


/**
 * optional bool paid = 1;
 * @return {boolean}
 */
proto.escrow.PayinStatus.prototype.getPaid = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 1, false));
};


/**
 * @param {boolean} value
 * @return {!proto.escrow.PayinStatus} returns this
 */
proto.escrow.PayinStatus.prototype.setPaid = function(value) {
  return jspb.Message.setProto3BooleanField(this, 1, value);
};


/**
 * optional int64 channel_id = 2;
 * @return {number}
 */
proto.escrow.PayinStatus.prototype.getChannelId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.escrow.PayinStatus} returns this
 */
proto.escrow.PayinStatus.prototype.setChannelId = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional bytes escrow_address = 3;
 * @return {!(string|Uint8Array)}
 */
proto.escrow.PayinStatus.prototype.getEscrowAddress = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * optional bytes escrow_address = 3;
 * This is a type-conversion wrapper around `getEscrowAddress()`
 * @return {string}
 */
proto.escrow.PayinStatus.prototype.getEscrowAddress_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getEscrowAddress()));
};


/**
 * optional bytes escrow_address = 3;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getEscrowAddress()`
 * @return {!Uint8Array}
 */
proto.escrow.PayinStatus.prototype.getEscrowAddress_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getEscrowAddress()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.escrow.PayinStatus} returns this
 */
proto.escrow.PayinStatus.prototype.setEscrowAddress = function(value) {
  return jspb.Message.setProto3BytesField(this, 3, value);
};


/**
 * optional google.protobuf.Timestamp escrow_signed_time = 4;
 * @return {?proto.google.protobuf.Timestamp}
 */
proto.escrow.PayinStatus.prototype.getEscrowSignedTime = function() {
  return /** @type{?proto.google.protobuf.Timestamp} */ (
    jspb.Message.getWrapperField(this, google_protobuf_timestamp_pb.Timestamp, 4));
};


/**
 * @param {?proto.google.protobuf.Timestamp|undefined} value
 * @return {!proto.escrow.PayinStatus} returns this
*/
proto.escrow.PayinStatus.prototype.setEscrowSignedTime = function(value) {
  return jspb.Message.setWrapperField(this, 4, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.escrow.PayinStatus} returns this
 */
proto.escrow.PayinStatus.prototype.clearEscrowSignedTime = function() {
  return this.setEscrowSignedTime(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.escrow.PayinStatus.prototype.hasEscrowSignedTime = function() {
  return jspb.Message.getField(this, 4) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.escrow.SignedPayinStatus.prototype.toObject = function(opt_includeInstance) {
  return proto.escrow.SignedPayinStatus.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.escrow.SignedPayinStatus} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.escrow.SignedPayinStatus.toObject = function(includeInstance, msg) {
  var f, obj = {
    status: (f = msg.getStatus()) && proto.escrow.PayinStatus.toObject(includeInstance, f),
    escrowSignature: msg.getEscrowSignature_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.escrow.SignedPayinStatus}
 */
proto.escrow.SignedPayinStatus.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.escrow.SignedPayinStatus;
  return proto.escrow.SignedPayinStatus.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.escrow.SignedPayinStatus} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.escrow.SignedPayinStatus}
 */
proto.escrow.SignedPayinStatus.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.escrow.PayinStatus;
      reader.readMessage(value,proto.escrow.PayinStatus.deserializeBinaryFromReader);
      msg.setStatus(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setEscrowSignature(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.escrow.SignedPayinStatus.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.escrow.SignedPayinStatus.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.escrow.SignedPayinStatus} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.escrow.SignedPayinStatus.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getStatus();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.escrow.PayinStatus.serializeBinaryToWriter
    );
  }
  f = message.getEscrowSignature_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      2,
      f
    );
  }
};


/**
 * optional PayinStatus status = 1;
 * @return {?proto.escrow.PayinStatus}
 */
proto.escrow.SignedPayinStatus.prototype.getStatus = function() {
  return /** @type{?proto.escrow.PayinStatus} */ (
    jspb.Message.getWrapperField(this, proto.escrow.PayinStatus, 1));
};


/**
 * @param {?proto.escrow.PayinStatus|undefined} value
 * @return {!proto.escrow.SignedPayinStatus} returns this
*/
proto.escrow.SignedPayinStatus.prototype.setStatus = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.escrow.SignedPayinStatus} returns this
 */
proto.escrow.SignedPayinStatus.prototype.clearStatus = function() {
  return this.setStatus(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.escrow.SignedPayinStatus.prototype.hasStatus = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional bytes escrow_signature = 2;
 * @return {!(string|Uint8Array)}
 */
proto.escrow.SignedPayinStatus.prototype.getEscrowSignature = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * optional bytes escrow_signature = 2;
 * This is a type-conversion wrapper around `getEscrowSignature()`
 * @return {string}
 */
proto.escrow.SignedPayinStatus.prototype.getEscrowSignature_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getEscrowSignature()));
};


/**
 * optional bytes escrow_signature = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getEscrowSignature()`
 * @return {!Uint8Array}
 */
proto.escrow.SignedPayinStatus.prototype.getEscrowSignature_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getEscrowSignature()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.escrow.SignedPayinStatus} returns this
 */
proto.escrow.SignedPayinStatus.prototype.setEscrowSignature = function(value) {
  return jspb.Message.setProto3BytesField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.escrow.PayoutStatus.prototype.toObject = function(opt_includeInstance) {
  return proto.escrow.PayoutStatus.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.escrow.PayoutStatus} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.escrow.PayoutStatus.toObject = function(includeInstance, msg) {
  var f, obj = {
    contractId: jspb.Message.getFieldWithDefault(msg, 1, ""),
    escrowId: jspb.Message.getFieldWithDefault(msg, 2, 0),
    fromAddress: msg.getFromAddress_asB64(),
    toAddress: msg.getToAddress_asB64(),
    authAddress: msg.getAuthAddress_asB64(),
    status: jspb.Message.getFieldWithDefault(msg, 6, 0),
    amount: jspb.Message.getFieldWithDefault(msg, 7, 0),
    collateral: jspb.Message.getFieldWithDefault(msg, 8, 0),
    withhold: jspb.Message.getFieldWithDefault(msg, 9, 0),
    paidAmount: jspb.Message.getFieldWithDefault(msg, 10, 0),
    numPaid: jspb.Message.getFieldWithDefault(msg, 11, 0),
    leftAmount: jspb.Message.getFieldWithDefault(msg, 12, 0),
    numLeft: jspb.Message.getFieldWithDefault(msg, 13, 0),
    nextAmount: jspb.Message.getFieldWithDefault(msg, 14, 0),
    lastPayoutTime: (f = msg.getLastPayoutTime()) && google_protobuf_timestamp_pb.Timestamp.toObject(includeInstance, f),
    nextPayoutTime: (f = msg.getNextPayoutTime()) && google_protobuf_timestamp_pb.Timestamp.toObject(includeInstance, f),
    escrowAddress: msg.getEscrowAddress_asB64(),
    escrowSignTime: (f = msg.getEscrowSignTime()) && google_protobuf_timestamp_pb.Timestamp.toObject(includeInstance, f),
    errorMsg: jspb.Message.getFieldWithDefault(msg, 19, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.escrow.PayoutStatus}
 */
proto.escrow.PayoutStatus.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.escrow.PayoutStatus;
  return proto.escrow.PayoutStatus.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.escrow.PayoutStatus} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.escrow.PayoutStatus}
 */
proto.escrow.PayoutStatus.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setContractId(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setEscrowId(value);
      break;
    case 3:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setFromAddress(value);
      break;
    case 4:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setToAddress(value);
      break;
    case 5:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setAuthAddress(value);
      break;
    case 6:
      var value = /** @type {!proto.escrow.EscrowStatus} */ (reader.readEnum());
      msg.setStatus(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setAmount(value);
      break;
    case 8:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setCollateral(value);
      break;
    case 9:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setWithhold(value);
      break;
    case 10:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setPaidAmount(value);
      break;
    case 11:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setNumPaid(value);
      break;
    case 12:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setLeftAmount(value);
      break;
    case 13:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setNumLeft(value);
      break;
    case 14:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setNextAmount(value);
      break;
    case 15:
      var value = new google_protobuf_timestamp_pb.Timestamp;
      reader.readMessage(value,google_protobuf_timestamp_pb.Timestamp.deserializeBinaryFromReader);
      msg.setLastPayoutTime(value);
      break;
    case 16:
      var value = new google_protobuf_timestamp_pb.Timestamp;
      reader.readMessage(value,google_protobuf_timestamp_pb.Timestamp.deserializeBinaryFromReader);
      msg.setNextPayoutTime(value);
      break;
    case 17:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setEscrowAddress(value);
      break;
    case 18:
      var value = new google_protobuf_timestamp_pb.Timestamp;
      reader.readMessage(value,google_protobuf_timestamp_pb.Timestamp.deserializeBinaryFromReader);
      msg.setEscrowSignTime(value);
      break;
    case 19:
      var value = /** @type {string} */ (reader.readString());
      msg.setErrorMsg(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.escrow.PayoutStatus.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.escrow.PayoutStatus.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.escrow.PayoutStatus} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.escrow.PayoutStatus.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getContractId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getEscrowId();
  if (f !== 0) {
    writer.writeInt64(
      2,
      f
    );
  }
  f = message.getFromAddress_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      3,
      f
    );
  }
  f = message.getToAddress_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      4,
      f
    );
  }
  f = message.getAuthAddress_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      5,
      f
    );
  }
  f = message.getStatus();
  if (f !== 0.0) {
    writer.writeEnum(
      6,
      f
    );
  }
  f = message.getAmount();
  if (f !== 0) {
    writer.writeInt64(
      7,
      f
    );
  }
  f = message.getCollateral();
  if (f !== 0) {
    writer.writeInt64(
      8,
      f
    );
  }
  f = message.getWithhold();
  if (f !== 0) {
    writer.writeInt64(
      9,
      f
    );
  }
  f = message.getPaidAmount();
  if (f !== 0) {
    writer.writeInt64(
      10,
      f
    );
  }
  f = message.getNumPaid();
  if (f !== 0) {
    writer.writeInt32(
      11,
      f
    );
  }
  f = message.getLeftAmount();
  if (f !== 0) {
    writer.writeInt64(
      12,
      f
    );
  }
  f = message.getNumLeft();
  if (f !== 0) {
    writer.writeInt32(
      13,
      f
    );
  }
  f = message.getNextAmount();
  if (f !== 0) {
    writer.writeInt64(
      14,
      f
    );
  }
  f = message.getLastPayoutTime();
  if (f != null) {
    writer.writeMessage(
      15,
      f,
      google_protobuf_timestamp_pb.Timestamp.serializeBinaryToWriter
    );
  }
  f = message.getNextPayoutTime();
  if (f != null) {
    writer.writeMessage(
      16,
      f,
      google_protobuf_timestamp_pb.Timestamp.serializeBinaryToWriter
    );
  }
  f = message.getEscrowAddress_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      17,
      f
    );
  }
  f = message.getEscrowSignTime();
  if (f != null) {
    writer.writeMessage(
      18,
      f,
      google_protobuf_timestamp_pb.Timestamp.serializeBinaryToWriter
    );
  }
  f = message.getErrorMsg();
  if (f.length > 0) {
    writer.writeString(
      19,
      f
    );
  }
};


/**
 * optional string contract_id = 1;
 * @return {string}
 */
proto.escrow.PayoutStatus.prototype.getContractId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.escrow.PayoutStatus} returns this
 */
proto.escrow.PayoutStatus.prototype.setContractId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional int64 escrow_id = 2;
 * @return {number}
 */
proto.escrow.PayoutStatus.prototype.getEscrowId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.escrow.PayoutStatus} returns this
 */
proto.escrow.PayoutStatus.prototype.setEscrowId = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional bytes from_address = 3;
 * @return {!(string|Uint8Array)}
 */
proto.escrow.PayoutStatus.prototype.getFromAddress = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * optional bytes from_address = 3;
 * This is a type-conversion wrapper around `getFromAddress()`
 * @return {string}
 */
proto.escrow.PayoutStatus.prototype.getFromAddress_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getFromAddress()));
};


/**
 * optional bytes from_address = 3;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getFromAddress()`
 * @return {!Uint8Array}
 */
proto.escrow.PayoutStatus.prototype.getFromAddress_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getFromAddress()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.escrow.PayoutStatus} returns this
 */
proto.escrow.PayoutStatus.prototype.setFromAddress = function(value) {
  return jspb.Message.setProto3BytesField(this, 3, value);
};


/**
 * optional bytes to_address = 4;
 * @return {!(string|Uint8Array)}
 */
proto.escrow.PayoutStatus.prototype.getToAddress = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * optional bytes to_address = 4;
 * This is a type-conversion wrapper around `getToAddress()`
 * @return {string}
 */
proto.escrow.PayoutStatus.prototype.getToAddress_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getToAddress()));
};


/**
 * optional bytes to_address = 4;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getToAddress()`
 * @return {!Uint8Array}
 */
proto.escrow.PayoutStatus.prototype.getToAddress_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getToAddress()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.escrow.PayoutStatus} returns this
 */
proto.escrow.PayoutStatus.prototype.setToAddress = function(value) {
  return jspb.Message.setProto3BytesField(this, 4, value);
};


/**
 * optional bytes auth_address = 5;
 * @return {!(string|Uint8Array)}
 */
proto.escrow.PayoutStatus.prototype.getAuthAddress = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * optional bytes auth_address = 5;
 * This is a type-conversion wrapper around `getAuthAddress()`
 * @return {string}
 */
proto.escrow.PayoutStatus.prototype.getAuthAddress_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getAuthAddress()));
};


/**
 * optional bytes auth_address = 5;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getAuthAddress()`
 * @return {!Uint8Array}
 */
proto.escrow.PayoutStatus.prototype.getAuthAddress_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getAuthAddress()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.escrow.PayoutStatus} returns this
 */
proto.escrow.PayoutStatus.prototype.setAuthAddress = function(value) {
  return jspb.Message.setProto3BytesField(this, 5, value);
};


/**
 * optional EscrowStatus status = 6;
 * @return {!proto.escrow.EscrowStatus}
 */
proto.escrow.PayoutStatus.prototype.getStatus = function() {
  return /** @type {!proto.escrow.EscrowStatus} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/**
 * @param {!proto.escrow.EscrowStatus} value
 * @return {!proto.escrow.PayoutStatus} returns this
 */
proto.escrow.PayoutStatus.prototype.setStatus = function(value) {
  return jspb.Message.setProto3EnumField(this, 6, value);
};


/**
 * optional int64 amount = 7;
 * @return {number}
 */
proto.escrow.PayoutStatus.prototype.getAmount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 7, 0));
};


/**
 * @param {number} value
 * @return {!proto.escrow.PayoutStatus} returns this
 */
proto.escrow.PayoutStatus.prototype.setAmount = function(value) {
  return jspb.Message.setProto3IntField(this, 7, value);
};


/**
 * optional int64 collateral = 8;
 * @return {number}
 */
proto.escrow.PayoutStatus.prototype.getCollateral = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 8, 0));
};


/**
 * @param {number} value
 * @return {!proto.escrow.PayoutStatus} returns this
 */
proto.escrow.PayoutStatus.prototype.setCollateral = function(value) {
  return jspb.Message.setProto3IntField(this, 8, value);
};


/**
 * optional int64 withhold = 9;
 * @return {number}
 */
proto.escrow.PayoutStatus.prototype.getWithhold = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 9, 0));
};


/**
 * @param {number} value
 * @return {!proto.escrow.PayoutStatus} returns this
 */
proto.escrow.PayoutStatus.prototype.setWithhold = function(value) {
  return jspb.Message.setProto3IntField(this, 9, value);
};


/**
 * optional int64 paid_amount = 10;
 * @return {number}
 */
proto.escrow.PayoutStatus.prototype.getPaidAmount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 10, 0));
};


/**
 * @param {number} value
 * @return {!proto.escrow.PayoutStatus} returns this
 */
proto.escrow.PayoutStatus.prototype.setPaidAmount = function(value) {
  return jspb.Message.setProto3IntField(this, 10, value);
};


/**
 * optional int32 num_paid = 11;
 * @return {number}
 */
proto.escrow.PayoutStatus.prototype.getNumPaid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 11, 0));
};


/**
 * @param {number} value
 * @return {!proto.escrow.PayoutStatus} returns this
 */
proto.escrow.PayoutStatus.prototype.setNumPaid = function(value) {
  return jspb.Message.setProto3IntField(this, 11, value);
};


/**
 * optional int64 left_amount = 12;
 * @return {number}
 */
proto.escrow.PayoutStatus.prototype.getLeftAmount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 12, 0));
};


/**
 * @param {number} value
 * @return {!proto.escrow.PayoutStatus} returns this
 */
proto.escrow.PayoutStatus.prototype.setLeftAmount = function(value) {
  return jspb.Message.setProto3IntField(this, 12, value);
};


/**
 * optional int32 num_left = 13;
 * @return {number}
 */
proto.escrow.PayoutStatus.prototype.getNumLeft = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 13, 0));
};


/**
 * @param {number} value
 * @return {!proto.escrow.PayoutStatus} returns this
 */
proto.escrow.PayoutStatus.prototype.setNumLeft = function(value) {
  return jspb.Message.setProto3IntField(this, 13, value);
};


/**
 * optional int64 next_amount = 14;
 * @return {number}
 */
proto.escrow.PayoutStatus.prototype.getNextAmount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 14, 0));
};


/**
 * @param {number} value
 * @return {!proto.escrow.PayoutStatus} returns this
 */
proto.escrow.PayoutStatus.prototype.setNextAmount = function(value) {
  return jspb.Message.setProto3IntField(this, 14, value);
};


/**
 * optional google.protobuf.Timestamp last_payout_time = 15;
 * @return {?proto.google.protobuf.Timestamp}
 */
proto.escrow.PayoutStatus.prototype.getLastPayoutTime = function() {
  return /** @type{?proto.google.protobuf.Timestamp} */ (
    jspb.Message.getWrapperField(this, google_protobuf_timestamp_pb.Timestamp, 15));
};


/**
 * @param {?proto.google.protobuf.Timestamp|undefined} value
 * @return {!proto.escrow.PayoutStatus} returns this
*/
proto.escrow.PayoutStatus.prototype.setLastPayoutTime = function(value) {
  return jspb.Message.setWrapperField(this, 15, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.escrow.PayoutStatus} returns this
 */
proto.escrow.PayoutStatus.prototype.clearLastPayoutTime = function() {
  return this.setLastPayoutTime(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.escrow.PayoutStatus.prototype.hasLastPayoutTime = function() {
  return jspb.Message.getField(this, 15) != null;
};


/**
 * optional google.protobuf.Timestamp next_payout_time = 16;
 * @return {?proto.google.protobuf.Timestamp}
 */
proto.escrow.PayoutStatus.prototype.getNextPayoutTime = function() {
  return /** @type{?proto.google.protobuf.Timestamp} */ (
    jspb.Message.getWrapperField(this, google_protobuf_timestamp_pb.Timestamp, 16));
};


/**
 * @param {?proto.google.protobuf.Timestamp|undefined} value
 * @return {!proto.escrow.PayoutStatus} returns this
*/
proto.escrow.PayoutStatus.prototype.setNextPayoutTime = function(value) {
  return jspb.Message.setWrapperField(this, 16, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.escrow.PayoutStatus} returns this
 */
proto.escrow.PayoutStatus.prototype.clearNextPayoutTime = function() {
  return this.setNextPayoutTime(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.escrow.PayoutStatus.prototype.hasNextPayoutTime = function() {
  return jspb.Message.getField(this, 16) != null;
};


/**
 * optional bytes escrow_address = 17;
 * @return {!(string|Uint8Array)}
 */
proto.escrow.PayoutStatus.prototype.getEscrowAddress = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 17, ""));
};


/**
 * optional bytes escrow_address = 17;
 * This is a type-conversion wrapper around `getEscrowAddress()`
 * @return {string}
 */
proto.escrow.PayoutStatus.prototype.getEscrowAddress_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getEscrowAddress()));
};


/**
 * optional bytes escrow_address = 17;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getEscrowAddress()`
 * @return {!Uint8Array}
 */
proto.escrow.PayoutStatus.prototype.getEscrowAddress_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getEscrowAddress()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.escrow.PayoutStatus} returns this
 */
proto.escrow.PayoutStatus.prototype.setEscrowAddress = function(value) {
  return jspb.Message.setProto3BytesField(this, 17, value);
};


/**
 * optional google.protobuf.Timestamp escrow_sign_time = 18;
 * @return {?proto.google.protobuf.Timestamp}
 */
proto.escrow.PayoutStatus.prototype.getEscrowSignTime = function() {
  return /** @type{?proto.google.protobuf.Timestamp} */ (
    jspb.Message.getWrapperField(this, google_protobuf_timestamp_pb.Timestamp, 18));
};


/**
 * @param {?proto.google.protobuf.Timestamp|undefined} value
 * @return {!proto.escrow.PayoutStatus} returns this
*/
proto.escrow.PayoutStatus.prototype.setEscrowSignTime = function(value) {
  return jspb.Message.setWrapperField(this, 18, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.escrow.PayoutStatus} returns this
 */
proto.escrow.PayoutStatus.prototype.clearEscrowSignTime = function() {
  return this.setEscrowSignTime(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.escrow.PayoutStatus.prototype.hasEscrowSignTime = function() {
  return jspb.Message.getField(this, 18) != null;
};


/**
 * optional string error_msg = 19;
 * @return {string}
 */
proto.escrow.PayoutStatus.prototype.getErrorMsg = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 19, ""));
};


/**
 * @param {string} value
 * @return {!proto.escrow.PayoutStatus} returns this
 */
proto.escrow.PayoutStatus.prototype.setErrorMsg = function(value) {
  return jspb.Message.setProto3StringField(this, 19, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.escrow.SignedPayoutStatus.prototype.toObject = function(opt_includeInstance) {
  return proto.escrow.SignedPayoutStatus.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.escrow.SignedPayoutStatus} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.escrow.SignedPayoutStatus.toObject = function(includeInstance, msg) {
  var f, obj = {
    status: (f = msg.getStatus()) && proto.escrow.PayoutStatus.toObject(includeInstance, f),
    escrowSignature: msg.getEscrowSignature_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.escrow.SignedPayoutStatus}
 */
proto.escrow.SignedPayoutStatus.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.escrow.SignedPayoutStatus;
  return proto.escrow.SignedPayoutStatus.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.escrow.SignedPayoutStatus} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.escrow.SignedPayoutStatus}
 */
proto.escrow.SignedPayoutStatus.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.escrow.PayoutStatus;
      reader.readMessage(value,proto.escrow.PayoutStatus.deserializeBinaryFromReader);
      msg.setStatus(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setEscrowSignature(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.escrow.SignedPayoutStatus.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.escrow.SignedPayoutStatus.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.escrow.SignedPayoutStatus} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.escrow.SignedPayoutStatus.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getStatus();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.escrow.PayoutStatus.serializeBinaryToWriter
    );
  }
  f = message.getEscrowSignature_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      2,
      f
    );
  }
};


/**
 * optional PayoutStatus status = 1;
 * @return {?proto.escrow.PayoutStatus}
 */
proto.escrow.SignedPayoutStatus.prototype.getStatus = function() {
  return /** @type{?proto.escrow.PayoutStatus} */ (
    jspb.Message.getWrapperField(this, proto.escrow.PayoutStatus, 1));
};


/**
 * @param {?proto.escrow.PayoutStatus|undefined} value
 * @return {!proto.escrow.SignedPayoutStatus} returns this
*/
proto.escrow.SignedPayoutStatus.prototype.setStatus = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.escrow.SignedPayoutStatus} returns this
 */
proto.escrow.SignedPayoutStatus.prototype.clearStatus = function() {
  return this.setStatus(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.escrow.SignedPayoutStatus.prototype.hasStatus = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional bytes escrow_signature = 2;
 * @return {!(string|Uint8Array)}
 */
proto.escrow.SignedPayoutStatus.prototype.getEscrowSignature = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * optional bytes escrow_signature = 2;
 * This is a type-conversion wrapper around `getEscrowSignature()`
 * @return {string}
 */
proto.escrow.SignedPayoutStatus.prototype.getEscrowSignature_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getEscrowSignature()));
};


/**
 * optional bytes escrow_signature = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getEscrowSignature()`
 * @return {!Uint8Array}
 */
proto.escrow.SignedPayoutStatus.prototype.getEscrowSignature_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getEscrowSignature()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.escrow.SignedPayoutStatus} returns this
 */
proto.escrow.SignedPayoutStatus.prototype.setEscrowSignature = function(value) {
  return jspb.Message.setProto3BytesField(this, 2, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.escrow.SignedPayoutStatusBatch.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.escrow.SignedPayoutStatusBatch.prototype.toObject = function(opt_includeInstance) {
  return proto.escrow.SignedPayoutStatusBatch.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.escrow.SignedPayoutStatusBatch} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.escrow.SignedPayoutStatusBatch.toObject = function(includeInstance, msg) {
  var f, obj = {
    statusList: jspb.Message.toObjectList(msg.getStatusList(),
    proto.escrow.PayoutStatus.toObject, includeInstance),
    escrowSignature: msg.getEscrowSignature_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.escrow.SignedPayoutStatusBatch}
 */
proto.escrow.SignedPayoutStatusBatch.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.escrow.SignedPayoutStatusBatch;
  return proto.escrow.SignedPayoutStatusBatch.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.escrow.SignedPayoutStatusBatch} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.escrow.SignedPayoutStatusBatch}
 */
proto.escrow.SignedPayoutStatusBatch.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.escrow.PayoutStatus;
      reader.readMessage(value,proto.escrow.PayoutStatus.deserializeBinaryFromReader);
      msg.addStatus(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setEscrowSignature(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.escrow.SignedPayoutStatusBatch.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.escrow.SignedPayoutStatusBatch.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.escrow.SignedPayoutStatusBatch} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.escrow.SignedPayoutStatusBatch.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getStatusList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.escrow.PayoutStatus.serializeBinaryToWriter
    );
  }
  f = message.getEscrowSignature_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      2,
      f
    );
  }
};


/**
 * repeated PayoutStatus status = 1;
 * @return {!Array<!proto.escrow.PayoutStatus>}
 */
proto.escrow.SignedPayoutStatusBatch.prototype.getStatusList = function() {
  return /** @type{!Array<!proto.escrow.PayoutStatus>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.escrow.PayoutStatus, 1));
};


/**
 * @param {!Array<!proto.escrow.PayoutStatus>} value
 * @return {!proto.escrow.SignedPayoutStatusBatch} returns this
*/
proto.escrow.SignedPayoutStatusBatch.prototype.setStatusList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.escrow.PayoutStatus=} opt_value
 * @param {number=} opt_index
 * @return {!proto.escrow.PayoutStatus}
 */
proto.escrow.SignedPayoutStatusBatch.prototype.addStatus = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.escrow.PayoutStatus, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.escrow.SignedPayoutStatusBatch} returns this
 */
proto.escrow.SignedPayoutStatusBatch.prototype.clearStatusList = function() {
  return this.setStatusList([]);
};


/**
 * optional bytes escrow_signature = 2;
 * @return {!(string|Uint8Array)}
 */
proto.escrow.SignedPayoutStatusBatch.prototype.getEscrowSignature = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * optional bytes escrow_signature = 2;
 * This is a type-conversion wrapper around `getEscrowSignature()`
 * @return {string}
 */
proto.escrow.SignedPayoutStatusBatch.prototype.getEscrowSignature_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getEscrowSignature()));
};


/**
 * optional bytes escrow_signature = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getEscrowSignature()`
 * @return {!Uint8Array}
 */
proto.escrow.SignedPayoutStatusBatch.prototype.getEscrowSignature_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getEscrowSignature()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.escrow.SignedPayoutStatusBatch} returns this
 */
proto.escrow.SignedPayoutStatusBatch.prototype.setEscrowSignature = function(value) {
  return jspb.Message.setProto3BytesField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.escrow.CancelContractRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.escrow.CancelContractRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.escrow.CancelContractRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.escrow.CancelContractRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    contractId: jspb.Message.getFieldWithDefault(msg, 1, ""),
    authAddress: msg.getAuthAddress_asB64(),
    authSignedTime: (f = msg.getAuthSignedTime()) && google_protobuf_timestamp_pb.Timestamp.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.escrow.CancelContractRequest}
 */
proto.escrow.CancelContractRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.escrow.CancelContractRequest;
  return proto.escrow.CancelContractRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.escrow.CancelContractRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.escrow.CancelContractRequest}
 */
proto.escrow.CancelContractRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setContractId(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setAuthAddress(value);
      break;
    case 3:
      var value = new google_protobuf_timestamp_pb.Timestamp;
      reader.readMessage(value,google_protobuf_timestamp_pb.Timestamp.deserializeBinaryFromReader);
      msg.setAuthSignedTime(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.escrow.CancelContractRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.escrow.CancelContractRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.escrow.CancelContractRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.escrow.CancelContractRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getContractId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getAuthAddress_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      2,
      f
    );
  }
  f = message.getAuthSignedTime();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      google_protobuf_timestamp_pb.Timestamp.serializeBinaryToWriter
    );
  }
};


/**
 * optional string contract_id = 1;
 * @return {string}
 */
proto.escrow.CancelContractRequest.prototype.getContractId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.escrow.CancelContractRequest} returns this
 */
proto.escrow.CancelContractRequest.prototype.setContractId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional bytes auth_address = 2;
 * @return {!(string|Uint8Array)}
 */
proto.escrow.CancelContractRequest.prototype.getAuthAddress = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * optional bytes auth_address = 2;
 * This is a type-conversion wrapper around `getAuthAddress()`
 * @return {string}
 */
proto.escrow.CancelContractRequest.prototype.getAuthAddress_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getAuthAddress()));
};


/**
 * optional bytes auth_address = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getAuthAddress()`
 * @return {!Uint8Array}
 */
proto.escrow.CancelContractRequest.prototype.getAuthAddress_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getAuthAddress()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.escrow.CancelContractRequest} returns this
 */
proto.escrow.CancelContractRequest.prototype.setAuthAddress = function(value) {
  return jspb.Message.setProto3BytesField(this, 2, value);
};


/**
 * optional google.protobuf.Timestamp auth_signed_time = 3;
 * @return {?proto.google.protobuf.Timestamp}
 */
proto.escrow.CancelContractRequest.prototype.getAuthSignedTime = function() {
  return /** @type{?proto.google.protobuf.Timestamp} */ (
    jspb.Message.getWrapperField(this, google_protobuf_timestamp_pb.Timestamp, 3));
};


/**
 * @param {?proto.google.protobuf.Timestamp|undefined} value
 * @return {!proto.escrow.CancelContractRequest} returns this
*/
proto.escrow.CancelContractRequest.prototype.setAuthSignedTime = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.escrow.CancelContractRequest} returns this
 */
proto.escrow.CancelContractRequest.prototype.clearAuthSignedTime = function() {
  return this.setAuthSignedTime(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.escrow.CancelContractRequest.prototype.hasAuthSignedTime = function() {
  return jspb.Message.getField(this, 3) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.escrow.SignedCancelRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.escrow.SignedCancelRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.escrow.SignedCancelRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.escrow.SignedCancelRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    request: (f = msg.getRequest()) && proto.escrow.CancelContractRequest.toObject(includeInstance, f),
    authSignature: msg.getAuthSignature_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.escrow.SignedCancelRequest}
 */
proto.escrow.SignedCancelRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.escrow.SignedCancelRequest;
  return proto.escrow.SignedCancelRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.escrow.SignedCancelRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.escrow.SignedCancelRequest}
 */
proto.escrow.SignedCancelRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.escrow.CancelContractRequest;
      reader.readMessage(value,proto.escrow.CancelContractRequest.deserializeBinaryFromReader);
      msg.setRequest(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setAuthSignature(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.escrow.SignedCancelRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.escrow.SignedCancelRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.escrow.SignedCancelRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.escrow.SignedCancelRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRequest();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.escrow.CancelContractRequest.serializeBinaryToWriter
    );
  }
  f = message.getAuthSignature_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      2,
      f
    );
  }
};


/**
 * optional CancelContractRequest request = 1;
 * @return {?proto.escrow.CancelContractRequest}
 */
proto.escrow.SignedCancelRequest.prototype.getRequest = function() {
  return /** @type{?proto.escrow.CancelContractRequest} */ (
    jspb.Message.getWrapperField(this, proto.escrow.CancelContractRequest, 1));
};


/**
 * @param {?proto.escrow.CancelContractRequest|undefined} value
 * @return {!proto.escrow.SignedCancelRequest} returns this
*/
proto.escrow.SignedCancelRequest.prototype.setRequest = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.escrow.SignedCancelRequest} returns this
 */
proto.escrow.SignedCancelRequest.prototype.clearRequest = function() {
  return this.setRequest(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.escrow.SignedCancelRequest.prototype.hasRequest = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional bytes auth_signature = 2;
 * @return {!(string|Uint8Array)}
 */
proto.escrow.SignedCancelRequest.prototype.getAuthSignature = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * optional bytes auth_signature = 2;
 * This is a type-conversion wrapper around `getAuthSignature()`
 * @return {string}
 */
proto.escrow.SignedCancelRequest.prototype.getAuthSignature_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getAuthSignature()));
};


/**
 * optional bytes auth_signature = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getAuthSignature()`
 * @return {!Uint8Array}
 */
proto.escrow.SignedCancelRequest.prototype.getAuthSignature_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getAuthSignature()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.escrow.SignedCancelRequest} returns this
 */
proto.escrow.SignedCancelRequest.prototype.setAuthSignature = function(value) {
  return jspb.Message.setProto3BytesField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.escrow.CancelContractResult.prototype.toObject = function(opt_includeInstance) {
  return proto.escrow.CancelContractResult.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.escrow.CancelContractResult} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.escrow.CancelContractResult.toObject = function(includeInstance, msg) {
  var f, obj = {
    contractId: jspb.Message.getFieldWithDefault(msg, 1, ""),
    escrowId: jspb.Message.getFieldWithDefault(msg, 2, 0),
    canceled: jspb.Message.getBooleanFieldWithDefault(msg, 3, false),
    escrowAddress: msg.getEscrowAddress_asB64(),
    escrowSignedTime: (f = msg.getEscrowSignedTime()) && google_protobuf_timestamp_pb.Timestamp.toObject(includeInstance, f),
    amount: jspb.Message.getFieldWithDefault(msg, 6, 0),
    paid: jspb.Message.getBooleanFieldWithDefault(msg, 7, false),
    reference: jspb.Message.getFieldWithDefault(msg, 8, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.escrow.CancelContractResult}
 */
proto.escrow.CancelContractResult.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.escrow.CancelContractResult;
  return proto.escrow.CancelContractResult.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.escrow.CancelContractResult} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.escrow.CancelContractResult}
 */
proto.escrow.CancelContractResult.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setContractId(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setEscrowId(value);
      break;
    case 3:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setCanceled(value);
      break;
    case 4:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setEscrowAddress(value);
      break;
    case 5:
      var value = new google_protobuf_timestamp_pb.Timestamp;
      reader.readMessage(value,google_protobuf_timestamp_pb.Timestamp.deserializeBinaryFromReader);
      msg.setEscrowSignedTime(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setAmount(value);
      break;
    case 7:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setPaid(value);
      break;
    case 8:
      var value = /** @type {string} */ (reader.readString());
      msg.setReference(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.escrow.CancelContractResult.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.escrow.CancelContractResult.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.escrow.CancelContractResult} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.escrow.CancelContractResult.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getContractId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getEscrowId();
  if (f !== 0) {
    writer.writeInt64(
      2,
      f
    );
  }
  f = message.getCanceled();
  if (f) {
    writer.writeBool(
      3,
      f
    );
  }
  f = message.getEscrowAddress_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      4,
      f
    );
  }
  f = message.getEscrowSignedTime();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      google_protobuf_timestamp_pb.Timestamp.serializeBinaryToWriter
    );
  }
  f = message.getAmount();
  if (f !== 0) {
    writer.writeInt64(
      6,
      f
    );
  }
  f = message.getPaid();
  if (f) {
    writer.writeBool(
      7,
      f
    );
  }
  f = message.getReference();
  if (f.length > 0) {
    writer.writeString(
      8,
      f
    );
  }
};


/**
 * optional string contract_id = 1;
 * @return {string}
 */
proto.escrow.CancelContractResult.prototype.getContractId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.escrow.CancelContractResult} returns this
 */
proto.escrow.CancelContractResult.prototype.setContractId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional int64 escrow_id = 2;
 * @return {number}
 */
proto.escrow.CancelContractResult.prototype.getEscrowId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.escrow.CancelContractResult} returns this
 */
proto.escrow.CancelContractResult.prototype.setEscrowId = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional bool canceled = 3;
 * @return {boolean}
 */
proto.escrow.CancelContractResult.prototype.getCanceled = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 3, false));
};


/**
 * @param {boolean} value
 * @return {!proto.escrow.CancelContractResult} returns this
 */
proto.escrow.CancelContractResult.prototype.setCanceled = function(value) {
  return jspb.Message.setProto3BooleanField(this, 3, value);
};


/**
 * optional bytes escrow_address = 4;
 * @return {!(string|Uint8Array)}
 */
proto.escrow.CancelContractResult.prototype.getEscrowAddress = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * optional bytes escrow_address = 4;
 * This is a type-conversion wrapper around `getEscrowAddress()`
 * @return {string}
 */
proto.escrow.CancelContractResult.prototype.getEscrowAddress_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getEscrowAddress()));
};


/**
 * optional bytes escrow_address = 4;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getEscrowAddress()`
 * @return {!Uint8Array}
 */
proto.escrow.CancelContractResult.prototype.getEscrowAddress_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getEscrowAddress()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.escrow.CancelContractResult} returns this
 */
proto.escrow.CancelContractResult.prototype.setEscrowAddress = function(value) {
  return jspb.Message.setProto3BytesField(this, 4, value);
};


/**
 * optional google.protobuf.Timestamp escrow_signed_time = 5;
 * @return {?proto.google.protobuf.Timestamp}
 */
proto.escrow.CancelContractResult.prototype.getEscrowSignedTime = function() {
  return /** @type{?proto.google.protobuf.Timestamp} */ (
    jspb.Message.getWrapperField(this, google_protobuf_timestamp_pb.Timestamp, 5));
};


/**
 * @param {?proto.google.protobuf.Timestamp|undefined} value
 * @return {!proto.escrow.CancelContractResult} returns this
*/
proto.escrow.CancelContractResult.prototype.setEscrowSignedTime = function(value) {
  return jspb.Message.setWrapperField(this, 5, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.escrow.CancelContractResult} returns this
 */
proto.escrow.CancelContractResult.prototype.clearEscrowSignedTime = function() {
  return this.setEscrowSignedTime(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.escrow.CancelContractResult.prototype.hasEscrowSignedTime = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional int64 amount = 6;
 * @return {number}
 */
proto.escrow.CancelContractResult.prototype.getAmount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/**
 * @param {number} value
 * @return {!proto.escrow.CancelContractResult} returns this
 */
proto.escrow.CancelContractResult.prototype.setAmount = function(value) {
  return jspb.Message.setProto3IntField(this, 6, value);
};


/**
 * optional bool paid = 7;
 * @return {boolean}
 */
proto.escrow.CancelContractResult.prototype.getPaid = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 7, false));
};


/**
 * @param {boolean} value
 * @return {!proto.escrow.CancelContractResult} returns this
 */
proto.escrow.CancelContractResult.prototype.setPaid = function(value) {
  return jspb.Message.setProto3BooleanField(this, 7, value);
};


/**
 * optional string reference = 8;
 * @return {string}
 */
proto.escrow.CancelContractResult.prototype.getReference = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 8, ""));
};


/**
 * @param {string} value
 * @return {!proto.escrow.CancelContractResult} returns this
 */
proto.escrow.CancelContractResult.prototype.setReference = function(value) {
  return jspb.Message.setProto3StringField(this, 8, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.escrow.SignedCancelContractResult.prototype.toObject = function(opt_includeInstance) {
  return proto.escrow.SignedCancelContractResult.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.escrow.SignedCancelContractResult} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.escrow.SignedCancelContractResult.toObject = function(includeInstance, msg) {
  var f, obj = {
    result: (f = msg.getResult()) && proto.escrow.CancelContractResult.toObject(includeInstance, f),
    escrowSignature: msg.getEscrowSignature_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.escrow.SignedCancelContractResult}
 */
proto.escrow.SignedCancelContractResult.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.escrow.SignedCancelContractResult;
  return proto.escrow.SignedCancelContractResult.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.escrow.SignedCancelContractResult} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.escrow.SignedCancelContractResult}
 */
proto.escrow.SignedCancelContractResult.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.escrow.CancelContractResult;
      reader.readMessage(value,proto.escrow.CancelContractResult.deserializeBinaryFromReader);
      msg.setResult(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setEscrowSignature(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.escrow.SignedCancelContractResult.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.escrow.SignedCancelContractResult.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.escrow.SignedCancelContractResult} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.escrow.SignedCancelContractResult.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getResult();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.escrow.CancelContractResult.serializeBinaryToWriter
    );
  }
  f = message.getEscrowSignature_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      2,
      f
    );
  }
};


/**
 * optional CancelContractResult result = 1;
 * @return {?proto.escrow.CancelContractResult}
 */
proto.escrow.SignedCancelContractResult.prototype.getResult = function() {
  return /** @type{?proto.escrow.CancelContractResult} */ (
    jspb.Message.getWrapperField(this, proto.escrow.CancelContractResult, 1));
};


/**
 * @param {?proto.escrow.CancelContractResult|undefined} value
 * @return {!proto.escrow.SignedCancelContractResult} returns this
*/
proto.escrow.SignedCancelContractResult.prototype.setResult = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.escrow.SignedCancelContractResult} returns this
 */
proto.escrow.SignedCancelContractResult.prototype.clearResult = function() {
  return this.setResult(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.escrow.SignedCancelContractResult.prototype.hasResult = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional bytes escrow_signature = 2;
 * @return {!(string|Uint8Array)}
 */
proto.escrow.SignedCancelContractResult.prototype.getEscrowSignature = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * optional bytes escrow_signature = 2;
 * This is a type-conversion wrapper around `getEscrowSignature()`
 * @return {string}
 */
proto.escrow.SignedCancelContractResult.prototype.getEscrowSignature_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getEscrowSignature()));
};


/**
 * optional bytes escrow_signature = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getEscrowSignature()`
 * @return {!Uint8Array}
 */
proto.escrow.SignedCancelContractResult.prototype.getEscrowSignature_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getEscrowSignature()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.escrow.SignedCancelContractResult} returns this
 */
proto.escrow.SignedCancelContractResult.prototype.setEscrowSignature = function(value) {
  return jspb.Message.setProto3BytesField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.escrow.PayoutAddress.prototype.toObject = function(opt_includeInstance) {
  return proto.escrow.PayoutAddress.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.escrow.PayoutAddress} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.escrow.PayoutAddress.toObject = function(includeInstance, msg) {
  var f, obj = {
    toAddress: msg.getToAddress_asB64(),
    signedTime: (f = msg.getSignedTime()) && google_protobuf_timestamp_pb.Timestamp.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.escrow.PayoutAddress}
 */
proto.escrow.PayoutAddress.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.escrow.PayoutAddress;
  return proto.escrow.PayoutAddress.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.escrow.PayoutAddress} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.escrow.PayoutAddress}
 */
proto.escrow.PayoutAddress.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setToAddress(value);
      break;
    case 2:
      var value = new google_protobuf_timestamp_pb.Timestamp;
      reader.readMessage(value,google_protobuf_timestamp_pb.Timestamp.deserializeBinaryFromReader);
      msg.setSignedTime(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.escrow.PayoutAddress.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.escrow.PayoutAddress.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.escrow.PayoutAddress} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.escrow.PayoutAddress.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getToAddress_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = message.getSignedTime();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      google_protobuf_timestamp_pb.Timestamp.serializeBinaryToWriter
    );
  }
};


/**
 * optional bytes to_address = 1;
 * @return {!(string|Uint8Array)}
 */
proto.escrow.PayoutAddress.prototype.getToAddress = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes to_address = 1;
 * This is a type-conversion wrapper around `getToAddress()`
 * @return {string}
 */
proto.escrow.PayoutAddress.prototype.getToAddress_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getToAddress()));
};


/**
 * optional bytes to_address = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getToAddress()`
 * @return {!Uint8Array}
 */
proto.escrow.PayoutAddress.prototype.getToAddress_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getToAddress()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.escrow.PayoutAddress} returns this
 */
proto.escrow.PayoutAddress.prototype.setToAddress = function(value) {
  return jspb.Message.setProto3BytesField(this, 1, value);
};


/**
 * optional google.protobuf.Timestamp signed_time = 2;
 * @return {?proto.google.protobuf.Timestamp}
 */
proto.escrow.PayoutAddress.prototype.getSignedTime = function() {
  return /** @type{?proto.google.protobuf.Timestamp} */ (
    jspb.Message.getWrapperField(this, google_protobuf_timestamp_pb.Timestamp, 2));
};


/**
 * @param {?proto.google.protobuf.Timestamp|undefined} value
 * @return {!proto.escrow.PayoutAddress} returns this
*/
proto.escrow.PayoutAddress.prototype.setSignedTime = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.escrow.PayoutAddress} returns this
 */
proto.escrow.PayoutAddress.prototype.clearSignedTime = function() {
  return this.setSignedTime(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.escrow.PayoutAddress.prototype.hasSignedTime = function() {
  return jspb.Message.getField(this, 2) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.escrow.SignedPayoutAddress.prototype.toObject = function(opt_includeInstance) {
  return proto.escrow.SignedPayoutAddress.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.escrow.SignedPayoutAddress} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.escrow.SignedPayoutAddress.toObject = function(includeInstance, msg) {
  var f, obj = {
    address: (f = msg.getAddress()) && proto.escrow.PayoutAddress.toObject(includeInstance, f),
    signature: msg.getSignature_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.escrow.SignedPayoutAddress}
 */
proto.escrow.SignedPayoutAddress.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.escrow.SignedPayoutAddress;
  return proto.escrow.SignedPayoutAddress.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.escrow.SignedPayoutAddress} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.escrow.SignedPayoutAddress}
 */
proto.escrow.SignedPayoutAddress.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.escrow.PayoutAddress;
      reader.readMessage(value,proto.escrow.PayoutAddress.deserializeBinaryFromReader);
      msg.setAddress(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setSignature(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.escrow.SignedPayoutAddress.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.escrow.SignedPayoutAddress.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.escrow.SignedPayoutAddress} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.escrow.SignedPayoutAddress.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAddress();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.escrow.PayoutAddress.serializeBinaryToWriter
    );
  }
  f = message.getSignature_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      2,
      f
    );
  }
};


/**
 * optional PayoutAddress address = 1;
 * @return {?proto.escrow.PayoutAddress}
 */
proto.escrow.SignedPayoutAddress.prototype.getAddress = function() {
  return /** @type{?proto.escrow.PayoutAddress} */ (
    jspb.Message.getWrapperField(this, proto.escrow.PayoutAddress, 1));
};


/**
 * @param {?proto.escrow.PayoutAddress|undefined} value
 * @return {!proto.escrow.SignedPayoutAddress} returns this
*/
proto.escrow.SignedPayoutAddress.prototype.setAddress = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.escrow.SignedPayoutAddress} returns this
 */
proto.escrow.SignedPayoutAddress.prototype.clearAddress = function() {
  return this.setAddress(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.escrow.SignedPayoutAddress.prototype.hasAddress = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional bytes signature = 2;
 * @return {!(string|Uint8Array)}
 */
proto.escrow.SignedPayoutAddress.prototype.getSignature = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * optional bytes signature = 2;
 * This is a type-conversion wrapper around `getSignature()`
 * @return {string}
 */
proto.escrow.SignedPayoutAddress.prototype.getSignature_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getSignature()));
};


/**
 * optional bytes signature = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getSignature()`
 * @return {!Uint8Array}
 */
proto.escrow.SignedPayoutAddress.prototype.getSignature_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getSignature()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.escrow.SignedPayoutAddress} returns this
 */
proto.escrow.SignedPayoutAddress.prototype.setSignature = function(value) {
  return jspb.Message.setProto3BytesField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.escrow.Payment.prototype.toObject = function(opt_includeInstance) {
  return proto.escrow.Payment.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.escrow.Payment} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.escrow.Payment.toObject = function(includeInstance, msg) {
  var f, obj = {
    contractId: jspb.Message.getFieldWithDefault(msg, 1, ""),
    escrowId: jspb.Message.getFieldWithDefault(msg, 2, 0),
    fromAddress: msg.getFromAddress_asB64(),
    toAddress: msg.getToAddress_asB64(),
    amount: jspb.Message.getFieldWithDefault(msg, 5, 0),
    index: jspb.Message.getFieldWithDefault(msg, 6, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.escrow.Payment}
 */
proto.escrow.Payment.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.escrow.Payment;
  return proto.escrow.Payment.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.escrow.Payment} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.escrow.Payment}
 */
proto.escrow.Payment.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setContractId(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setEscrowId(value);
      break;
    case 3:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setFromAddress(value);
      break;
    case 4:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setToAddress(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setAmount(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setIndex(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.escrow.Payment.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.escrow.Payment.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.escrow.Payment} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.escrow.Payment.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getContractId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getEscrowId();
  if (f !== 0) {
    writer.writeInt64(
      2,
      f
    );
  }
  f = message.getFromAddress_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      3,
      f
    );
  }
  f = message.getToAddress_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      4,
      f
    );
  }
  f = message.getAmount();
  if (f !== 0) {
    writer.writeInt64(
      5,
      f
    );
  }
  f = message.getIndex();
  if (f !== 0) {
    writer.writeInt32(
      6,
      f
    );
  }
};


/**
 * optional string contract_id = 1;
 * @return {string}
 */
proto.escrow.Payment.prototype.getContractId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.escrow.Payment} returns this
 */
proto.escrow.Payment.prototype.setContractId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional int64 escrow_id = 2;
 * @return {number}
 */
proto.escrow.Payment.prototype.getEscrowId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.escrow.Payment} returns this
 */
proto.escrow.Payment.prototype.setEscrowId = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional bytes from_address = 3;
 * @return {!(string|Uint8Array)}
 */
proto.escrow.Payment.prototype.getFromAddress = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * optional bytes from_address = 3;
 * This is a type-conversion wrapper around `getFromAddress()`
 * @return {string}
 */
proto.escrow.Payment.prototype.getFromAddress_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getFromAddress()));
};


/**
 * optional bytes from_address = 3;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getFromAddress()`
 * @return {!Uint8Array}
 */
proto.escrow.Payment.prototype.getFromAddress_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getFromAddress()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.escrow.Payment} returns this
 */
proto.escrow.Payment.prototype.setFromAddress = function(value) {
  return jspb.Message.setProto3BytesField(this, 3, value);
};


/**
 * optional bytes to_address = 4;
 * @return {!(string|Uint8Array)}
 */
proto.escrow.Payment.prototype.getToAddress = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * optional bytes to_address = 4;
 * This is a type-conversion wrapper around `getToAddress()`
 * @return {string}
 */
proto.escrow.Payment.prototype.getToAddress_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getToAddress()));
};


/**
 * optional bytes to_address = 4;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getToAddress()`
 * @return {!Uint8Array}
 */
proto.escrow.Payment.prototype.getToAddress_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getToAddress()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.escrow.Payment} returns this
 */
proto.escrow.Payment.prototype.setToAddress = function(value) {
  return jspb.Message.setProto3BytesField(this, 4, value);
};


/**
 * optional int64 amount = 5;
 * @return {number}
 */
proto.escrow.Payment.prototype.getAmount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {number} value
 * @return {!proto.escrow.Payment} returns this
 */
proto.escrow.Payment.prototype.setAmount = function(value) {
  return jspb.Message.setProto3IntField(this, 5, value);
};


/**
 * optional int32 index = 6;
 * @return {number}
 */
proto.escrow.Payment.prototype.getIndex = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/**
 * @param {number} value
 * @return {!proto.escrow.Payment} returns this
 */
proto.escrow.Payment.prototype.setIndex = function(value) {
  return jspb.Message.setProto3IntField(this, 6, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.escrow.PaymentResult.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.escrow.PaymentResult.prototype.toObject = function(opt_includeInstance) {
  return proto.escrow.PaymentResult.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.escrow.PaymentResult} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.escrow.PaymentResult.toObject = function(includeInstance, msg) {
  var f, obj = {
    paymentList: jspb.Message.toObjectList(msg.getPaymentList(),
    proto.escrow.Payment.toObject, includeInstance),
    escrowAddress: msg.getEscrowAddress_asB64(),
    escrowSignedTime: (f = msg.getEscrowSignedTime()) && google_protobuf_timestamp_pb.Timestamp.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.escrow.PaymentResult}
 */
proto.escrow.PaymentResult.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.escrow.PaymentResult;
  return proto.escrow.PaymentResult.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.escrow.PaymentResult} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.escrow.PaymentResult}
 */
proto.escrow.PaymentResult.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.escrow.Payment;
      reader.readMessage(value,proto.escrow.Payment.deserializeBinaryFromReader);
      msg.addPayment(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setEscrowAddress(value);
      break;
    case 3:
      var value = new google_protobuf_timestamp_pb.Timestamp;
      reader.readMessage(value,google_protobuf_timestamp_pb.Timestamp.deserializeBinaryFromReader);
      msg.setEscrowSignedTime(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.escrow.PaymentResult.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.escrow.PaymentResult.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.escrow.PaymentResult} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.escrow.PaymentResult.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPaymentList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.escrow.Payment.serializeBinaryToWriter
    );
  }
  f = message.getEscrowAddress_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      2,
      f
    );
  }
  f = message.getEscrowSignedTime();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      google_protobuf_timestamp_pb.Timestamp.serializeBinaryToWriter
    );
  }
};


/**
 * repeated Payment payment = 1;
 * @return {!Array<!proto.escrow.Payment>}
 */
proto.escrow.PaymentResult.prototype.getPaymentList = function() {
  return /** @type{!Array<!proto.escrow.Payment>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.escrow.Payment, 1));
};


/**
 * @param {!Array<!proto.escrow.Payment>} value
 * @return {!proto.escrow.PaymentResult} returns this
*/
proto.escrow.PaymentResult.prototype.setPaymentList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.escrow.Payment=} opt_value
 * @param {number=} opt_index
 * @return {!proto.escrow.Payment}
 */
proto.escrow.PaymentResult.prototype.addPayment = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.escrow.Payment, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.escrow.PaymentResult} returns this
 */
proto.escrow.PaymentResult.prototype.clearPaymentList = function() {
  return this.setPaymentList([]);
};


/**
 * optional bytes escrow_address = 2;
 * @return {!(string|Uint8Array)}
 */
proto.escrow.PaymentResult.prototype.getEscrowAddress = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * optional bytes escrow_address = 2;
 * This is a type-conversion wrapper around `getEscrowAddress()`
 * @return {string}
 */
proto.escrow.PaymentResult.prototype.getEscrowAddress_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getEscrowAddress()));
};


/**
 * optional bytes escrow_address = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getEscrowAddress()`
 * @return {!Uint8Array}
 */
proto.escrow.PaymentResult.prototype.getEscrowAddress_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getEscrowAddress()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.escrow.PaymentResult} returns this
 */
proto.escrow.PaymentResult.prototype.setEscrowAddress = function(value) {
  return jspb.Message.setProto3BytesField(this, 2, value);
};


/**
 * optional google.protobuf.Timestamp escrow_signed_time = 3;
 * @return {?proto.google.protobuf.Timestamp}
 */
proto.escrow.PaymentResult.prototype.getEscrowSignedTime = function() {
  return /** @type{?proto.google.protobuf.Timestamp} */ (
    jspb.Message.getWrapperField(this, google_protobuf_timestamp_pb.Timestamp, 3));
};


/**
 * @param {?proto.google.protobuf.Timestamp|undefined} value
 * @return {!proto.escrow.PaymentResult} returns this
*/
proto.escrow.PaymentResult.prototype.setEscrowSignedTime = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.escrow.PaymentResult} returns this
 */
proto.escrow.PaymentResult.prototype.clearEscrowSignedTime = function() {
  return this.setEscrowSignedTime(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.escrow.PaymentResult.prototype.hasEscrowSignedTime = function() {
  return jspb.Message.getField(this, 3) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.escrow.SignedPaymentResult.prototype.toObject = function(opt_includeInstance) {
  return proto.escrow.SignedPaymentResult.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.escrow.SignedPaymentResult} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.escrow.SignedPaymentResult.toObject = function(includeInstance, msg) {
  var f, obj = {
    result: (f = msg.getResult()) && proto.escrow.PaymentResult.toObject(includeInstance, f),
    escrowSignature: msg.getEscrowSignature_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.escrow.SignedPaymentResult}
 */
proto.escrow.SignedPaymentResult.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.escrow.SignedPaymentResult;
  return proto.escrow.SignedPaymentResult.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.escrow.SignedPaymentResult} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.escrow.SignedPaymentResult}
 */
proto.escrow.SignedPaymentResult.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.escrow.PaymentResult;
      reader.readMessage(value,proto.escrow.PaymentResult.deserializeBinaryFromReader);
      msg.setResult(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setEscrowSignature(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.escrow.SignedPaymentResult.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.escrow.SignedPaymentResult.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.escrow.SignedPaymentResult} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.escrow.SignedPaymentResult.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getResult();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.escrow.PaymentResult.serializeBinaryToWriter
    );
  }
  f = message.getEscrowSignature_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      2,
      f
    );
  }
};


/**
 * optional PaymentResult result = 1;
 * @return {?proto.escrow.PaymentResult}
 */
proto.escrow.SignedPaymentResult.prototype.getResult = function() {
  return /** @type{?proto.escrow.PaymentResult} */ (
    jspb.Message.getWrapperField(this, proto.escrow.PaymentResult, 1));
};


/**
 * @param {?proto.escrow.PaymentResult|undefined} value
 * @return {!proto.escrow.SignedPaymentResult} returns this
*/
proto.escrow.SignedPaymentResult.prototype.setResult = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.escrow.SignedPaymentResult} returns this
 */
proto.escrow.SignedPaymentResult.prototype.clearResult = function() {
  return this.setResult(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.escrow.SignedPaymentResult.prototype.hasResult = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional bytes escrow_signature = 2;
 * @return {!(string|Uint8Array)}
 */
proto.escrow.SignedPaymentResult.prototype.getEscrowSignature = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * optional bytes escrow_signature = 2;
 * This is a type-conversion wrapper around `getEscrowSignature()`
 * @return {string}
 */
proto.escrow.SignedPaymentResult.prototype.getEscrowSignature_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getEscrowSignature()));
};


/**
 * optional bytes escrow_signature = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getEscrowSignature()`
 * @return {!Uint8Array}
 */
proto.escrow.SignedPaymentResult.prototype.getEscrowSignature_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getEscrowSignature()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.escrow.SignedPaymentResult} returns this
 */
proto.escrow.SignedPaymentResult.prototype.setEscrowSignature = function(value) {
  return jspb.Message.setProto3BytesField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.escrow.BalanceResult.prototype.toObject = function(opt_includeInstance) {
  return proto.escrow.BalanceResult.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.escrow.BalanceResult} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.escrow.BalanceResult.toObject = function(includeInstance, msg) {
  var f, obj = {
    balance: jspb.Message.getFieldWithDefault(msg, 1, 0),
    escrowAddress: msg.getEscrowAddress_asB64(),
    escrowSignedTime: (f = msg.getEscrowSignedTime()) && google_protobuf_timestamp_pb.Timestamp.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.escrow.BalanceResult}
 */
proto.escrow.BalanceResult.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.escrow.BalanceResult;
  return proto.escrow.BalanceResult.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.escrow.BalanceResult} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.escrow.BalanceResult}
 */
proto.escrow.BalanceResult.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setBalance(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setEscrowAddress(value);
      break;
    case 3:
      var value = new google_protobuf_timestamp_pb.Timestamp;
      reader.readMessage(value,google_protobuf_timestamp_pb.Timestamp.deserializeBinaryFromReader);
      msg.setEscrowSignedTime(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.escrow.BalanceResult.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.escrow.BalanceResult.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.escrow.BalanceResult} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.escrow.BalanceResult.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getBalance();
  if (f !== 0) {
    writer.writeInt64(
      1,
      f
    );
  }
  f = message.getEscrowAddress_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      2,
      f
    );
  }
  f = message.getEscrowSignedTime();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      google_protobuf_timestamp_pb.Timestamp.serializeBinaryToWriter
    );
  }
};


/**
 * optional int64 balance = 1;
 * @return {number}
 */
proto.escrow.BalanceResult.prototype.getBalance = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.escrow.BalanceResult} returns this
 */
proto.escrow.BalanceResult.prototype.setBalance = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional bytes escrow_address = 2;
 * @return {!(string|Uint8Array)}
 */
proto.escrow.BalanceResult.prototype.getEscrowAddress = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * optional bytes escrow_address = 2;
 * This is a type-conversion wrapper around `getEscrowAddress()`
 * @return {string}
 */
proto.escrow.BalanceResult.prototype.getEscrowAddress_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getEscrowAddress()));
};


/**
 * optional bytes escrow_address = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getEscrowAddress()`
 * @return {!Uint8Array}
 */
proto.escrow.BalanceResult.prototype.getEscrowAddress_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getEscrowAddress()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.escrow.BalanceResult} returns this
 */
proto.escrow.BalanceResult.prototype.setEscrowAddress = function(value) {
  return jspb.Message.setProto3BytesField(this, 2, value);
};


/**
 * optional google.protobuf.Timestamp escrow_signed_time = 3;
 * @return {?proto.google.protobuf.Timestamp}
 */
proto.escrow.BalanceResult.prototype.getEscrowSignedTime = function() {
  return /** @type{?proto.google.protobuf.Timestamp} */ (
    jspb.Message.getWrapperField(this, google_protobuf_timestamp_pb.Timestamp, 3));
};


/**
 * @param {?proto.google.protobuf.Timestamp|undefined} value
 * @return {!proto.escrow.BalanceResult} returns this
*/
proto.escrow.BalanceResult.prototype.setEscrowSignedTime = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.escrow.BalanceResult} returns this
 */
proto.escrow.BalanceResult.prototype.clearEscrowSignedTime = function() {
  return this.setEscrowSignedTime(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.escrow.BalanceResult.prototype.hasEscrowSignedTime = function() {
  return jspb.Message.getField(this, 3) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.escrow.SignedBalanceResult.prototype.toObject = function(opt_includeInstance) {
  return proto.escrow.SignedBalanceResult.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.escrow.SignedBalanceResult} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.escrow.SignedBalanceResult.toObject = function(includeInstance, msg) {
  var f, obj = {
    result: (f = msg.getResult()) && proto.escrow.BalanceResult.toObject(includeInstance, f),
    escrowSignature: msg.getEscrowSignature_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.escrow.SignedBalanceResult}
 */
proto.escrow.SignedBalanceResult.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.escrow.SignedBalanceResult;
  return proto.escrow.SignedBalanceResult.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.escrow.SignedBalanceResult} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.escrow.SignedBalanceResult}
 */
proto.escrow.SignedBalanceResult.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.escrow.BalanceResult;
      reader.readMessage(value,proto.escrow.BalanceResult.deserializeBinaryFromReader);
      msg.setResult(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setEscrowSignature(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.escrow.SignedBalanceResult.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.escrow.SignedBalanceResult.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.escrow.SignedBalanceResult} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.escrow.SignedBalanceResult.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getResult();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.escrow.BalanceResult.serializeBinaryToWriter
    );
  }
  f = message.getEscrowSignature_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      2,
      f
    );
  }
};


/**
 * optional BalanceResult result = 1;
 * @return {?proto.escrow.BalanceResult}
 */
proto.escrow.SignedBalanceResult.prototype.getResult = function() {
  return /** @type{?proto.escrow.BalanceResult} */ (
    jspb.Message.getWrapperField(this, proto.escrow.BalanceResult, 1));
};


/**
 * @param {?proto.escrow.BalanceResult|undefined} value
 * @return {!proto.escrow.SignedBalanceResult} returns this
*/
proto.escrow.SignedBalanceResult.prototype.setResult = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.escrow.SignedBalanceResult} returns this
 */
proto.escrow.SignedBalanceResult.prototype.clearResult = function() {
  return this.setResult(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.escrow.SignedBalanceResult.prototype.hasResult = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional bytes escrow_signature = 2;
 * @return {!(string|Uint8Array)}
 */
proto.escrow.SignedBalanceResult.prototype.getEscrowSignature = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * optional bytes escrow_signature = 2;
 * This is a type-conversion wrapper around `getEscrowSignature()`
 * @return {string}
 */
proto.escrow.SignedBalanceResult.prototype.getEscrowSignature_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getEscrowSignature()));
};


/**
 * optional bytes escrow_signature = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getEscrowSignature()`
 * @return {!Uint8Array}
 */
proto.escrow.SignedBalanceResult.prototype.getEscrowSignature_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getEscrowSignature()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.escrow.SignedBalanceResult} returns this
 */
proto.escrow.SignedBalanceResult.prototype.setEscrowSignature = function(value) {
  return jspb.Message.setProto3BytesField(this, 2, value);
};


/**
 * @enum {number}
 */
proto.escrow.TokenType = {
  BTT: 0
};

/**
 * @enum {number}
 */
proto.escrow.Schedule = {
  MONTHLY: 0,
  QUARTERLY: 1,
  ANNUALLY: 2,
  CUSTOMIZED: 3
};

/**
 * @enum {number}
 */
proto.escrow.ContractType = {
  REGULAR: 0,
  PLAN: 1,
  REVISE: 2
};

/**
 * @enum {number}
 */
proto.escrow.EscrowStatus = {
  INITIATED: 0,
  ACTIVE: 1,
  CANCELED: 2,
  CLOSED: 3
};

goog.object.extend(exports, proto.escrow);
